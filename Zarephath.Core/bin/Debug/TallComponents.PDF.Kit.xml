<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TallComponents.PDF.Kit</name>
    </assembly>
    <members>
        <member name="T:TallComponents.PDF.Brushes.AxialGradientBrush">
            <summary>
            A brush that paints a gradient fill that changes from one color to another along a straight line.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Brushes.AxialGradientBrush.#ctor">
            <summary>
            Create a new AxialGradientBrush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Brushes.AxialGradientBrush.#ctor(TallComponents.PDF.Colors.Color,TallComponents.PDF.Colors.Color,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new AxialGradientBrush with given start and endpoint.
            </summary>
            <param name="startColor">The start color of the gradient fill.</param>
            <param name="endColor">The end color of the gradient fill.</param>
            <param name="startX">The horizontal position of the starting point of the gradient fill.</param>
            <param name="startY">The vertical position of the starting point of the gradient fill.</param>
            <param name="endX">The horizontal position of the ending point of the gradient fill.</param>
            <param name="endY">The vertical position of the ending point of the gradient fill.</param>
        </member>
        <member name="P:TallComponents.PDF.Brushes.AxialGradientBrush.StartX">
            <summary>
            The horizontal position of the starting point of the gradient fill.
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Brushes.AxialGradientBrush.StartY">
            <summary>
            The vertical position of the starting point of the gradient fill.
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Brushes.AxialGradientBrush.EndX">
            <summary>
            The horizontal position of the ending point of the gradient fill.
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Brushes.AxialGradientBrush.EndY">
            <summary>
            The vertical position of the ending point of the gradient fill.
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Brushes.Brush">
            <summary>
            When a path is drawn, enclosed areas are filled using a brush.
            Brush is an abstract base class for all brushes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Brushes.Brush.Clone">
            <summary>
            Clones a Brush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Brushes.Brush.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Brush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Brushes.Brush.autosize(System.Double,System.Double)">
            <summary>
            Implement this method to help set defaults to fill the entire area if none are set.
            </summary>
            <remarks>This is used by Border to setup the background fill with easy defaults.</remarks>
            <param name="width">The width of the area.</param>
            <param name="height">The height of the area.</param>
        </member>
        <member name="P:TallComponents.PDF.Brushes.Brush.IsTransparent">
            <summary>
            Gets if the brushes colorspace is transparent
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Brushes.ColorStop">
            <summary>
            The ColorStop class lets you define multiple color stops for a gradient brush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Brushes.ColorStop.#ctor(TallComponents.PDF.Colors.Color,System.Double)">
            <summary>
            Create a new color stop with given color and position.
            </summary>
            <param name="color">The color of this color stop.</param>
            <param name="position">The position of this color stop.</param>
        </member>
        <member name="P:TallComponents.PDF.Brushes.ColorStop.Color">
            <summary>
            The color of this color stop.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Brushes.ColorStop.Position">
            <summary>
            The position of this color stop.
            </summary>
            <remarks>
            Position 0 corresponds with the start point for a linear color gradient and with the inner radius for a radial gradient brush. 
            Position 1 corresponds with the end point for a linear color gradient and with the outer radius for a radial gradient brush.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Brushes.ColorStopCollection">
            <summary>
            The ColorStopCollection class lets you define multiple color stops for a gradient brush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Brushes.ColorStopCollection.#ctor(TallComponents.PDF.Colors.Color,TallComponents.PDF.Colors.Color)">
            <summary>
            Create a new collection with 2 initial color stops positioned at 0 and 1 with colors start and end, respectivey.
            </summary>
            <param name="start">This is the color of the color stop at position 0.</param>
            <param name="end">This is the color of the color stop at position 1.</param>
        </member>
        <member name="P:TallComponents.PDF.Brushes.ColorStopCollection.Count">
            <summary>
            Number of color stops in this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Brushes.ColorStopCollection.Add(TallComponents.PDF.Brushes.ColorStop)">
            <summary>
            Add a color stop to this collection.
            </summary>
            <param name="colorStop">Add this color stop.</param>
        </member>
        <member name="P:TallComponents.PDF.Brushes.ColorStopCollection.Item(System.Int32)">
            <summary>
            The ColorStop on the given position
            </summary>
            <param name="index">the zero-based index.</param>
        </member>
        <member name="M:TallComponents.PDF.Brushes.ColorStopCollection.Contains(TallComponents.PDF.Brushes.ColorStop)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Brushes.ColorStop">ColorStop</see> is in the <see cref="T:TallComponents.PDF.Brushes.ColorStopCollection">ColorStopCollection</see>.
            </summary>
            <param name="colorStop">The <see cref="T:TallComponents.PDF.Brushes.ColorStop"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Brushes.ColorStop"/> is found in this <see cref="T:TallComponents.PDF.Brushes.ColorStopCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="colorStop"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="colorStop"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Brushes.ColorStopCollection.IndexOf(TallComponents.PDF.Brushes.ColorStop)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Brushes.ColorStop">ColorStop</see> in the <see cref="T:TallComponents.PDF.Brushes.ColorStopCollection">ColorStopCollection</see>.
            </summary>
            <param name="colorStop">The <see cref="T:TallComponents.PDF.Brushes.ColorStop"/> to locate in the <see cref="T:TallComponents.PDF.Brushes.ColorStopCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Brushes.ColorStop"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Brushes.ColorStopCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Brushes.ColorStopCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Brushes.WrapMode">
            <summary>
            Specifies how the gradient behaves outside its start and end point. The SVG term for this is 'spread method'.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Brushes.WrapMode.Stop">
            <summary>
            The gradient does not extend outside the start and end points.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Brushes.WrapMode.Clamp">
            <summary>
            The gradient continues at the same color of the start or end point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Brushes.GradientBrush">
            <summary>
            An abstract base class for AxialGradientBrush and RadialGradientBrush that holds 
            common properties for these classes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Brushes.GradientBrush.#ctor(TallComponents.PDF.Colors.Color,TallComponents.PDF.Colors.Color)">
            <summary>
            Set the start and endcolor of the gradientbrush derived class.
            </summary>
            <param name="startColor">The start color of the gradient fill.</param>
            <param name="endColor">The end color of the gradient fill.</param>
        </member>
        <member name="P:TallComponents.PDF.Brushes.GradientBrush.StartColor">
            <summary>
            The start color of the gradient fill.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Brushes.GradientBrush.EndColor">
            <summary>
            The end color of the gradient fill.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Brushes.GradientBrush.ColorStops">
            <summary>
            The color stops of this gradient.
            </summary>
            <remarks>
            If this property is set (does not equal null), then properties StartColor and EndColor are ignored.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Brushes.GradientBrush.StartWrapMode">
            <summary>
            How the gradient behaves before the start point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Brushes.GradientBrush.EndWrapMode">
            <summary>
            How the gradient behaves after the end point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Brushes.GradientBrush.Transform">
            <summary>
            Add an additional transformation to this gradient brush.
            </summary>
            <remarks>
            Default = null, meaning the identity matrix.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Brushes.GradientBrush.Clone">
            <summary>
            Clones a Brush.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Brushes.RadialGradientBrush">
            <summary>
            A brush that paints a gradient fill that changes from one color to another between an inner and an outer circle.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Brushes.RadialGradientBrush.#ctor">
            <summary>
            Create a new RadialGradientBrush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Brushes.RadialGradientBrush.#ctor(TallComponents.PDF.Colors.Color,TallComponents.PDF.Colors.Color,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new RadialGradientBrush with given centerpoint and radius of both circles.
            </summary>
            <param name="startColor">The start color of the gradient fill.</param>
            <param name="endColor">The end color of the gradient fill.</param>
            <param name="x">The horizontal position of the center point of both circles.</param>
            <param name="y">The vertical position of the center point of both circles.</param>
            <param name="innerRadius">The radius of the inner circle.</param>
            <param name="outerRadius">The radius of the outer circle.</param>
        </member>
        <member name="P:TallComponents.PDF.Brushes.RadialGradientBrush.X">
            <summary>
            The horizontal position of the center point of both circles. 
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Brushes.RadialGradientBrush.Y">
            <summary>
            The vertical position of the center point of both circles.
            This position is relative to the origin of the shape to which the brush is applied.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Brushes.RadialGradientBrush.InnerRadius">
            <summary>
            The radius of the inner circle.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Brushes.RadialGradientBrush.OuterRadius">
            <summary>
            The radius of the outer circle.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Brushes.SolidBrush">
            <summary>
            Solid brush. Used to control how a path is filled.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Brushes.SolidBrush.#ctor">
            <summary>
            Create a solid black brush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Brushes.SolidBrush.#ctor(TallComponents.PDF.Colors.Color)">
            <summary>
            Create a solid brush with specified color.
            </summary>
            <param name="color">Color of this SolidBrush.</param>
        </member>
        <member name="P:TallComponents.PDF.Brushes.SolidBrush.Color">
            <summary>
            Color of this brush.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Brushes.SolidBrush.Clone">
            <summary>
            Clones a Brush.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Brushes.TilingBrush">
            <summary>
            A brush that paints a pattern cell that is repeated from right to left, from top to bottom.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Brushes.TilingBrush.#ctor">
            <summary>
            Creates a new TilingBrush with an empty pattern cell.
            </summary>
            <seealso cref="T:TallComponents.PDF.Brushes.AxialGradientBrush"/>
            <seealso cref="T:TallComponents.PDF.Brushes.RadialGradientBrush"/>
            <seealso cref="T:TallComponents.PDF.Brushes.SolidBrush"/>
            <seealso cref="N:TallComponents.PDF.Shapes"/>
        </member>
        <member name="P:TallComponents.PDF.Brushes.TilingBrush.Transform">
            <summary>
            Add an additional transformation to this tiling brush.
            </summary>
            <remarks>
            Default = null, meaning the identity matrix.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Brushes.TilingBrush.Clone">
            <summary>
            Clones a Brush.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Brushes.TilingBrush.Pattern">
            <summary>
            The shapes that are repeated from right to left, from top to bottom. 
            </summary>
            <remarks>
            The appearance of each cell in the pattern is determined by the shapes added to this property.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Rasterizer.Common.Caching.Cache`2">
            <summary>
            This class represents base cacher.
            </summary>
            <typeparam name="TCacheKey">The type of the cache key.</typeparam>
            <typeparam name="TCacheObject">The type of the cache object.</typeparam>
        </member>
        <member name="F:TallComponents.PDF.Rasterizer.Common.Caching.Cache`2.sync">
            <summary>
            Sync object.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Rasterizer.Common.Caching.Cache`2.cache">
            <summary>
            Cache dictionary.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Rasterizer.Common.Caching.Cache`2.Item(`0)">
            <summary>
            Gets or sets the object by the specified key.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Rasterizer.Common.Caching.Cache`2.Get(`0)">
            <summary>
            Gets the object.
            </summary>
            <param name="key">The key.</param>
            <returns>Cached object.</returns>
        </member>
        <member name="M:TallComponents.PDF.Rasterizer.Common.Caching.Cache`2.Add(`0,`1)">
            <summary>
            Puts the object.
            </summary>
            <param name="key">The key.</param>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:TallComponents.PDF.Rasterizer.Common.Caching.Cache`2.Remove(`0)">
            <summary>
            Removes the object.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="T:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer">
            <summary>
            This class represents global cache container.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer._sync">
            <summary>
            Sync object.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer._instance">
            <summary>
            Cache Container instance.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer.UndefinedCacheCode">
            <summary>
            Undefined cache code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer"/> class from being created.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Rasterizer.Common.Caching.CacheContainer.Get(System.Int32)">
            <summary>
            Gets the object.
            </summary>
            <param name="key">The key.</param>
            <returns>Document cache.</returns>
        </member>
        <member name="T:TallComponents.PDF.Rasterizer.Common.Caching.DocumentCache">
            <summary>
            This class represents a docment cache.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Rasterizer.Common.Caching.DocumentCache.IccProfileCache">
            <summary>
            Icc Profile cache.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Rasterizer.Common.Caching.DocumentCache.IccTransformCache">
            <summary>
            Icc Transform cache.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Rasterizer.Gdi.GdiPdfPath.HasArea">
            <summary>
            Bascically, we flag the path as having an area, as soon as it contains more than 1 straight
            line. So, HasArea may be true while the path has no area after all. If it is false, the path
            certainly has no area.
            </summary>
            <remarks>This is GDI specific.</remarks>
        </member>
        <member name="T:TallComponents.PDF.Colors.CieBasedColor">
            <summary>
            Base class for all derived cie-based color classes.
            </summary>
            <remarks>
            This class is to structurize the color classes only, and has no functionality.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Colors.CmykColor">
            <summary>
            CMYK color.
            </summary>
            <remarks>
            A color specified with 4 components: Cyan, Magenta, Yellow and Black.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Colors.CmykColor.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new CmykColor from it's components.
            </summary>
            <param name="c">Cyan component [0-255]</param>
            <param name="m">Magenta component [0-255]</param>
            <param name="y">Yellow component [0-255]</param>
            <param name="k">Black component [0-255]</param>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.C">
            <summary>
            The Cyan color component [0-255].
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.M">
            <summary>
            The Magenta color component [0-255].
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.Y">
            <summary>
            The Yellow color component [0-255].
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.K">
            <summary>
            The Black color component [0-255].
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.Name">
            <summary>
            The name of the CMYK color.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Colors.CmykColor.Convert">
            <summary>
            Convert this color to a System.Drawing.Color.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.White">
            <summary>
            White (all component 0%)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.Black">
            <summary>
            Process Black (100% black)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.Cyan">
            <summary>
            Process Cyan (100% Cyan)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.Magenta">
            <summary>
            Process Magenta (100% Magenta)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.Yellow">
            <summary>
            Process Yellow (100% Yellow)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.Red">
            <summary>
            CMYK Red
            </summary>
            <remarks>
            100% Magenta, 100% Yellow.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.Orange">
            <summary>
            CMYK Orange
            </summary>
            <remarks>
            50% Magenta, 100% Yellow.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.Green">
            <summary>
            CMYK Green
            </summary>
            <remarks>
            80% Cyan, 100% Yellow.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.Blue">
            <summary>
            CMYK Blue
            </summary>
            <remarks>
            100% Cyan, 10% Magenta, 10% Black.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.Purple">
            <summary>
            CMYK Purple
            </summary>
            <remarks>
            100% Cyan, 10% Magenta, 10% Black.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.Pink">
            <summary>
            CMYK Pink
            </summary>
            <remarks>
            25% Magenta
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.Gray">
            <summary>
            CMYK Gray
            </summary>
            <remarks>
            60% Black
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Colors.CmykColor.LightGray">
            <summary>
            CMYK Light Gray
            </summary>
            <remarks>
            30% Black
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Colors.Color">
            <summary>
            Base class for all derived color classes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Colors.Color.Convert">
            <summary>
            Convert this color to a GDI color.
            </summary>
            <returns>The converted color.</returns>
        </member>
        <member name="M:TallComponents.PDF.Colors.Color.op_Implicit(System.Drawing.Color)~TallComponents.PDF.Colors.Color">
            <summary>
            Provides implicit conversion from System.Drawing.Color.
            </summary>
            <param name="systemColor">The system color that will be implicitly casted.</param>
            <returns>A PDF.Colors.DeviceColor that has the same value as the System.Drawing.Color.</returns>
        </member>
        <member name="M:TallComponents.PDF.Colors.Color.Clone">
            <summary>
            Clones a Color.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Colors.Color.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Color
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.Color.Name">
            <summary>
            The name of the color. This can be a string describing the color
            or an actual name like Orange or Green.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.Color.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Colors.Color.Parse(System.String)">
            <summary>
            Parse a string to extract a color.
            </summary>
            <remarks>
            The string representation of a color can be on of the following:
            <list type="table">
              <listheader>
                 <term>Format</term>
                 <description>Description</description>
              </listheader>
              <item>
                 <term>#RRGGBB</term>
                 <description>
                    Web color. Each component is a 2-digit hexadecimal number (00 - FF).
                    For example: <c>#9963FA</c>
                 </description>
              </item>
              <item>
                 <term>gray</term>
                 <description>
                    Gray color. <c>gray</c> is a value in the range 0 - 255.
                    For example: <c>128</c>
                 </description>
              </item>
              <item>
                 <term>r,g,b</term>
                 <description>
                    RGB color. Each component is a value in the range 0 - 255.
                    For example: <c>128,5,233</c>
                 </description>
              </item>
              <item>
                 <term>c,m,y,k</term>
                 <description>
                    CMYK color. Each component is a value in the range 0 - 255.
                    For example: <c>12,255,6,128</c>
                 </description>
              </item>
               <item>
                 <term>ColorName</term>
                 <description>
                    A named color. Currently supported are all named colors available in
                    System.Drawing.Color.
                    For example: <c>SkyBlue</c>
                 </description>
              </item>
            </list>
            Instead of the fixed values (0-255) also a relative value (0%-100%) is allowed. This
            is converted to 0-255.
            </remarks>
            <param name="color">A string describing a color.</param>
            <returns>A Color.</returns>
        </member>
        <member name="M:TallComponents.PDF.Colors.Color.Equals(System.Object)">
            <summary>
            Compares two colors.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Colors.Color.GetHashCode">
            <summary>
            Provides a hashcode.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Colors.IccBasedColor">
            <summary>
            An icc-based color.
            </summary>
            <remarks>
            A color that is specified using corresponding icc profile on a page.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Colors.IccBasedColor.#ctor(TallComponents.PDF.Colors.IccColorSpace,System.Double[])">
            <summary>
            Create a new icc based color using specified colorspace and color components in range [0-255].
            </summary>
            <param name="colorSpace">The Icc color space of the color.</param>
            <param name="components">An array of component values. The length of the array should match the number of
            components of the color space.</param>
        </member>
        <member name="P:TallComponents.PDF.Colors.IccBasedColor.Name">
            <summary>
            The name of the color.
            </summary>
            <remarks>
            You need to specify the name in the constructor.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Colors.IccBasedColor.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
            <remarks>
            The ICC based color throws a NotSupportedException.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Colors.IccBasedColor.ConvertToRgbValues">
            <summary>
            Converts current color to sRGB.
            </summary>
            <returns>An array containing color components.</returns>
        </member>
        <member name="M:TallComponents.PDF.Colors.IccBasedColor.Convert">
            <summary>
            Convert this color to a System.Drawing.Color.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.Colors.IccBasedColor.IccColorSpace">
            <summary>
            Gets the icc color space  instance for this color.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Colors.DeviceColor">
            <summary>
            Base class for all derived device color classes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Colors.DeviceColor.Convert(System.Drawing.Color)">
            <summary>
            Convert a GDI color to a PDF device color.
            </summary>
            <param name="gdiColor"></param>
            <returns>
            A Color or <see langword="null"/> if the gdi color is Empty.
            </returns>
        </member>
        <member name="M:TallComponents.PDF.Colors.DeviceColor.op_Implicit(System.Drawing.Color)~TallComponents.PDF.Colors.DeviceColor">
            <summary>
            Provides implicit conversion from System.Drawing.Color.
            </summary>
            <param name="systemColor">The system color that will be implicitly casted.</param>
            <returns>A PDF.Colors.DeviceColor that has the same value as the System.Drawing.Color.</returns>
        </member>
        <member name="T:TallComponents.PDF.Colors.GrayColor">
            <summary>
            Gray color.
            </summary>
            <remarks>
            A color specified with only 1 component: The grayscale value.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Colors.GrayColor.#ctor(System.Double)">
            <summary>
            Create a new GrayColor from it's single color component.
            </summary>
            <param name="colorValue">Grayscale value [0-255].</param>
        </member>
        <member name="P:TallComponents.PDF.Colors.GrayColor.Value">
            <summary>
            The grayscale value [0-255].
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.GrayColor.Name">
            <summary>
            The name of the gray scale color.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.GrayColor.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.GrayColor.White">
            <summary>
            Grey white
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.GrayColor.Black">
            <summary>
            Grey Black
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Colors.GrayColor.Convert">
            <summary>
            Convert to a System.Drawing.Color.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Colors.IccColorSpace">
            <summary>
            Represents an ICC colorspace instance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Colors.IccColorSpace.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:TallComponents.PDF.Colors.IccColorSpace"/> class.
            </summary>
            <param name="profileData">The profile data.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="profileData"/> is null.</exception>
        </member>
        <member name="P:TallComponents.PDF.Colors.IccColorSpace.NumberOfComponents">
            <summary>
            Gets the number of color components this profile assumes.
            </summary>
            <value>
            The number of color components.
            </value>
        </member>
        <member name="P:TallComponents.PDF.Colors.IccColorSpace.IccProfile">
            <summary>
            Gets the icc profile associated with current instance.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.IccColorSpace.IccProfileObject">
            <summary>
            Gets the icc profile object, which represents the low-level PDF object.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Colors.IndexedColor">
            <summary>
            Indexed color.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Colors.IndexedColor.#ctor(System.Int32)">
            <summary>
            Create and IndexedColor.
            </summary>
            <param name="index">The 0-based index in the color table.</param>
        </member>
        <member name="P:TallComponents.PDF.Colors.IndexedColor.Index">
            <summary>
            The 0-based index in the color table.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.IndexedColor.Name">
            <summary>
            The name of this color.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.IndexedColor.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
            <remarks>
            The IndexColor thrown a NotSupportedException
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Colors.LinearCmykTintTransform">
            <summary>
            A Linear Cmyk Tint Transform.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Colors.LinearCmykTintTransform.#ctor">
            <summary>
            Create a new LinearCmykTintTransform with color Black.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Colors.LinearCmykTintTransform.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new Linear Cmyk Tint Transform  from it's components.
            </summary>
            <param name="c">Cyan component [0-255]</param>
            <param name="m">Magenta component [0-255]</param>
            <param name="y">Yellow component [0-255]</param>
            <param name="k">Black component [0-255]</param>
        </member>
        <member name="M:TallComponents.PDF.Colors.LinearCmykTintTransform.#ctor(TallComponents.PDF.Colors.CmykColor)">
            <summary>
            Create a new Linear Cmyk Tint Transform.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.LinearCmykTintTransform.Value">
            <summary>
            The Cmyk Color used in this tint transform.
            </summary>
            <remarks>
            You cannot set the value to null.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Colors.RgbaColor">
            <summary>
            Rgba color
            </summary>
            <remarks>
            The Alpha value is ignored in PDF drawing operations.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Colors.RgbaColor.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create an RgbaColor from it's color components.
            </summary>
            <param name="r">Red color component [0-255]</param>
            <param name="g">Green color component [0-255]</param>
            <param name="b">Blue color component [0-255]</param>
            <param name="a">Alpha color component [0-255]</param>
        </member>
        <member name="M:TallComponents.PDF.Colors.RgbaColor.#ctor(TallComponents.PDF.Colors.RgbaColor)">
            <summary>
            Create a new RGBAColor based on another one
            </summary>
            <param name="color">The original color to copy</param>
        </member>
        <member name="M:TallComponents.PDF.Colors.RgbaColor.#ctor(TallComponents.PDF.Colors.RgbColor)">
            <summary>
            Create a new RGBAColor based onan RGBColor
            </summary>
            <param name="color">The RGBColor instance to copy</param>
        </member>
        <member name="M:TallComponents.PDF.Colors.RgbaColor.#ctor(System.Drawing.Color)">
            <summary>
            Create an Rgba color from a System.Drawing.Color.
            </summary>
            <param name="color">A .NET system color.</param>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbaColor.R">
            <summary>
            Red color component [0-255]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbaColor.G">
            <summary>
            Green color component [0-255]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbaColor.B">
            <summary>
            Blue color component [0-255]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbaColor.A">
            <summary>
            Alpha color component [0-255]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbaColor.Name">
            <summary>
            The name of the color.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbaColor.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
            <remarks>
            The RgbaColor thrown a NotSupportedException.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Colors.RgbaColor.Convert">
            <summary>
            Convert this color to a System.Drawing.Color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Colors.RgbaColor.op_Implicit(System.Drawing.Color)~TallComponents.PDF.Colors.RgbaColor">
            <summary>
            Provides implicit conversion from System.Drawing.Color.
            </summary>
            <param name="systemColor">The system color that will be implicitly casted.</param>
            <returns>A PDF.Colors.RgbaColor that has the same value as the System.Drawing.Color.</returns>
        </member>
        <member name="M:TallComponents.PDF.Colors.RgbaColor.ToArgb">
            <summary>
            <para>Gets the 32-bit ARGB value of this color.</para>
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Colors.RgbaColor.ToRgbColor">
            <summary>
            Convert this RgbaColor to an RgbColor.
            </summary>
            <remarks>
            Effectively discards the Alpha component.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Colors.RgbaColor.ToGrayscaleColor">
            <summary>
            Convert this RGBAColor to a GrayscaleColor.
            </summary>
            <remarks>
            Calculates the average value of the RGB components. Alpha is ignored.
            </remarks>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbaColor.DarkGray">
            <summary>
            RGBA DarkGray
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbaColor.LightGray">
            <summary>
            RGBA LightGray
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbaColor.White">
            <summary>
            RGBA White
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbaColor.Black">
            <summary>
            RGBA Black
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbaColor.Red">
            <summary>
            RGBA Black
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbaColor.Transparent">
            <summary>
            Transparent color
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Colors.RgbColor">
            <summary>
            RGB color.
            </summary>
            <remarks>
            A color specified with 3 components: Red, Green and Blue.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Colors.RgbColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a new RgbColor from it's color components.
            </summary>
            <param name="r">Red color component [0-255]</param>
            <param name="g">Green color component [0-255]</param>
            <param name="b">Blue color component [0-255]</param>
        </member>
        <member name="M:TallComponents.PDF.Colors.RgbColor.#ctor(System.Drawing.Color)">
            <summary>
            Create a new RgbColor from a GDI+ color.
            </summary>
            <param name="color">GDI+ color</param>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbColor.R">
            <summary>
            Red color component [0-255]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbColor.G">
            <summary>
            Green color component [0-255]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbColor.B">
            <summary>
            Blue color component [0-255]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbColor.Name">
            <summary>
            The name of the RGB color.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbColor.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Colors.RgbColor.Convert">
            <summary>
            Comvert this color to a System.Drawing.Color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Colors.RgbColor.op_Implicit(System.Drawing.Color)~TallComponents.PDF.Colors.RgbColor">
            <summary>
            Provides implicit conversion from System.Drawing.Color.
            </summary>
            <param name="systemColor">The system color that will be implicitly casted.</param>
            <returns>A PDF.Colors.RgbColor that has the same value as the System.Drawing.Color.</returns>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbColor.White">
            <summary>
            RGB White
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbColor.Gray">
            <summary>
            RGB Gray
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbColor.Black">
            <summary>
            RGB Black
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbColor.Red">
            <summary>
            RGB Red
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbColor.Green">
            <summary>
            RGB Green
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbColor.Blue">
            <summary>
            RGB Blue
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbColor.Orange">
            <summary>
            RGB Orange
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbColor.Yellow">
            <summary>
            RGB Yellow
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbColor.Purple">
            <summary>
            RGB Purple
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Colors.RgbColor.Transparent">
            <summary>
            RGBA Transparent
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Colors.RgbColor.FromColorName(System.String)">
            <summary>
            Transforms color name into TallComponents.PDF.Colors.RgbColor
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Colors.SeperationColor">
            <summary>
            Seperation color (also known as spot color).
            </summary>
            <remarks>
            A color specifies a seperation name and an alternative color.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Colors.SeperationColor.#ctor(System.String)">
            <summary>
            Create a new separation color.
            </summary>
            <param name="name">The name from the separation color.</param>
        </member>
        <member name="M:TallComponents.PDF.Colors.SeperationColor.#ctor(System.String,TallComponents.PDF.Colors.TintTransform)">
            <summary>
            Create a new seperation color.
            </summary>
            <param name="name">The name from the seperation color.</param>
            <param name="tintTransform">The tint transformation; used if the output device doesn't support the seperation color name.</param>
        </member>
        <member name="M:TallComponents.PDF.Colors.SeperationColor.#ctor(System.String,TallComponents.PDF.Colors.TintTransform,System.Double)">
            <summary>
            Create a new seperation color.
            </summary>
            <param name="name">The name from the seperation color.</param>
            <param name="tintTransform">The tint transformation; used if the output device doesn't support the seperation color name.</param>
            <param name="tint">The tint component [0-1].</param>
        </member>
        <member name="P:TallComponents.PDF.Colors.SeperationColor.TintTransform">
            <summary>
            The tint transformation; used if the output device doesn't support the seperation color name.
            </summary>
            <remarks>
            Setting this property to a TintTransform instance is required.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Colors.SeperationColor.Tint">
            <summary>
            The Tint component [0-1].
            </summary>
            <remarks>
            Default = 1.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Colors.SeperationColor.Name">
            <summary>
            The name of the seperation color.
            </summary>
            <remarks>
            You need to specify the name in the constructor.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Colors.SeperationColor.ParsableName">
            <summary>
            Get the name of the color as it can be parsed again.
            </summary>
            <remarks>
            The SeperationColor thrown a NotSupportedException.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Colors.SeperationColor.Convert">
            <summary>
            Convert this color to a System.Drawing.Color.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Colors.SpecialColor">
            <summary>
            Base class for all derived special color classes.
            </summary>
            <remarks>
            This class is to structurize the color classes only, and has no functionality.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Colors.SeparationTintTransform">
            <summary>
            Base class for all derived tint transform classes.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Colors.TintTransform">
            <summary>
            Base class for all derived tint transform classes.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Configuration.ColorProfile">
            <summary>
            ICC Based color profile, used to describe the
            color profile of the output device during rasterization.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.ColorProfile.#ctor(System.IO.Stream)">
            <summary>
            ColorProfile constructor. Reads the ICC Based color profile from stream.
            The caller is responsible for closing the
            stream. The stream should be kept open during the lifetime of the returned ColorProfile instance.
            </summary>
            <param name="stream">The stream providing the ICC Based color profile.</param>
        </member>
        <member name="M:TallComponents.PDF.Configuration.ColorProfile.#ctor">
            <summary>
            Internal constructor. Sets the IccProfile to the default sRGB profile.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Configuration.FontStyleEmulation">
            <summary>
            Font style emulation settings. Works in combination with FontSubstitutionMap.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontStyleEmulation.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Create settings for the font style emulation.
            </summary>
            <param name="bold">Emulate the bold font style by drawing a
            line on the outlines of the characters.</param>
            <param name="italic">Emulate the italic font style by skewing the characters.</param>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontStyleEmulation.AsIFontStyleEmulation">
            <summary>
            Gets this object's implementation of <see cref="T:TallComponents.PDF.Base.Graphics.Fonts.IFontStyleEmulation"/>
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Configuration.FontSubstitutionMap">
            <summary>
            The FontSubstitutionMap lets you define which external fonts are used to render fonts that are not embedded.
            Be sure to call this with correct trust settings when running under IIS.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.FontSubstitutionMap.FontsFolder">
            <summary>
            The system folder where the fonts are stored.
            It is the Fonts folder under the system directory.
            This might return null, if called under IIS with incorrect trust.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.FontSubstitutionMap.Standard">
            <summary>
            A read-only map that contains the standard substitution map.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.#ctor">
            <summary>
            Creates a new substitution map.
            </summary>
            <remarks>This map does not contain the standard mapping.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.FontSubstitutionMap.SearchPath">
            <summary>
            A semi-colon separated list of folders to search for font files that are included in the substitution map.
            The folders are searched from left to right until the font file is found.
            </summary>
            <remarks>
            The default value is ".;%FONTDIR%". This means that by default font files will be searched 
            in the current folder first and then in the system font directory (typically c:\windows\fonts).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.FontSubstitutionMap.FontNames">
            <summary>
            All the font names included in this map.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.Add(System.String,System.String)">
            <summary>
            Add a new entry to the map. 
            </summary>
            <param name="fontName">The name of the font to map.</param>
            <param name="path">The path to the font file.</param>
            <remarks>
            The path should be aboslute or relative to one of the paths in the search 
            path as returned by SearchPath.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.Add(System.String)">
            <summary>
            Add a new entry to the map without specifying the font name. The name will be extracted
            from the font program.
            </summary>
            <param name="path">The path to the font file.</param>
            <remarks>
            The path should be aboslute or relative to one of the paths in the search 
            path as returned by SearchPath.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.Add(System.String,System.IO.Stream)">
            <summary>
            Add a new entry to the map. 
            </summary>
            <param name="fontName">The name of the font to map.</param>
            <param name="stream">The stream that holds the font program.</param>
            <remarks>
            The callee will cache the stream content so the stream does not have to be available after this call returns. 
            The caller is responsible for closing this stream after this call returns.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.Add(System.IO.Stream)">
            <summary>
            Add a new entry to the map without specifying the font name. The name will be extracted
            from the font program.
            </summary>
            <param name="stream">The stream that holds the font program.</param>
            <remarks>
            The callee will cache the stream content so the stream does not have to be available after this call returns. 
            The caller is responsible for closing this stream after this call returns.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.Add(System.String,System.String,TallComponents.PDF.Configuration.FontStyleEmulation)">
            <summary>
            Add a new entry to the map. 
            </summary>
            <param name="fontName">The name of the font to map.</param>
            <param name="path">The path to the font file.</param>
            <param name="style">The font style to emulate.</param>
            <remarks>
            The path should be aboslute or relative to one of the paths in the search 
            path as returned by SearchPath.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.Add(System.String,System.IO.Stream,TallComponents.PDF.Configuration.FontStyleEmulation)">
            <summary>
            Add a new entry to the map. 
            </summary>
            <param name="fontName">The name of the font to map.</param>
            <param name="stream">The stream that holds the font program.</param>
            <param name="style">The font style to emulate.</param>
            <remarks>
            The callee will cache the stream content so the stream does not have to be available after this call returns. 
            The caller is responsible for closing this stream after this call returns.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.Add(TallComponents.PDF.Configuration.FontSubstitutionMap)">
            <summary>
            Add all entries of the argument substition map.
            </summary>
            <param name="fontSubstitutionMap">The map of which al entries will be copied.</param>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.Add(TallComponents.PDF.Configuration.FontInfo)">
            <summary>
            Basic single-entry add operation.
            </summary>
            <param name="fontInfo"></param>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.Clear">
            <summary>
            Remove all entries.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.Find(System.String)">
            <summary>
            Returns the substituting font program. For internal use only.
            </summary>
            <param name="fontName"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.FindExplicitSubstitution(System.String)">
            <summary>
            Returns the substituting font program. For internal use only.
            </summary>
            <param name="fontName"></param>
            <returns></returns>
            <remarks>In contrast to Find, this method will only return substitutions that have
            been explicitly defined in the map. It will not return defaults, nor will it interpret the
            fontname as a filename.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.GetFontStyleEmulation(System.String)">
            <summary>
            Returns the font properties to emulation. For internal use only.
            </summary>
            <param name="fontName"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.Save(System.IO.Stream)">
            <summary>
            Save the font substitution map.
            </summary>
            <param name="stream">Save to this stream.</param>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.Load(System.IO.Stream)">
            <summary>
            Load font susbstitution map.
            </summary>
            <param name="stream">Load from this stream.</param>
        </member>
        <member name="P:TallComponents.PDF.Configuration.FontSubstitutionMap.DefaultSubstitutionFont">
            <summary>
            Default substitution for non-embedded fonts.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.FontSubstitutionMap.AsIFontSubstitutionMap">
            <summary>
            Gets this object's implementation of <see cref="T:TallComponents.PDF.Base.Graphics.Fonts.IFontSubstitutionMap"/>
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Configuration.ImageStripMode">
            <summary>
            Images that are composed of tiles of smaller images can cause interpolation artifacts.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Configuration.ImageStripMode.HighSpeed">
             <summary>
             Accept interpolation artifacts while drawing images that are composed of
            tiles of smaller images, decreasing the time needed to draw them.
             </summary>
        </member>
        <member name="F:TallComponents.PDF.Configuration.ImageStripMode.HighQuality">
            <summary>
            Avoid interpolation artifacts while drawing images that are composed of
            tiles of smaller images, increasing the time needed to draw them.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Configuration.ActionRenderSettings">
            <summary>
            Encapsulates all settings that control which actions are executed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.ActionRenderSettings.#ctor">
            <summary>
            Create a new ActionRenderSettings object with default values.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.ActionRenderSettings.ExecutePageOpenAction">
            <summary>
            Execute the Page Open action before rendering. Default is false.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Configuration.AnnotationRenderSettings">
            <summary>
            Encapsulates all settings that control how annotations are rendered.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.AnnotationRenderSettings.#ctor">
            <summary>
            Create a new AnnotationRenderSettings object with default values.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderNone">
            <summary>
            Set all RenderXxxAnnotation properties to false.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderAll">
            <summary>
            Set all RenderXxxAnnotation properties to true.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderTextAnnotation">
            <summary>
            Render Text annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderLinkAnnotation">
            <summary>
            Render Link annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderFreeTextAnnotation">
            <summary>
            Render FreeText annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderLineAnnotation">
            <summary>
            Render Line annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderSquareAnnotation">
            <summary>
            Render Square annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderCircleAnnotation">
            <summary>
            Render Circle annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderPolygonAnnotation">
            <summary>
            Render Polygon annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderPolylineAnnotation">
            <summary>
            Render Polyline annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderHighlightAnnotation">
            <summary>
            Render Highlight annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderUnderlineAnnotation">
            <summary>
            Render Underline annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderSquigglyUnderlineAnnotation">
            <summary>
            Render SquigglyUnderline annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderStrikeOutAnnotation">
            <summary>
            Render StrikeOut annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderRubberStampAnnotation">
            <summary>
            Render RubberStamp annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderCaretAnnotation">
            <summary>
            Render Caret annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderInkAnnotation">
            <summary>
            Render Ink annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderPopupAnnotation">
            <summary>
            Render Popup annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderFileAttachmentAnnotation">
            <summary>
            Render FileAttachments annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderSoundAnnotation">
            <summary>
            Render Sound annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderMovieAnnotation">
            <summary>
            Render Movie annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderWidgetAnnotation">
            <summary>
            Render Widget (form field) annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderScreenAnnotation">
            <summary>
            Render Screen annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderPrinterMarkAnnotation">
            <summary>
            Render PrinterMark annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderTrapNetAnnotation">
            <summary>
            Render TrapNet annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderWatermarkAnnotation">
            <summary>
            Render Watermark annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.Render3DAnnotation">
            <summary>
            Render 3D annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.RenderOverflowMarker">
            <summary>
            If true, an overflow marker will be rendered on the annotation in case
            the contents does not fit in the annotation rectangle.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.AnnotationRenderSettings.AsIAnnotationRenderSettings">
            <summary>
            Gets this object's implementation of <see cref="T:TallComponents.PDF.Base.Graphics.IAnnotationRenderSettings"/>
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderTextAnnotation">
            <summary>
            Render Text annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderLinkAnnotation">
            <summary>
            Render Link annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderFreeTextAnnotation">
            <summary>
            Render FreeText annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderLineAnnotation">
            <summary>
            Render Line annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderSquareAnnotation">
            <summary>
            Render Square annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderCircleAnnotation">
            <summary>
            Render Circle annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderPolygonAnnotation">
            <summary>
            Render Polygon annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderPolylineAnnotation">
            <summary>
            Render Polyline annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderHighlightAnnotation">
            <summary>
            Render Highlight annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderUnderlineAnnotation">
            <summary>
            Render Underline annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderSquigglyUnderlineAnnotation">
            <summary>
            Render SquigglyUnderline annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderStrikeOutAnnotation">
            <summary>
            Render StrikeOut annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderRubberStampAnnotation">
            <summary>
            Render RubberStamp annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderCaretAnnotation">
            <summary>
            Render Caret annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderInkAnnotation">
            <summary>
            Render Ink annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderPopupAnnotation">
            <summary>
            Render Popup annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderFileAttachmentAnnotation">
            <summary>
            Render FileAttachments annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderSoundAnnotation">
            <summary>
            Render Sound annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderMovieAnnotation">
            <summary>
            Render Movie annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderWidgetAnnotation">
            <summary>
            Render Widget (form field) annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderScreenAnnotation">
            <summary>
            Render Screen annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderPrinterMarkAnnotation">
            <summary>
            Render PrinterMark annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderTrapNetAnnotation">
            <summary>
            Render TrapNet annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#RenderWatermarkAnnotation">
            <summary>
            Render Watermark annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.AnnotationRenderSettings.BaseAnnotationRenderSettings.TallComponents#PDF#Base#Graphics#IAnnotationRenderSettings#Render3DAnnotation">
            <summary>
            Render 3D annotations.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Configuration.ColorRenderSettings">
            <summary>
            Encapsulates all settings that control how colorprofiles are processed and what background color is used for the document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.ColorRenderSettings.#ctor">
            <summary>
            Create a new ColorRenderSettings object with default values.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.ColorRenderSettings.BackColor">
            <summary>
            The back color (default is Color.White)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.ColorRenderSettings.ColorMatrix">
            <summary>
            Gets or sets the color matrix.
            ColorMatrix dimension is required to be 5*5.
            </summary>
            <remarks>This setting is currently ignored for WPF rendering.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.ColorRenderSettings.TransformationMode">
            <summary>
            The color transformation mode to use.
            This is a trade off between speed and quality.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.ColorRenderSettings.OutputColorProfile">
            <summary>
            The color profile of the output device.
            Default the profile is set to a sRGB color profile.
            </summary>
            <remarks>Color profiles will be ignored when the TransformationMode
            has been set to HighSpeed.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Configuration.ColorRenderSettings.AsIColorRenderSettings">
            <summary>
            Gets this object's implementation of <see cref="T:TallComponents.PDF.Base.Graphics.IColorRenderSettings"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Configuration.ColorRenderSettings.BaseColorRenderSettings.#ctor(TallComponents.PDF.Configuration.ColorRenderSettings)">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.ColorRenderSettings.BaseColorRenderSettings.ColorMatrix">
            <summary>
            Gets the color matrix.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Configuration.CurveRenderSettings">
            <summary>
            Encapsulates all settings that control how curves are rendered.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.CurveRenderSettings.#ctor">
            <summary>
            Create a new CurveRenderSettings object with default values.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.CurveRenderSettings.SmoothingMode">
            <summary>
            Specifies whether smoothing (antialiasing) is applied to lines and curves and the edges of filled areas. Default is AntiAlias.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.CurveRenderSettings.RenderCurves">
            <summary>
            Controls whether curves will be rendered. If set to false, no curves
            will be rendered. The default is true.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.CurveRenderSettings.AsICurveRenderSettings">
            <summary>
            Gets this object's implementation of <see cref="T:TallComponents.PDF.Base.Graphics.ICurveRenderSettings"/>
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.CurveRenderSettings.BaseCurveRenderSettings.TallComponents#PDF#Base#Graphics#ICurveRenderSettings#RenderCurves">
            <summary>
            Controls whether curves will be rendered. If set to false, no curves
            will be rendered. The default is true.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Configuration.GdiRenderSettings">
            <summary>
            Encapsulates all settings that control GDI rendering.
            </summary>
            <remarks>
            <para>GDI may behave differently on different systems, and for different printers. This
            class allows users to control GDI rendering in case they encounter difficulties on a
            particular system, or when rendering to a particular printer.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Configuration.GdiRenderSettings.#ctor">
            <summary>
            Create a new GdiRenderSettings object with default values.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.Synchronized">
            <summary>
            Setting Synchronized to true will use a global lock for all GDI calls that get
            invoked by Page.Draw.
            </summary>
            <remarks>
            <para>
            Graphics instances that are created for MetaFile "images" are not completely independent.
            Concurrent drawing to these instances may cause GDI exceptions.
            This GDI bug is most likely to occur with EmfType.EmfPlusDual, although we have had
            reports that other types have the same issue. If you have multiple threads that
            draw to MetaFile instances, Synchronized should be set to true, which serialize all
            GDI calls that are done through Page.Draw(). We have no indication that it is problematic
            to render to multiple bitmaps simultaneously.
            </para>
            <para>
            Setting this value will have no effect on DrawJob instances, as
            these do not appear to interfere with MetaFile jobs. So DrawJobs will
            still issue GDI+ calls concurrently if this propery has been set.
            </para>
            <para>
            By default, this value is false, because serializing all GDI+ calls may be suboptimal in
            multi-core system. Normally the GDI+ implementation will/should ensure that the
            necessary locks are applied when needed.
            </para>
            <para><b>Warning</b>: This setting should not be changed while any rendering
            is going on. This may cause unexpected behavior or exceptions.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.WorkAroundClosePathBug">
            <summary>
            If set, GDI (sub)paths will be closed by explicitly adding a line to the starting point of a
            (sub)path. If false, GDI subpaths will be closed via the GDI Path.CloseFigure() call.
            The default is false.
            </summary>
            <remarks>
            <para>By default, this settings is false, because drawing an explicit closing line in GDI results in
            a slightly worse connection with the start of the figure: the end of the line will not be smoothly
            "rounded" to match the start of the figure. So using Path.CloseFigure() is to be preferred in general.
            </para><para>
            Some printer drivers however (notably PCL drivers and the microsoft XPS Document Writer) have a
            bug in their CloseFigure implementation that will not only close the last subpath, but also some
            earlier subpaths that should actually remain open. This bug introduces extra lines for some
            documents.
            </para>
            <para>To our knowledge there are very little documents that are affected by this bug, but if it occurs
            setting this flag to true will avoid these extra lines, at the cost of a slightly worse connection
            between the closing line and the start of the figure. This is often only noticeable for drawings that
            use relatively thick lines, as then the "rounding" to the start of the figure is most apparent. This
            means that setting this flag will lead to little problems for most documents either.
            </para>
            <para>Please note that the XPS issues only apply when using Page.Draw() in combination with the
            Microsoft XPS Document Writer. They do not occur with pages that are converted via ConvertToWpf.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.WorkAroundImageTransparencyPrintSize">
            <summary>
            If set, avoids transparent pixels in images.
            </summary>
            <remarks>
            <para>Transparent pixels may lead to very large print jobs, in particular in Windows 7.
            Setting this value will make these pixels white. Please note that this may lead to incorrect output as the white pixels may
            obscure other graphics. By default this value is false.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.AvoidLargeTilingPatterns">
            <summary>
            Avoids the creation of large bitmaps that are used as tiling patterns.
            </summary>
            <remarks>See GDIShadingBrushFactory. Unfortunately the render settings are not
            yet available there, so this setting currently has no effect.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.UseImageStrips">
            <summary>
            Render large images as a number of strips to avoid GDI memory issues.
            </summary>
            <remarks>Has only effect for non-progressive rendering, as the render settings
            are not available for progressive rendering.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.TileFlipXYImages">
            <summary>
            Set the TileFlipXY flag on images. This appears to reduce/avoid interpolation
            artefacts between images and image strips.
            </summary>
            <remarks>Has only effect for non-progressive rendering, as the render settings
            are not available for progressive rendering.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.LowInterpolateDiagonalStrips">
            <summary>
            Sets interpolation to low for "diagonal" image strips. 
            </summary>
            <remarks>
            <para>
            This is done because TileFlipXY
            appears to have little effect for images that are not rotated with 90-degree multiples,
            Possibly because GDI just uses the image bounding boxes for tiling?
            </para>
            <para>
            Setting the interpolation to low appears to avoid white stripes between images in this
            case, alyhough it will also degrade image quality. Maybe we can influence tiling to
            obtain better results? No issue has been reported yet however w.r.t. this setting.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.UpsampleSmallImages">
            <summary>
            Upsample small images to avoid interpolation artefacts while printing (PageUnit is
            not Pixel or Display). If this is not done bar codes may come out fuzzy, effectively
            making them useless.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.CustomImageRendering1bpp">
            <summary>
            Use a custom rendering algorithm for large monochrome images.
            </summary>
            <remarks>
            <para>This setting has no effect yet, because this is only implemented for
            progressive rendering and the render settings are not yet available there.
            </para>
            <para>GDI is very slow when rendering large monochrome images. We implemented a
            custom renderer. This will only be invoked when a) the images are sufficienly big,
            b) there are rotated by a multiple of 90 degrees, and c) we have a bitmap that we
            can draw to instead of just a general Graphics instance.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.AvoidSmallRotations">
            <summary>
            Small rotations can make printing images to a PostScript printer unbearably slow. This
            setting will check the transformation matrix before printing an image, it will
            "round" transformations that are almost 90 degrees to a true 90-degree rotation. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.WorkAroundRotatedImagesBug">
            <summary>
            Increases the size of "vertical" (rotated) images.
            </summary>
            <remarks>
            <para>It appears that GDI renders vertical images too small. Or the pixels get aligned in some
            interesting way. It is not clear what GDI+ does wrong exactly. This is very
            noticeable when a number of strips are used to render a single image, as this
            leads to gaps between them.
            </para>
            <para>This _is_ a GDI issue, because this problem does not
            exist in "horizontal" images. Just rotating a page will show this. The only difference
            is the graphics transformation so it cannot be something that we do.
            </para>
            <para>Turning this flag on, will render vertical images slightly larger. As
            a mimum the size of the image will be increased by a single "source" pixel. Less
            will lead to stripes at high resolutions (printing). This is too little however at
            very small zoom factors (where source pixels become relatively small). In that
            case we will increase the size with a "destination" unit (a pixel on screen).
            </para>
            <para>This setting will not avoid banding entirely, but it it appears to
            avoid very noticeable white stripes, so it reduces this problem considerably.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.ReplaceRectsByLines">
            <summary>
            If true, we try to replace 'thin' rectangles by lines.
            </summary>
            <remarks>Rectangles with a relatively small width or height tend to get ignored by GDI+
            even for devices with a relatively high dpi, such as printers. This can be avoided
            by rendering them as lines.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.AntiAliasSmallMonochromeImages">
            <summary>
            If true, small monochrome images will be replaced by slightly larger anti-aliased ARGB images.
            </summary>
            <remarks>
            This is used in controls to improve screen appearance. GDI+ is not very good at rendering monochrome bitmaps
            nicely at low resolutions. One should be a bit careful with this as:
            - it will make images fuzzier which is not good for barcodes (when they are printed).
            - it decreases performance.
            We do not use this for rasterizer currently, as rasterizer allows users to create high-res bitmaps
            with high-quality interpolation modes, which also solves this issue.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.DownSampleLargeImages">
            <summary>
            If true, large images will be downsampled to match the output resolution.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.GdiRenderSettings.AsIGdiRenderSettings">
            <summary>
            Gets this object's implementation of <see cref="T:TallComponents.PDF.Base.Graphics.IGdiRenderSettings"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.BaseGdiRenderSettings.TallComponents#PDF#Base#Graphics#IGdiRenderSettings#UseImageStrips">
            <summary>
            Explicit implementation
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.BaseGdiRenderSettings.TallComponents#PDF#Base#Graphics#IGdiRenderSettings#TileFlipXYImages">
            <summary>
            Explicit implementation
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.BaseGdiRenderSettings.TallComponents#PDF#Base#Graphics#IGdiRenderSettings#LowInterpolateDiagonalStrips">
            <summary>
            Explicit implementation
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.BaseGdiRenderSettings.TallComponents#PDF#Base#Graphics#IGdiRenderSettings#WorkAroundClosePathBug">
            <summary>
            If set, GDI (sub)paths will be closed by explicitly adding a line to the starting point of a
            (sub)path. If false, GDI subpaths will be closed via the GDI Path.CloseFigure() call.
            The default is false.
            </summary>
            <remarks>
            <para>By default, this settings is false, because drawing an explicit closing line in GDI results in
            a slightly worse connection with the start of the figure: the end of the line will not be smoothly
            "rounded" to match the start of the figure. So using Path.CloseFigure() is to be preferred in general.
            </para><para>
            Some printer drivers however (notably PCL drivers and the microsoft XPS Document Writer) have a
            bug in their CloseFigure implementation that will not only close the last subpath, but also some
            earlier subpaths that should actually remain open. This bug introduces extra lines for some
            documents.
            </para>
            <para>To our knowledge there are very little documents that are affected by this bug, but if it occurs
            setting this flag to true will avoid these extra lines, at the cost of a slightly worse connection
            between the closing line and the start of the figure. This is often only noticeable for drawings that
            use relatively thick lines, as then the "rounding" to the start of the figure is most apparent. This
            means that setting this flag will lead to little problems for most documents either.
            </para>
            <para>Please note that the XPS issues only apply when using Page.Draw() in combination with the
            Microsoft XPS Document Writer. They do not occur with pages that are converted via ConvertToWpf.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.BaseGdiRenderSettings.TallComponents#PDF#Base#Graphics#IGdiRenderSettings#UpsampleSmallImages">
            <summary>
            Explicit implementation
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.BaseGdiRenderSettings.TallComponents#PDF#Base#Graphics#IGdiRenderSettings#AvoidSmallRotations">
            <summary>
            Explicit implementation
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.BaseGdiRenderSettings.TallComponents#PDF#Base#Graphics#IGdiRenderSettings#WorkAroundRotatedImagesBug">
            <summary>
            Explicit implementation
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.GdiRenderSettings.BaseGdiRenderSettings.TallComponents#PDF#Base#Graphics#IGdiRenderSettings#ReplaceRectsByLines">
            <summary>
            Explicit implementation
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Configuration.ImageRenderSettings">
            <summary>
            Encapsulates all settings that control how images are rendered.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.ImageRenderSettings.#ctor">
            <summary>
            Create a new ImageRenderSettings object with default values.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.ImageRenderSettings.ImageStripMode">
            <summary>
            Accept or avoid interpolation artifacts while drawing images that are 
            composed of tiles of smaller images.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.ImageRenderSettings.ApplyColorKeyMask">
            <summary>
            Apply the color key mask of an image if it contains one.
            </summary>
            <remarks>
            Color key masks are known to cause interpolation artefacts on atleast some printers. For e.g. barcode images this may be unwanted.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.ImageRenderSettings.RenderImages">
            <summary>
            Controls whether images are rendered. If set to false, no images
            will be rendered. The default is true.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.ImageRenderSettings.AvoidBinaryCheckerboardMasks">
            <summary>
            When set, we try to avoid binary "checker board" masks.
            </summary>
            <remarks>
            <para>
            Binary checker board masks are sometimes generated to simulate transparency. The effect
            of rendering a color through such a mask is a pattern of alternating transparent and colored
            pixels. These masks however can lead to very large (and slow) print jobs. An although rendering to a
            bitmap is fast enough, this still can lead to strange rendering effects due to GDI issues.
            </para>
            <para>
            If this property is set to true, we try to recognise these masks and replace them by
            transparent rectangles. This makes print jobs MUCH faster, especially for PCL jobs,
            (... strange: PS drivers used to be good... apparently no more). It is the difference
            between waiting minutes for a single page and and instantanous job (or 50 MB spool file
            versus 2.5 MB).
            </para>
            <para>
            BUT: although this results in fast print jobs, and good results on screen, and also when
            using the Adobe PDF printer, this does NOT always lead to nice graphics when printing to a real
            printer. Therefore this option is turned OFF for now. Such is the sorry state of
            transparency printing currently. The code is still present, because A) simple transparency
            looks allright, so for this it may still be a solution, possible as an option and B)
            there may be ways to improve this further.
            </para>
            <para>
            Another road that we may want to investigate is automatically sending bitmaps to the
            printer when we encounter transparent stuff. If possible just for the parts of the page
            that actually contain transparency. Note that clients can also send bitmaps to a printer
            as a workaround, but they have no way to detect in advance whether they should, which makes
            the workaround problematic.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Configuration.ImageRenderSettings.AsIImageRenderSettings">
            <summary>
            Gets this object's implementation of <see cref="T:TallComponents.PDF.Base.Graphics.IImageRenderSettings"/>
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.ImageRenderSettings.BaseImageRenderSettings.TallComponents#PDF#Base#Graphics#IImageRenderSettings#RenderImages">
            <summary>
            Explicit implementation
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.ImageRenderSettings.BaseImageRenderSettings.TallComponents#PDF#Base#Graphics#IImageRenderSettings#AvoidBinaryCheckerboardMasks">
            <summary>
            Explicit implementation
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Configuration.LayerRenderSettings">
            <summary>
            Encapsulates all settings that control which layers are rendered.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.LayerRenderSettings.#ctor">
            <summary>
            Create a new LayerRenderSettings object with default values.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.LayerRenderSettings.Layers">
            <summary>
            Specify which layers should be visible during rendering. Default is null.
            </summary>
            <remarks>
            If null is provided, the layers are rendered as specified in document.Layers.
            <para>
            If you want to render all layers, iterate over the items in the document.Layers collection and set all Visible properties to true.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Configuration.RenderPurpose">
            <summary>
            Specifies in what way the rendering result will be used. This values determines which
            annotations will be rendered.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Configuration.RenderPurpose.View">
            <summary>
            The render result will be used for on-screen viewing. This means that the Annotation.Invisible
            property determines whether an annotation will be rendered.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Configuration.RenderPurpose.Print">
            <summary>
            The render result will be used for printing. This means that the Annotation.Print property
            determines whether an annotation will be rendered.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Configuration.RenderSettings">
            <summary>
            Encapsulates all settings that control the render process.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.RenderSettings.#ctor">
            <summary>
            Create a new RenderSettings object with default values.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.ActionSettings">
            <summary>
            Readercontrols PRO will always execute the open actions.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.ImageSettings">
            <summary>
            All settings related to image rendering.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.AnnotationSettings">
            <summary>
            All settings related to annotation rendering.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.TextSettings">
            <summary>
            All settings related to text rendering.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.ColorSettings">
            <summary>
            All settings related to color rendering.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.LayerSettings">
            <summary>
            All settings related to layer rendering.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.RenderPageGraphics">
            <summary>
            Controls whether the page graphics will be rendered. If set to false, no page graphics will
            be rendered. The default is true. This flag does not influence the rendering of
            annotations, so it can be used to render annotations only.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.RenderPurpose">
            <summary>
            Specifies in what way the rendering result will be used. The default is "View".
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.CurveSettings">
            <summary>
            All settings related to curve rendering.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.GdiSettings">
            <summary>
            Used for Gdi workarounds.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.CMapFolder">
            <summary>
            This string points to the path where the CMaps can be found.
            CMaps are used when displaying some fonts, mostly Chinese, Japanese or Korean
            (also known as CJK fonts). The CMaps are part of the zip file you have downloaded
            from <see href="http://www.tallcomponents.com">our website</see>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.RenderSettings.renderAnnotation(TallComponents.PDF.Base.Annotations.Annotation)">
            <summary>
            Returns true if the given annotation must be rendered.
            </summary>
            <param name="annotation"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Configuration.RenderSettings.renderAnnotation(TallComponents.PDF.Annotations.Annotation)">
            <summary>
            Returns true if the given annotation must be rendered.
            </summary>
            <param name="annotation"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Configuration.RenderSettings.AsIRenderSettings">
            <summary>
            Take this settings as <see cref="T:TallComponents.PDF.Base.Graphics.IRenderSettings"/>
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.BaseRenderSettings.TallComponents#PDF#Base#Graphics#IRenderSettings#GdiSettings">
            <summary>
            Gets GDI specific settings
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.BaseRenderSettings.TallComponents#PDF#Base#Graphics#IRenderSettings#ImageSettings">
            <summary>
            Gets image specific settings
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.BaseRenderSettings.TallComponents#PDF#Base#Graphics#IRenderSettings#CurveSettings">
            <summary>
            Gets the settings how to render curves.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.BaseRenderSettings.TallComponents#PDF#Base#Graphics#IRenderSettings#TextSettings">
            <summary>
            Gets text specific settings
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.BaseRenderSettings.TallComponents#PDF#Base#Graphics#IRenderSettings#ColorSettings">
            <summary>
            Gets the color specific settings.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.RenderSettings.BaseRenderSettings.TallComponents#PDF#Base#Graphics#IRenderSettings#AnnotationSettings">
            <summary>
            Explicit implementation
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.RenderSettings.BaseRenderSettings.TallComponents#PDF#Base#Graphics#IRenderSettings#renderAnnotation(System.Object)">
            <summary>
            Explicit implementation
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.RenderSettings.BaseRenderSettings.TallComponents#PDF#Base#Graphics#IRenderSettings#CreateFontStyleEmulation(System.Boolean,System.Boolean)">
            <summary>
            Create a FontStyleEmulation instance.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Configuration.TextRenderSettings">
            <summary>
            Encapsulates all settings that control how text is rendered and fonts are substituted.
            </summary>
            
        </member>
        <member name="E:TallComponents.PDF.Configuration.TextRenderSettings.ResolveFont">
            <summary>
            This event is raised whenever a PDF font needs to be resolved to a
            device font.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.TextRenderSettings.#ctor">
            <summary>
            Create a new TextRenderSettings object with default values.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.TextRenderSettings.FontSearchPath">
            <summary>
            A semi-colon separated list of folders to search for font files that are included in the substitution map.
            or referenced in the ResolveFont event.
            The folders are searched from left to right until the font file is found.
            </summary>
            <remarks>
            The default value is ".;%FONTDIR%". This means that by default font files will be searched 
            in the current folder first and then in the system font directory (typically c:\windows\fonts).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Configuration.TextRenderSettings.FontSubstitutionMap">
            <summary>
            This map lets you define which external fonts are used to render fonts that are not embedded.
            </summary>
            <remarks>By default this map contains the standard mapping.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Configuration.TextRenderSettings.SetFontSubstitutionMap(TallComponents.PDF.Configuration.FontSubstitutionMap)">
            <summary>
            Present, because VS does not allow explicitly internal setters on internal properties (stupid rule). 
            </summary>
            <param name="map"></param>
        </member>
        <member name="P:TallComponents.PDF.Configuration.TextRenderSettings.RenderText">
            <summary>
            Controls whether text will be rendered. If set to false, no text
            will be rendered. The default is true.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Configuration.TextRenderSettings.AsITextRenderSettings">
            <summary>
            Gets this object's implementation of <see cref="T:TallComponents.PDF.Base.Graphics.ITextRenderSettings"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Configuration.TextRenderSettings.BaseTextRenderSettings.#ctor(TallComponents.PDF.Configuration.TextRenderSettings)">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Configuration.TextRenderSettings.BaseTextRenderSettings.TallComponents#PDF#Base#Graphics#ITextRenderSettings#RenderText">
            <summary>
            Explicit implementation
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Diagnostics.Message">
            <summary>
            Message.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Diagnostics.Message.Text">
            <summary>
            The message text.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Diagnostics.Message.Exception">
            <summary>
            The exception that caused this error message.
            </summary>
            <remarks>This property will only contain a valid value for messages that
            have severity "Error". In other cases, it will be null.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Diagnostics.Message.Severity">
            <summary>
            The severity of the message.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Diagnostics.MessageCollection">
            <summary>
            A message collection.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Diagnostics.MessageCollection.Added">
            <summary>
            Raised when a new message is added.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.MessageCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.MessageCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.Diagnostics.MessageCollection.Item(System.Int32)">
            <summary>
            Retrieve a message by 0-based index. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Diagnostics.MessageCollection.Count">
            <summary>
            The number of messages.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.MessageCollection.Contains(TallComponents.PDF.Diagnostics.Message)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Diagnostics.Message">Message</see> is in the <see cref="T:TallComponents.PDF.Diagnostics.MessageCollection">MessageCollection</see>.
            </summary>
            <param name="message">The <see cref="T:TallComponents.PDF.Diagnostics.Message"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Diagnostics.Message"/> is found in this <see cref="T:TallComponents.PDF.Diagnostics.MessageCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="message"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="message"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.MessageCollection.IndexOf(TallComponents.PDF.Diagnostics.Message)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Diagnostics.Message">Message</see> in the <see cref="T:TallComponents.PDF.Diagnostics.MessageCollection">MessageCollection</see>.
            </summary>
            <param name="message">The <see cref="T:TallComponents.PDF.Diagnostics.Message"/> to locate in the <see cref="T:TallComponents.PDF.Diagnostics.MessageCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Diagnostics.Message"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.MessageCollection.Add(TallComponents.PDF.Diagnostics.Message)">
            <summary>
            Adds a new message. Virtual so that additional actions can be executed on
            adding a message.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="T:TallComponents.PDF.Diagnostics.MessageEventArgs">
            <summary>
            The Message event data.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Diagnostics.MessageEventArgs.Message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Diagnostics.MessageEventHandler">
            <summary>
            Represents the method that handles the Message event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The Message event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Diagnostics.MessageSeverity">
            <summary>
            Severity of a message
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Diagnostics.MessageSeverity.Information">
            <summary>
            An informational message.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Diagnostics.MessageSeverity.Warning">
            <summary>
            A warning.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Diagnostics.MessageSeverity.Error">
            <summary>
            An error.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Diagnostics.Summary">
            <summary>
            Provides a summary of a process.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.#ctor">
            <summary>
            Create a new summary instance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.#ctor(TallComponents.PDF.Diagnostics.MessageCollection)">
            <summary>
            Create a new summary instance with a particular message collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.AsIReporting">
            <summary>
            Take this settings as <see cref="T:TallComponents.PDF.Base.Graphics.IReporting"/>
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Diagnostics.Summary.Messages">
            <summary>
            A list of messages, in the order that they were generated.
            </summary>
            <remarks>
            <para>Messages may inlude "plain" informational messages, but also errors and
            warnings.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.SummaryReporting.#ctor(TallComponents.PDF.Diagnostics.Summary)">
            <summary>
            Create a new summary instance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.SummaryReporting.TallComponents#PDF#Base#Graphics#IReporting#Exception(System.Exception)">
            <summary>
            Record the given error.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.SummaryReporting.TallComponents#PDF#Base#Graphics#IReporting#Message(System.String)">
            <summary>
            Record the given info message.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.SummaryReporting.TallComponents#PDF#Base#Graphics#IReporting#Error(System.String)">
            <summary>
            Record the given error message.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.SummaryReporting.TallComponents#PDF#Base#Graphics#IReporting#Warning(System.String)">
            <summary>
            Record the given warning.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.Summary.Close">
            <summary>
            Used internally to cleanup IDisposable messages.
            </summary>
            <remarks>If needed publicly we should implement IDisposable.</remarks>
        </member>
        <member name="T:TallComponents.PDF.Diagnostics.MetaMessageCollection">
            <summary>
            A message collection that inserts messages to the metacontent stream.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Diagnostics.MetaMessageCollection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.CertificateStoreSignatureHandler.Certificates">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.CertificateStoreSignatureHandler.DistinguishedName">
            <summary>
            The Distinguished Name (DN) of the person or authority signing the document.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.DigitalSignatures.ISignatureHandlerFactory">
            <summary>
            Implementations of ISignatureHandlerFactory create a signature handler. You should implement this
            interface if you want to verify a PDF document that has a custom signature.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.ISignatureHandlerFactory.Create(System.String,System.Int32,System.String)">
            <summary>
            This function returns a SignatureHandler which can validate a signature with given attributes.
            </summary>
            <param name="filter">The filter.</param>
            <param name="revision">The revision.</param>
            <param name="subFilter">The sub filter.</param>
        </member>
        <member name="T:TallComponents.PDF.DigitalSignatures.Pkcs12Store">
            <summary>
            A Pkcs #12 key store.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs12Store.#ctor(System.IO.Stream,System.String)">
            <summary>
            Create a new Pkcs #12 key store from a stream.
            </summary>
            <remarks>
            The <paramref name="stream"/>
            It is the responsibility of the client to close the stream. The stream must be kept open during the lifetime of the
            Pkcs12Store instance.
            </remarks>
            <param name="stream">A stream containing a Pkcs #12 key store.</param>
            <param name="password">The password required to open the store.</param>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs12Store.#ctor(System.Security.Cryptography.X509Certificates.X509Chain)">
            <summary>
            Create a Pkcs12Store from a chain 
            </summary>
            <remarks>
            Available as of .NET 2.0.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs12Store.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a Pkcs12Store from a Certificate.
            </summary>
            <remarks>
            A complete chain must be buildable from the given certificate.
            The used RevocationMode will be X509RevocationMode.Offline, if you want an other
            revocation mode, please use the X509Chain overload.
            <para>Available as of .NET 2.0.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs12Store.Names">
            <summary>
            The names of all certificates in the store that can be used for signing.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs12Store.GetKey(System.String)">
            <summary>
            Get the key associated with the specified name.
            </summary>
            <param name="name">The name of the key.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs12Store.GetCertificate(System.String)">
            <summary>
            Get the certificate associated with the name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs12Store.GetCertificateChain(System.String)">
            <summary>
            Get the certificate chain that is associated with the name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs12Store.buildPkcs12Store(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String)">
            <summary>
            Build a PKCS12 keystore from the given certificate list.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler">
            <summary>
            Pkcs #1 signature handler.
            </summary>
            <remarks>
            Pkcs #1 signatures are used with self-signed certificates.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.#ctor">
            <summary>
            Create a new Pkcs #1 signature handler.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store)">
            <summary>
            Create a new Pkcs1SignatureHandler and use the first key from the store to sign.
            </summary>
            <param name="keyStore">A key store.</param>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store,System.String)">
            <summary>
            Create a new Pkcs1SignatureHandler and use the given key from the store to sign.
            </summary>
            <param name="keyStore">A key store.</param>
            <param name="name">Name of the key to use for signing.</param>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Chain)">
            <summary>
            Create a new Pkcs1SignatureHandler and use the given chain to sign.
            </summary>
            <param name="chain">The chain containing the private key.</param>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a new Pkcs1SignatureHandler and use the given certificate to sign.
            </summary>
            <param name="certificate">The certificate containing the private key.</param>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.Revision">
            <summary>
            Revision number of the SignatureHandler.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.MaxDigestLength">
            <summary>
            The maximum length of the digest.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.UsePropBuild">
            <summary>
            You can specify if you want to use the PropertyBuild structure or not. (default true)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.Certificates">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs1SignatureHandler.Verify(System.Byte[],System.Byte[],System.Byte[][])">
            <summary>
            Verifies the signature. 
            Do not call this method directly.
            </summary>
            <param name="bytesToVerify">For internal use only.</param>
            <param name="digest">For internal use only.</param>
            <param name="certificates">For internal use only.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="T:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler">
            <summary>
            Pkcs7Detached signature handler.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.#ctor">
            <summary>
            Create a new Pkcs7DetachedSignatureHandler.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store)">
            <summary>
            Create a new Pkcs7DetachedSignatureHandler to sign a signature using the first key in the store.
            </summary>
            <param name="keyStore">A key store.</param>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store,System.String)">
            <summary>
            Create a new Pkcs7DetachedSignatureHandler to sign a signature using the specified key in the store.
            </summary>
            <param name="keyStore">A key store.</param>
            <param name="name">Name of the key to use for signing.</param>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Chain)">
            <summary>
            Create a new Pkcs7DetachedSignatureHandler and use the given chain to sign.
            </summary>
            <param name="chain">The chain containing the private key.</param>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a new Pkcs7DetachedSignatureHandler and use the given certificate to sign.
            </summary>
            <param name="certificate">The certificate containing the private key.</param>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.Revision">
            <summary>
            Revision number of the SignatureHandler.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.UsePropBuild">
            <summary>
            You can specify if you want to use the PropertyBuild structure or not. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.MaxDigestLength">
            <summary>
            The maximum length of the digest.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7DetachedSignatureHandler.Verify(System.Byte[],System.Byte[],System.Byte[][])">
            <summary>
            Verifies the signature. 
            Do not call this method directly.
            </summary>
            <param name="bytesToVerify">For internal use only.</param>
            <param name="digest">For internal use only.</param>
            <param name="certificates">For internal use only.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="T:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler">
            <summary>
            Pkcs#7 Sha1 signature handler.
            </summary>
            <remarks>
            This is the most common signature on Microsoft Windows systems.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler.#ctor">
            <summary>
            Create a new SignatureHandler using PKCS#7 SHA1 encoding.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store)">
            <summary>
            Create a new Pkcs7Sha1SignatureHandler and use the first key from the store to sign.
            </summary>
            <param name="keyStore">A key store.</param>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store,System.String)">
            <summary>
            Create a new Pkcs7Sha1SignatureHandler and use the given key from the store to sign.
            </summary>
            <param name="keyStore">A key store.</param>
            <param name="name">Name of the key to use for signing.</param>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Chain)">
            <summary>
            Create a new Pkcs7Sha1SignatureHandler and use the given chain to sign.
            </summary>
            <param name="chain">The chain containing the private key.</param>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a new Pkcs7Sha1SignatureHandler and use the given certificate to sign.
            </summary>
            <param name="certificate">The certificate containing the private key.</param>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler.MaxDigestLength">
            <summary>
            The maximum length of the digest.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler.Revision">
            <summary>
            Revision number of the SignatureHandler.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.Pkcs7Sha1SignatureHandler.Verify(System.Byte[],System.Byte[],System.Byte[][])">
            <summary>
            Verifies the signature. 
            Do not call this method directly.
            </summary>
            <param name="bytesToVerify">For internal use only.</param>
            <param name="digest">For internal use only.</param>
            <param name="certificates">For internal use only.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="T:TallComponents.PDF.DigitalSignatures.SignatureHandler">
            <summary>
            Abstract base class of all signature handlers.
            </summary>
            <remarks>
            You should override this class when implementing a custom signature handler.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.Filter">
            <summary>
            The name of this signarure handler.
            </summary>
            <example>
            Adobe.PPKLite, Entrust.PPKEF, CICI.SignIt and VeriSign.PPKVS
            </example>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.Revision">
            <summary>
            The version of this signature handler.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.SubFilter">
            <summary>
            The name that identifies the encoding of the signature value and key information.
            </summary>
            <example>
            adbe.x509.rsa_sha1, adbe.pkcs7.detached and adbe.pkcs7.sha1
            </example>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.Name">
            <summary>
            The name of the person or authority signing the document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.DistinguishedName">
            <summary>
            The Distinguished Name (DN) of the person or authority signing the document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.Certificates">
            <summary>
            An array of strings representing the X.509 certicicate chain used for signing 
            and validating signatures that use public-key cryptology.
            </summary>
            <remarks>
            Only required when SubFilter is adbe.x509.rsa_sha1
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.SignDate">
            <summary>
            The date and time of signing.
            </summary>
            <remarks>
            Should only be used when the date and time of signing is not available in the signature.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.MaxDigestLength">
            <summary>
            The maximum length in bytes of the digest as returned by the Sign function (default 300).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.UsePropBuild">
            <summary>
            You can specify if you want to use the PropertyBuild structure or not. (default false)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.CanSign">
            <summary>
            Returns true if and only if this signature handler can be used to sign a document.
            </summary>
            <remarks>
            If this property returns true, the Sign() method should have an implementation.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.SignatureHandler.Sign(System.Byte[])">
            <summary>
            Signs the given bytes and returns the digest.
            </summary>
            <param name="bytesToSign">The bytes to sign.</param>
            <returns>The digist for the bytesToSign.</returns>
            <remarks>
            This function may return false, if not implemented.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandler.CanVerify">
            <summary>
            Returns if this signature handler can be used to verify a document.
            </summary>
            <remarks>
            If true is returned the Verify() function should have an implementation.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.SignatureHandler.Verify(System.Byte[],System.Byte[],System.Byte[][])">
            <summary>
            This function verifies the given bytes.
            </summary>
            <param name="bytesToVerify">The bytes to verify.</param>
            <param name="digest">The digest calculated by the Sign function.</param>
            <param name="certificates">The certificate info if not present in the digest (can be <see langword="null"/>).</param>
            <returns>True if the bytesToVerify are correct, otherwise false.</returns>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandlerProxy.Filter">
            <summary>
            The name for this signarure handler
            </summary>
            <example>
            Adobe.PPKLite, Entrust.PPKEF, CICI.SignIt and VeriSign.PPKVS
            </example>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandlerProxy.Revision">
            <summary>
            The version of the signature handler
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandlerProxy.SubFilter">
            <summary>
            The name that describes the encoding of the signature value and key information.
            </summary>
            <example>
            adbe.x509.rsa_sha1, adbe.pkcs7.detached and adbe.pkcs7.sha1
            </example>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandlerProxy.Name">
            <summary>
            The name of the person or authority signing the document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandlerProxy.DistinguishedName">
            <summary>
            The Distinguished name (DN) of the person or authority signing the document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandlerProxy.Certificates">
            <summary>
            An array of strings representing the X.509 certicicate chain used for signing 
            and validating signatures that use public-key cryptology.
            </summary>
            <remarks>
            Only required when SubFilter is adbe.x509.rsa_sha1
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandlerProxy.SignDate">
            <summary>
            The time of signing.
            </summary>
            <remarks>
            This property should be used only when the time of signing is not available in the signature.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandlerProxy.MaxDigestLength">
            <summary>
            This property specifies the maximum number of bytes that the digist returned by the Sign function can be. (default 200).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandlerProxy.UsePropBuild">
            <summary>
            You can specify if you want to use the PropertyBuild structure or not. (default true)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandlerProxy.CanSign">
            <summary>
            Returns if this signature handler can be used to sign a document.
            </summary>
            <remarks>
            If true is returned the Sign() function should have an implementation.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.SignatureHandlerProxy.Sign(System.Byte[])">
            <summary>
            This function signs the given bytes and returns the digest.
            </summary>
            <param name="bytesToSign">The bytes to sign.</param>
            <returns>The digist for the bytesToSign.</returns>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.SignatureHandlerProxy.CanVerify">
            <summary>
            Returns if this signature handler can be used to verify a document.
            </summary>
            <remarks>
            If true is returned the Verify() function should have an implementation.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.SignatureHandlerProxy.Verify(System.Byte[],System.Byte[],System.Byte[][])">
            <summary>
            This function verifies the given bytes.
            </summary>
            <param name="bytesToVerify">The bytes to verify.</param>
            <param name="digest">The digest calculated by the Sign function.</param>
            <param name="certificates">The certificate info if not present in the digest (can be <see langword="null"/>).</param>
            <returns>True if the bytesToVerify are correct, otherwise false.</returns>
        </member>
        <member name="T:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler">
            <summary>
            The base class of all standard signature handlers. 
            </summary>
            <remarks>
            Do not override this class directly in your code.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.hashAlgorithm">
            The hash algorith, for example "SHA1"
        </member>
        <member name="F:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.pkcs">
            The class instance that calculates the PKCS#1 and PKCS#7
        </member>
        <member name="F:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.filter">
            The subject name in the signing certificate (the element "CN")
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.#ctor(System.String,System.String)">
            <summary>
            Create a signature handler with the specified filter and subfilter.
            </summary>
            <param name="filter"></param>
            <param name="subFilter"></param>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.Create(System.Security.Cryptography.X509Certificates.X509Chain)">
            <summary>
            Create a new StandardSignatureHandler best suited for a signing certificate.
            </summary>
            <param name="chain">The chain containing the private key.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.Create(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a new StandardSignatureHandler best suited for a signing certificate.
            </summary>
            <param name="certificate">The certificate containing the private key.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.Create(TallComponents.PDF.DigitalSignatures.Pkcs12Store)">
            <summary>
            Create a new StandardSignatureHandler best suited for a signing certificate.
            </summary>
            <param name="keyStore">The key store containing the private key.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.Create(TallComponents.PDF.DigitalSignatures.Pkcs12Store,System.String)">
            <summary>
            Create a new StandardSignatureHandler best suited for a signing certificate.
            </summary>
            <remarks>
            This method creates a signature handler best suited for signing based on the signing certificate's properties.
            <para>Note that a complete chain of certificates up to the root CA certificate or a self signed certificate is required within the key store.</para>
            </remarks>
            <param name="keyStore">The key store containing the private key.</param>
            <param name="name">The name that is associated with the private key in the store.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.SetSignInfo(TallComponents.PDF.DigitalSignatures.Pkcs12Store,System.String)">
            <summary>
            Setup the signature with the information needed to sign.
            </summary>
            <param name="keyStore">The key store containing the private key.</param>
            <param name="name">The name that is associated with the private key in the store.</param>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.Name">
            <summary>
            The subject name in the signing certificate (the element "CN")
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.Signer">
            <summary>
            The class instance that does the actual signing.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.Filter">
            <summary>
            The filter parameter used in the PDF document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.SubFilter">
            <summary>
            The subfilter parameter used in the PDF document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.Sign(System.Byte[])">
            <summary>
            Signs the given bytes and returns the digest.
            </summary>
            <param name="bytesToSign">Sign these bytes</param>
            <returns>The calculated signature</returns>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.SignDate">
            <summary>
            The date and time of signing.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.CanSign">
            <summary>
            Always true.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.CanVerify">
            <summary>
            Always true.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.StandardSignatureHandler.DistinguishedName">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.DigitalSignatures.StandardSignatureHandlerFactory">
            <summary>
            The signature handler factory for all standard signature handlers.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandlerFactory.#ctor">
            <summary>
            Create a new StandardSignatureHandlerFactory to validate.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.StandardSignatureHandlerFactory.Create(System.String,System.Int32,System.String)">
            <summary>
            Create a handler for the type of signature as specified by filter, revision and subfilter.
            </summary>
            <param name="filter">The filter.</param>
            <param name="revision">The revision.</param>
            <param name="subFilter">The sub filter.</param>
        </member>
        <member name="T:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler">
            <summary>
            VeriSign signature. Requires the VeriSign plugin for Acrobat.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler.#ctor">
            <summary>
            Create a new VeriSignSignatureHandler.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store)">
            <summary>
            Create a new VeriSignSignatureHandler to sign using the first key in the store.
            </summary>
            <param name="keyStore">A key store.</param>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler.#ctor(TallComponents.PDF.DigitalSignatures.Pkcs12Store,System.String)">
            <summary>
            Create a new VeriSignSignatureHandler to sign using the specified key in the store.
            </summary>
            <param name="keyStore">A key store.</param>
            <param name="name">Name of the key to use for signing.</param>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Chain)">
            <summary>
            Create a new VeriSignSignatureHandler and use the given chain to sign.
            </summary>
            <param name="chain">The chain containing the private key.</param>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Create a new VeriSignSignatureHandler and use the given certificate to sign.
            </summary>
            <param name="certificate">The certificate containing the private key.</param>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler.Revision">
            <summary>
            Revision number of the SignatureHandler.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler.MaxDigestLength">
            <summary>
            The maximum length of the digest.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DigitalSignatures.VeriSignSignatureHandler.Verify(System.Byte[],System.Byte[],System.Byte[][])">
            <summary>
            Verifies the signature. 
            Do not call this method directly.
            </summary>
            <param name="bytesToVerify">For internal use only.</param>
            <param name="digest">For internal use only.</param>
            <param name="certificates">For internal use only.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="T:TallComponents.PDF.Annotations.BorderStyle">
            <summary>
            Different styles for the border of a form field.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.BorderStyle.Solid">
            <summary>
            A Solid rectangle around the field.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.BorderStyle.Dashed">
            <summary>
            A Dashed rectangle surrounding the field.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.BorderStyle.Beveled">
            <summary>
            A simulated embossed rectangle that appears to be raised above the surface of the page.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.BorderStyle.Inset">
            <summary>
            A simulated engraved rectangle that appears to be recessed below the surface of the page.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.BorderStyle.Underline">
            <summary>
            A single line along the bottom of the field's bounding box.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Markups.CircleAppearance">
            <summary>
            The circle (markup) appearance is the default appearance for a circle annotation. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.CircleAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.CircleAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated annotation appearance must be updated.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Markups.PolygonAppearance">
            <summary>
            The polygone (markup) appearance is the default appearance for a polygon annotation. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.PolygonAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.PolygonAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated annotation appearance must be updated.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.PolygonAppearance.GetBounds(TallComponents.PDF.Annotations.Markups.Polygon)">
            <summary>
            Returns a boundary (in page coordinates) that is large enough to accomodate the appearance that
            we generate. Including line endings and leader lines.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Markups.PolylineAppearance">
            <summary>
            The polyline (markup) appearance is the default appearance for a polyline annotation. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.PolylineAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.PolylineAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated annotation appearance must be updated.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.PolylineAppearance.GetBounds(TallComponents.PDF.Annotations.Markups.Polyline)">
            <summary>
            Returns a boundary (in page coordinates) that is large enough to accomodate the appearance that
            we generate. Including line endings and leader lines.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Markups.LinkAppearance">
            <summary>
            The link appearance is the default appearance for a link annotation. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.LinkAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Markups.FreeTextAppearance">
            <summary>
            The free text (markup) appearance is the default appearance for a free text annotation. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.FreeTextAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.FreeTextAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated annotation appearance must be updated.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Markups.LineAppearance">
            <summary>
            The line (markup) appearance is the default appearance for a line annotation. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.LineAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.LineAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated annotation appearance must be updated.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.LineAppearance.GetBounds(TallComponents.PDF.Annotations.Markups.Line)">
            <summary>
            Returns a boundary (in page coordinates) that is large enough to accomodate the appearance that
            we generate. Including line endings and leader lines.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.LineAppearance.createLineEnding(TallComponents.PDF.Annotations.Markups.LineEndStyle,TallComponents.PDF.Pens.Pen,TallComponents.PDF.Colors.Color,System.Double,TallComponents.PDF.Transforms.Transform,System.Double@)">
            <summary>
            Creates a line ending, pointing horizontally to the right.
            </summary>
            <param name="style">The type of line ending.</param>
            <param name="pen">The pen to draw the line.</param>
            <param name="interiorColor">The fill color.</param>
            <param name="width">The line width.</param>
            <param name="transform">A transformation that will be applied on the line ending.</param>
            <param name="size">The space that the line ending takes on the line.</param>
            <returns>A shape that represents the line ending.</returns>
            <remarks>Currently only returns a closed arrow.</remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Markups.NoteAppearance">
            <summary>
            The note appearance is the default appearance for a note markup annotation. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.NoteAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.NoteAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated annotation appearance must be updated.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Markups.SquareAppearance">
            <summary>
            The square (markup) appearance is the default appearance for a square annotation. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.SquareAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.SquareAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated annotation appearance must be updated.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Markups.StampAppearance">
            <summary>
            The stamp appearance is the default appearance for a stamp annotation. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.StampAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.StampAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated annotation appearance must be updated.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Markups.TextMarkupAppearance">
            <summary>
            The text markup appearance is the default appearance for a text markup annotation. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.TextMarkupAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Markups.TextMarkupAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated annotation appearance must be updated.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider">
            <summary>
            This abstract base class can be derived for custom annotation appearances.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider.CanUpdateAppearance(TallComponents.PDF.Annotations.Annotation)">
            <summary>
            Indicates whether this provider is able to update an appearance for the given annotation.
            </summary>
            <param name="annotation">the annotation</param>
            <returns>True if the provider can create an updated appearance.</returns>
            <remarks>
            <para>By default, this property returns true. In principle, we should return true for
            any annotation that we support. The trouble is, that there are currently many types of
            markup annotations that have some fancy appearance. And some of these are not described
            very well.</para>
            <para>Setting this propery to false avoids having to implement complete appearance generators
            for each of these, and to instantly update these whenever Adobe feels like making things fancier.
            If false, the appearance will not get updated. It is still possible to move and resize the
            annotations, but then the existing appearance will be transformed. This is not always ideal, but
            a lot better than generating some crippled appearance, or no appearance at al.
            </para>
            <para>For some markup even, we never want to change an existing appearance. This is the case
            for stamps. So for stamps, we always set this propery to false. Note that we can still
            generate stamp appearance if they do not exist yet.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws the normal appearance of an annotation.
            This method is called when the associated appearance stream of 
            the annotation is updated or if the annotation must be flattened.
            </summary>
            <param name="shapes">Contains an empty shape collection.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>The caller will take care of correct positioning and rotation.</para>
            <para>If the annotatation is a widget the associated field can be retrieved through widget.Field.</para>
            <para>The appearance stream will not be included unless something has been added to the shape collection.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation,System.String)">
            <summary>
            Draws the normal appearance for the given string value.
            </summary>
            <param name="shapes">Will contain the appearance shapes.</param>
            <param name="annotation">The annotation.</param>
            <param name="value">The field value.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation,TallComponents.PDF.Forms.Fields.ListOption[])">
            <summary>
            Draws the normal appearance for the given list options.
            </summary>
            <param name="shapes">Will contain the appearance shapes.</param>
            <param name="annotation">The annotation.</param>
            <param name="values">The list option values.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider.DrawDown(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws the down appearance of an annotation.
            This method is called when the associated appearance stream of 
            the annotation is updated.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>The caller will take care of correct positioning and rotation.</para>
            <para>If the annotatation is a widget the associated field can be retrieved through widget.Field.</para>
            <para>The appearance stream will not be included unless something has been added to the canvas.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider.DrawRollover(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws the roll-over appearance of an annotation.
            This method is called when the associated appearance stream of 
            the annotation is updated.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>The caller will take care of correct positioning and rotation.</para>
            <para>If the annotatation is a widget the associated field can be retrieved through widget.Field.</para>
            <para>The appearance stream will not be included unless something has been added to the canvas.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.AppearanceProvider.DrawDefaultBorderAppearance(TallComponents.PDF.Annotations.Annotation)">
            <summary>
            Override and return None if the derived appearance provider 
            draws a custom border and background.
            </summary>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>Default is Square.</para>
            <para>The layer provided in Draw will already contains the border when excuted.</para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code128BarcodeFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code128BarcodeFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code128BarcodeFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code2of5InterleavedBarcodeFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code2of5InterleavedBarcodeFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code2of5InterleavedBarcodeFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code3of9BarcodeFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code3of9BarcodeFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.Code3of9BarcodeFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.UnknownBarcodeFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.UnknownBarcodeFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.Barcodes.UnknownBarcodeFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.CheckBoxFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.CheckBoxFieldAppearance.#ctor">
            <summary>
            Create a new check-box field appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.CheckBoxFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.UnknownFieldAppearance">
            <summary>
            The unknown field appearance can be used if the document is written, 
            it is the default appearance for an unknown widget (annotation). 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.UnknownFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.UnknownFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.PushButtonFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.PushButtonFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.PushButtonFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.UnsignedSignatureFieldAppearance">
            <summary>
            The unsigned signature field appearance can be used if the document is written, 
            it is the default appearance for an unknown widget (annotation). 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.UnsignedSignatureFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.UnsignedSignatureFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.CreateShapes.TabbedTextShape">
            <summary>
            TextShape that keeps tracks of the number of tabs before it.
            </summary>
            <remarks>This class is so basic that we did not bother putting it in a separate file.
            If it gets extended, it should.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.AppearanceProviders.Fields.CreateShapes.TabbedTextShape.LeadingTabs">
            <summary>
            Number of tabs before this text fragment.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DateTimeFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DateTimeFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DateTimeFieldAppearance.#ctor(System.Boolean)">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DateTimeFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DropDownListFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DropDownListFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DropDownListFieldAppearance.#ctor(System.Boolean)">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.DropDownListFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ExistingSignatureFieldAppearance">
            <summary>
            The signed signature field appearance can be used if the document is signed, 
            it is the default appearance for a signature field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ExistingSignatureFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ExistingSignatureFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ImageFieldAppearance">
            <summary>
            The field appearance can be used if the document is written,
            it is the default appearance for a field.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ImageFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ImageFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ListBoxFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ListBoxFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ListBoxFieldAppearance.#ctor(System.Boolean)">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.ListBoxFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.NumericFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.NumericFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.NumericFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.PasswordFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.PasswordFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.PasswordFieldAppearance.#ctor(System.Boolean)">
            <summary>
            Create a new appearance.
            </summary>
            <param name="drawContent">Render the containing text as well or the empty control only</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.PasswordFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.RadioButtonFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.RadioButtonFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.RadioButtonFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.SignedSignatureFieldAppearance">
            <summary>
            The signed signature field appearance can be used if the document is signed,
            it is the default appearance for a signature field.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.SignedSignatureFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.SignedSignatureFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.Fields.TextFieldAppearance">
            <summary>
            The field appearance can be used if the document is written, 
            it is the default appearance for a field. 
            </summary> 
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.TextFieldAppearance.#ctor">
            <summary>
            Create a new appearance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.TextFieldAppearance.#ctor(System.Boolean)">
            <summary>
            Create a new appearance.
            </summary>
            <param name="drawContent">Render the containing text as well or the empty control only</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.Fields.TextFieldAppearance.DrawNormal(TallComponents.PDF.Shapes.ShapeCollection,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This method draws an annotation.
            This method is called when the associated field value is updated or if the field must be flattened.
            </summary>
            <param name="shapes">Contains the appearance shapes.</param>
            <param name="annotation">The annotation that must be drawn.</param>
            <remarks>
            <para>
             The caller will take care of correct positioning and rotation.
            </para>
            <para>
            If the annotatation is a widget:
            The associated field can be retrieved through widget.Field.
            </para>
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Annotations.AppearanceProviders.BorderAppearance.None">
            <summary>
            No border is drawn.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.AppearanceProviders.BorderAppearance.Circle">
            <summary>
            A circle (ellipse) border is drawn.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.AppearanceProviders.BorderAppearance.Square">
            <summary>
            A square (rectangle) border is drawn.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.DefaultAppearanceProviderFactory">
            <summary>
            The default appearance provider factory used if no custom version is found.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.DefaultAppearanceProviderFactory.Create(TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This function returns a IAppearanceProvider which can Draw the appearance for the given annotation.
            </summary>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AppearanceProviders.IAppearanceProviderFactory">
            <summary>
            Implementations of IAppearanceProviderFactory create a Appearance provider. You can implement this
            interface if you want to create custom appearance providers for annotations.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AppearanceProviders.IAppearanceProviderFactory.Create(TallComponents.PDF.Annotations.Annotation)">
            <summary>
            This function returns an AppearanceProvider which can Draw the appearance for the given annotation.
            </summary>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.BorderEffect">
            <summary>
            Border effect enum for the Polygon markup.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.BorderEffect.NoEffect">
            <summary>
            No border effect.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.BorderEffect.Cloudy">
            <summary>
            The border appears "cloudy".
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.Circle">
            <summary>
            A Circle markup is a specialized markup and appear as a circle/ellipse.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Circle.#ctor">
            <summary>
            Create a new circle markup.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Circle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new circle markup.
            </summary>
            <param name="left">The left position for this circle markup.</param>
            <param name="bottom">The bottom position for this circle markup.</param>
            <param name="width">The width for this circle markup.</param>
            <param name="height">The height for this circle markup.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Circle.#ctor(TallComponents.PDF.Base.Annotations.Annotations,TallComponents.PDF.Base.Annotations.CircleAnnotation,TallComponents.PDF.Actions.IActionResolver)">
            <summary>
            Creates a new circle markup.
            </summary>
            <param name="allPageAnnotations">All annotations on the page that this text markup is on.</param>
            <param name="circleAnnotation">The CircleAnnotation to wrap</param>
            <param name="actionResolver">Needed to resolve [named] destinations.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Circle.BorderEffect">
            <summary>
            The border effect of the annotation.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Circle.BorderEffectIntensity">
            <summary>
            The intensity of the border effect if it is set.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Circle.InteriorColor">
            <summary>
            The interior color this square has.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Circle.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Circle.circleAnnotation">
            <summary>
            The base CirlceAnnotation wrapped in this class.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.Polygon">
            <summary>
            A Polygon markup is a specialized markup and appear as a number of vertices connected by straight lines.
            First and lat vertex are implicitely connected.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Polygon.#ctor">
            <summary>
            Create a new Polygon markup.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Polygon.#ctor(TallComponents.PDF.Annotations.Markups.Vertex[])">
            <summary>
            Create a new Polygon markup.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Polygon.#ctor(TallComponents.PDF.Base.Annotations.Annotations,TallComponents.PDF.Base.Annotations.PolygonAnnotation,TallComponents.PDF.Actions.IActionResolver)">
            <summary>
            Creates a new Polygon markup.
            </summary>
            <param name="allPageAnnotations">All annotations on the page that this text markup is on.</param>
            <param name="polygonAnnotation">The PolygonAnnotation to wrap</param>
            <param name="actionResolver">Needed to resolve [named] destinations.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Polygon.BorderEffect">
            <summary>
            The border effect of the annotation.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Polygon.BorderEffectIntensity">
            <summary>
            The intensity of the border effect if it is set.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Polygon.InteriorColor">
            <summary>
            The interior color of the line endings.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Polygon.Vertices">
            <summary>
            The vertices of the polygon
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Polygon.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Polygon.polygonAnnotation">
            <summary>
            The base SquareAnnotation wrapped in this class.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.Polyline">
            <summary>
            A Polyline markup is a specialized markup and appear as a number of vertices connected by straight lines.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Polyline.#ctor">
            <summary>
            Create a new Polyline markup.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Polyline.#ctor(TallComponents.PDF.Annotations.Markups.Vertex[])">
            <summary>
            Create a new Polyline markup.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Polyline.#ctor(TallComponents.PDF.Base.Annotations.Annotations,TallComponents.PDF.Base.Annotations.PolyLineAnnotation,TallComponents.PDF.Actions.IActionResolver)">
            <summary>
            Creates a new Polyline markup.
            </summary>
            <param name="allPageAnnotations">All annotations on the page that this text markup is on.</param>
            <param name="polylineAnnotation">The PolyLineAnnotation to wrap</param>
            <param name="actionResolver">Needed to resolve [named] destinations.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Polyline.InteriorColor">
            <summary>
            The interior color of the line endings.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Polyline.StartStyle">
            <summary>
            The line end style at the start of the line.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Polyline.EndStyle">
            <summary>
            The line end style at the end of the line.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Polyline.Vertices">
            <summary>
            The vertices of the polyline
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Polyline.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Polyline.polylineAnnotation">
            <summary>
            The base SquareAnnotation wrapped in this class.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.Vertex">
            <summary>
            The Vertex class is used to provide vertices for Polygon and Polyline annotations.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Vertex.#ctor(System.Double,System.Double)">
            <summary>
            Create a new vertex.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Vertex.X">
            <summary>
            The X coordinate of the vertex.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Vertex.Y">
            <summary>
            The Y coordinate of the vertex.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.FileAttachment">
            <summary>
            A FileAttachment is a specialized markup instance that refers to a file that is embedded in the document.
            </summary>
            <remarks>File attachment markups cannot be created yet. They can only be read from an existing document</remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.FileAttachment.#ctor">
            <summary>
            Creates a new FileAttachment.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.FileAttachment.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new file attachment.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="left">The left position for this file attachment.</param>
            <param name="bottom">The bottom position for this file attachment.</param>
            <param name="width">The width for this file attachment.</param>
            <param name="height">The height for this file attachment.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.FileAttachment.EmbeddedFile">
            <summary>
            Gets the file associated with this annotation.
            </summary>
            <value>
            The embedded file.
            </value>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.FileAttachment.IconName">
            <summary>
            The name of the icon that is used in displaying the annotation.
            </summary>
            <remarks>Viewer applications have predefined icons for at least the following names: Graph, Paperclip, PushPin and Tag.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.FileAttachment.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.FileAttachment.fileAttachmentAnnotation">
            <summary>
            FileAttachmentAnnotation wrapped in this class.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.FreeText">
            <summary>
            A free text annotation is a specialized markup and displays text directly on a page.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.FreeText.#ctor">
            <summary>
            Create a new free text markup.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.FreeText.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new free text markup.
            </summary>
            <param name="left">The left position for this free text markup.</param>
            <param name="bottom">The bottom position for this free text markup.</param>
            <param name="width">The width for this free text markup.</param>
            <param name="height">The height for this free text markup.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.FreeText.#ctor(TallComponents.PDF.Base.Annotations.Annotations,TallComponents.PDF.Base.Annotations.FreeTextAnnotation,TallComponents.PDF.Actions.IActionResolver)">
            <summary>
            Creates a new free text markup.
            </summary>
            <param name="allPageAnnotations">All annotations on the page that this text markup is on.</param>
            <param name="freeTextAnnotation">The FreeTextAnnotation to wrap</param>
            <param name="actionResolver">Needed to resolve [named] destinations.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.FreeText.InteriorColor">
            <summary>
            The interior color of the FreeText markup.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.FreeText.BorderColor">
            <summary>
            The border color
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.FreeText.TextColor">
            <summary>
            The text color. If null, the text color is the same as the border color.
            </summary>
            <remarks>
            <para>
            Adobe Acrobat does not allow changing the text color. If the text color differs from the border color, both Adobe Acrobat and
            Adobe Reader will show the text in the right color, but Adobe Acrobat may not be able to edit the text markup correctly, and
            it will set the text color to the border color (without reflecting this in the actual appearance).
            Such issues can be avoided by setting the text color to null.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.FreeText.FontSize">
            <summary>
            The font size of the text.
            </summary>
            <remarks>Set the font size to zero to fit the text to the size of the markup annotation.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.FreeText.Orientation">
            <summary>
            Orientation of the FreeText annotation in degrees. Default is Rotate0.
            </summary>
            <remarks>
            <para>The orientation is relative to the page and specified counterclockwise.</para>
            <para>Setting this property is supported in classic PDF documents only.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.FreeText.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The visitor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.FreeText.freeTextAnnotation">
            <summary>
            The base TextMarkupAnnotation wrapped in this class.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.Line">
            <summary>
            A Line is a specialized markup and appear as Line, with 2 line endings.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Line.#ctor">
            <summary>
            Create a new line markup.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Line.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new line markup.
            </summary>
            <param name="startX">the x coordinate of the line start</param>
            <param name="startY">the y coordinate of the line start</param>
            <param name="endX">the x coordinate of the line end</param>
            <param name="endY">the y coordinate of the line end</param>
            <remarks>The bounding rectangle of this annotation is automatically adjusted so that the
            appearance of the specified line fits.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Line.#ctor(TallComponents.PDF.Base.Annotations.Annotations,TallComponents.PDF.Base.Annotations.LineAnnotation,TallComponents.PDF.Actions.IActionResolver)">
            <summary>
            Creates a new line markup.
            </summary>
            <param name="allPageAnnotations">All annotations on the page that this line is on.</param>
            <param name="lineAnnotation">The LineAnnotation to wrap</param>
            <param name="actionResolver">Needed to resolve [named] destinations.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Line.InteriorColor">
            <summary>
            The interior color for line endings.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Line.StartStyle">
            <summary>
            The line end style at the start of the line.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Line.EndStyle">
            <summary>
            The line end style at the end of the line.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Line.LeaderLine">
            <summary>
            The length of leader lines.
            </summary>
            <remarks>The sign of this value indicates at which side of the line the leader line is located.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Line.LeaderLineExtension">
            <summary>
            The length of the leader line extension.
            </summary>
            <remarks>This is a positive value.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Line.HasCaption">
            <summary>
            If true, the text property is replicated as a caption on the line.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Line.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Line.lineAnnotation">
            <summary>
            The base LineAnnotation wrapped in this class.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.LineEndStyle">
            <summary>
            Standard appearances of the text markup (annotation).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.Unknown">
            <summary>
            Unkown line end style.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.Square">
            <summary>
            Square filled with interior color.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.Cirle">
            <summary>
            Circle filled with interior color.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.Diamond">
            <summary>
            Diamond shape filled with interior color.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.OpenArrow">
            <summary>
            Two short lines meeting in an angle to form an arrow head.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.ClosedArrow">
            <summary>
            Triangle filled with interior color.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.None">
            <summary>
            No line ending.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.Butt">
            <summary>
            Short perpendicular line.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.ReverseOpenArrow">
            <summary>
            Open arrow in reverse direction.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.ReverseClosedArrow">
            <summary>
            Closed arrow in reverse direction.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.LineEndStyle.Slash">
            <summary>
            Short diagonal line.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.Markup">
            <summary>
            Base class of all markup annotations.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Markup.Author">
            <summary>
            The author of this markup.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Markup.CreationDate">
            <summary>
            The date and time when the markup was created.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Markup.Popup">
            <summary>
            The popup annotation that is associated with this markup annotation.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Markup.Opacity">
            <summary>
            The opacity (0...255) which must be used for this markup. Default is 255.
            </summary>
            <remarks>
            0 means not visible (100% transparent), 255 means 100% visible (no transparancy).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Markup.Text">
            <summary>
            The (rich) text that is displayed by the pop-up window of this markup.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Markup.Contents">
            <summary>
            The plain text that is displayed by the pop-up window of this markup.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Markup.Replies">
            <summary>
            The markups that reply directly to this one.
            </summary>
            <remarks>If there are no replies, an empty collection is returned.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Markup.InReplyTo">
            <summary>
            The markup to which this markup replies.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Markup.Subject">
            <summary>
            The subject of this markup. 
            </summary>
            <remarks>
            May be <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Markup.OrientationImplementation">
            <summary>
            Orientation of the markup annotation in degrees. Is always a multiple of 90. Default is 0.
            </summary>
            <remarks>
            The orientation is relative to the page and specified counterclockwise.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.MarkupCollection">
            <summary>
            A markup collection which belongs to a page inside this document, or the replies-to from an other markup.
            </summary>
            <remarks>
            This collection is non-creatable and can be obtained through the Markups property of Page or an other Markup. 
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Annotations.Markups.MarkupCollection.Changed">
            <summary>
            Fired when this collection has changed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.#ctor(TallComponents.PDF.Page,TallComponents.PDF.Base.Annotations.Annotations,TallComponents.PDF.Actions.IActionResolver)">
            <summary>
            Creates a new markup collection at Page level.
            </summary>
            <param name="page">The page this collection belongs to.</param>
            <param name="allPageAnnotations">All annotations on the page. (can be <see langword="null"/>)</param>
            <param name="actionResolver">Needed to resolve [named] destinations.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.#ctor(TallComponents.PDF.Page,TallComponents.PDF.Annotations.Markups.Markup)">
            <summary>
            Create a new empty 'replies' collection.
            </summary>
            <param name="page">The page this collection belongs to.</param>
            <param name="inReplyTo">The annotation that the annotations in this collection are 'in reply to'.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.#ctor(TallComponents.PDF.Page,TallComponents.PDF.Base.Annotations.Annotations,TallComponents.PDF.Annotations.Markups.Markup,TallComponents.PDF.Actions.IActionResolver)">
            <summary>
            Creates a collection of reply markups.
            </summary>
            <param name="page">The page this collection belongs to.</param>
            <param name="annotations">All annotations on the page (can be <see langword="null"/>).</param>
            <param name="inReplyTo">The annotation that the annotations in this collection are 'in reply to'.</param>
            <param name="actionResolver">Needed to resolve [named] destinations.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.MarkupCollection.Item(System.Int32)">
            <summary>
            Retrieve a Sticky note by 0-based index. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.Add(TallComponents.PDF.Annotations.Markups.Markup)">
            <summary>
            Add an existing markup annotation to this collection.
            </summary>
            <param name="markup">The markup to add.</param>
            <returns>The zero-based index where the markup is added.</returns>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.Remove(TallComponents.PDF.Annotations.Markups.Markup)">
            <summary>
            Remove a markup annotation from this collection.
            </summary>
            <param name="markup">Remove this markup annotation.</param>
            <returns>true of removing the markup succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.AddRange(TallComponents.PDF.Annotations.Markups.Markup[])">
            <summary>
            Adds the elements of an array of markups to the end of the collection.
            </summary>
            <param name="markupAnnotations">The array of markups to be addded to the end of the collection.</param>
            <remarks>
            <para>
            <paramref name="markupAnnotations"/> does not accept a <see langword="null"/> as a valid value. 
            </para>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="markupAnnotations"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">(At least) one of the entries in the given <paramref name="markupAnnotations"/> is already in this collection. 
            (Duplicate <see cref="T:TallComponents.PDF.Annotations.Markups.Markup"/>)</exception>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.Insert(System.Int32,TallComponents.PDF.Annotations.Markups.Markup)">
            <summary>
            Insert an existing markup annotation at the specified index.
            </summary>
            <param name="index">The index of the markup annotation after insertion.</param>
            <param name="markup">Insert this markup annotation.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a markup annotation at the specified index.
            </summary>
            <param name="index">The index of the markup annotation to remove.</param>
            <remarks>Removing a markup annotation at a non-existing index is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.Clear">
            <summary>
            Clear this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.Contains(TallComponents.PDF.Annotations.Markups.Markup)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Annotations.Markups.Markup"/> is in the <see cref="T:TallComponents.PDF.Annotations.Markups.MarkupCollection"/>.
            </summary>
            <param name="markup">The <see cref="T:TallComponents.PDF.Annotations.Markups.Markup"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Annotations.Markups.Markup"/> is found in this <see cref="T:TallComponents.PDF.Annotations.Markups.MarkupCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="markup"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="markup"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.IndexOf(TallComponents.PDF.Annotations.Markups.Markup)">
            <summary>
            Returns the index of the specified markup annotation in the collection.
            </summary>
            <param name="markup">The markup annotation to locate in this collection.</param>
            <returns>The zero-based index of the item found in the collection; otherwise, -1.</returns>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.MarkupCollection.Count">
            <summary>
            Number of sticky notes in this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.MarkupCollection.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation for all items in the collection.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.MigrationState">
            <summary>
            Different migration states of a note.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.MigrationState.None">
            <summary>
            This markup has no migration state (default).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.MigrationState.Confirmed">
            <summary>
            The migration has been confirmed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.MigrationState.NotConfirmed">
            <summary>
            The migration has not been confirmed.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.Note">
            <summary>
            A note is a specialized markup and is also known as comments or 'sticky note'.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Note.#ctor">
            <summary>
            Create a new note.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Note.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new note.
            </summary>
            <param name="left">The left position for this note.</param>
            <param name="bottom">The bottom position for this note.</param>
            <param name="width">The width for this note.</param>
            <param name="height">The height for this note.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Note.#ctor(TallComponents.PDF.Base.Annotations.Annotations,TallComponents.PDF.Base.Annotations.TextAnnotation,TallComponents.PDF.Actions.IActionResolver)">
            <summary>
            Creates a new note.
            </summary>
            <param name="allPageAnnotations">All annotations on the page that this note is on.</param>
            <param name="textAnnotation">The TextAnnotation to wrap</param>
            <param name="actionResolver">Needed to resolve [named] destinations.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Note.IconName">
            <summary>
            The name of the icon that is used to display this note.
            </summary>
            <remarks>Viewer applications have predefined icons for at least the following names: Comment, Key, Note, Help, NewParagraph, Paragraph and Insert.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Note.StateModel">
            <summary>
            The state model of this markup.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Note.Marked">
            <summary>
            The Marked state of this note. This state is only valid if the StateModel equals Marked.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Note.ReviewState">
            <summary>
            The Review state of this note. This state is only valid if the StateModel equals Review.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Note.MigrationState">
            <summary>
            The Migration state of this note. 
            </summary>
            <remarks>
            This state is only valid if the StateModel equals Migration.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Note.BorderColor">
            <summary>
            The color of the background of this annotation.
            </summary>
            <remarks>This property returns either an RgbColor or <see langword="null"/> (transparent). You should only assign an RgbColor or null/nothing to this property.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Note.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Note.textAnnotation">
            <summary>
            The base TextAnnotation wrapped in this class.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.Popup">
            <summary>
            A Pop-up annotation, this annotation belongs to a Markup annotation. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Popup.#ctor">
            <summary>
            Create a new pop-up annotation.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Popup.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new pop-up annotation.
            </summary>
            <param name="left">The left position for this pop-up.</param>
            <param name="bottom">The bottom position for this pop-up.</param>
            <param name="width">The width for this pop-up.</param>
            <param name="height">The height for this pop-up.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Popup.Markup">
            <summary>
            The markup annotation that is associated with this pop-up.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Popup.Open">
            <summary>
            The pop-up should initially be displayed open.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Popup.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
            <returns>The object as returned by the visitor. Meaning is visitor specific.</returns>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.ReviewState">
            <summary>
            Different review states of a note.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.ReviewState.None">
            <summary>
            This markup has no review state (default).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.ReviewState.Accepted">
            <summary>
            The markup has been accepted.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.ReviewState.Rejected">
            <summary>
            The markup has been rejected.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.ReviewState.Cancelled">
            <summary>
            The markup has een cancelled.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.ReviewState.Completed">
            <summary>
            The markup has been completed.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.Square">
            <summary>
            A Square markup is a specialized markup and appear as a square.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Square.#ctor">
            <summary>
            Create a new square markup.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Square.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new square markup.
            </summary>
            <param name="left">The left position for this square markup.</param>
            <param name="bottom">The bottom position for this square markup.</param>
            <param name="width">The width for this square markup.</param>
            <param name="height">The height for this square markup.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Square.#ctor(TallComponents.PDF.Base.Annotations.Annotations,TallComponents.PDF.Base.Annotations.SquareAnnotation,TallComponents.PDF.Actions.IActionResolver)">
            <summary>
            Creates a new square markup.
            </summary>
            <param name="allPageAnnotations">All annotations on the page that this text markup is on.</param>
            <param name="squareAnnotation">The SquareAnnotation to wrap</param>
            <param name="actionResolver">Needed to resolve [named] destinations.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Square.BorderEffect">
            <summary>
            The border effect of the annotation.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Square.BorderEffectIntensity">
            <summary>
            The intensity of the border effect if it is set.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Square.InteriorColor">
            <summary>
            The interior color this square has.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Square.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Square.squareAnnotation">
            <summary>
            The base SquareAnnotation wrapped in this class.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.Stamp">
            <summary>
            A (rubber) stamp markup is a specialized markup and displays text or graphics intended to look as if they were stamped on the page with a rubber stamp.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Stamp.#ctor(System.String)">
            <summary>
            Create a new stamp markup.
            </summary>
            <param name="name">The name of the icon to be used for displaying the stamp.</param>
            <remarks>If null is passed as name, the stamp will use the name "Draft".</remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Stamp.#ctor(TallComponents.PDF.Annotations.Markups.StampAppearance)">
            <summary>
            Create a new stamp markup.
            </summary>
            <param name="appearance">The appearance of the icon to be used for displaying the stamp.</param>
            <remarks>If UnKnown is passed as the appearance, the stamp will use the name "Draft".</remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Stamp.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new stamp markup.
            </summary>
            <param name="name">The name of the icon to be used for displaying the stamp.</param>
            <param name="left">The left position for this stamp markup.</param>
            <param name="bottom">The bottom position for this stamp markup.</param>
            <param name="width">The width for this stamp markup.</param>
            <param name="height">The height for this stamp markup.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Stamp.#ctor(TallComponents.PDF.Base.Annotations.Annotations,TallComponents.PDF.Base.Annotations.StampAnnotation,TallComponents.PDF.Actions.IActionResolver)">
            <summary>
            Creates a new stamp markup.
            </summary>
            <param name="allPageAnnotations">All annotations on the page that this stamp markup is on.</param>
            <param name="stampAnnotation">The StampAnnotation to wrap</param>
            <param name="actionResolver">Needed to resolve [named] destinations.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Stamp.Appearance">
            <summary>
            The appearance of this stamp markup (annotation).
            </summary>
            <remarks>
            <para>This property will return StampAppearance.Unknown if
            the stamp name is none of the standard ones.
            </para>
            <para>Changing the appearance will regenerate a default appearance
            for the stamp.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Stamp.Name">
            <summary>
            The name of the icon to be used for the appearance.
            </summary>
            <remarks>
            <para>This property can be used to assign non-standard names.
            </para>
            <para>Changing the name will regenerate a default appearance
            for the stamp.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Stamp.SetIcon(TallComponents.PDF.Shapes.ShapeCollection)">
            <summary>
            Set a new Icon for this Stamp
            </summary>
            <param name="icon">The icon to set.</param>
            <remarks>
            Setting icon to <see langword="null"/> clears the icon.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Stamp.Orientation">
            <summary>
            Orientation of the Stamp annotation in degrees. Default is Rotate0.
            </summary>
            <remarks>
            <para>The orientation is relative to the page and specified counterclockwise.</para>
            <para>Setting this property is supported in classic PDF documents only.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.Stamp.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.Stamp.StampAnnotation">
            <summary>
            The base StampAnnotation wrapped in this class.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.StampAppearance">
            <summary>
            Standard appearances of the text markup (annotation).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Unknown">
            <summary>
            The stamp appearance is none of the standard ones.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Approved">
            <summary>
            An Approved stamp.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.AsIs">
            <summary>
            An AsIs stamp.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Confidential">
            <summary>
            A Confidential Stamp.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Departmental">
            <summary>
            A Departmental stamp.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Draft">
            <summary>
             A Draft stamp.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Experimental">
            <summary>
            An Experimental stamp.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Expired">
            <summary>
            An Expired stamp.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Final">
            <summary>
            A Final stamp.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.ForComment">
            <summary>
            A ForComment stamp.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.ForPublicRelease">
            <summary>
            A ForPublicRelease stamp.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.NotApproved">
            <summary>
            A NotApproved stamp.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.NotForPublicRelease">
            <summary>
            A NotForPublicRelease stamp.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Sold">
            <summary>
            A Sold stamp.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.TopSecret">
            <summary>
            A TopSecret stamp.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Completed">
            <summary>
            A completed
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StampAppearance.Void">
            <summary>
            A void stamp
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.StateModel">
            <summary>
            Different state models of a note.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StateModel.None">
            <summary>
            No state model. This is the state model of a note that does not represent a state change.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StateModel.Marked">
            <summary>
            This is the state model of a note that either marks or unmarks a note.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StateModel.Review">
            <summary>
            This is the state model of a note that changes the review state of a note.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.StateModel.Migration">
            <summary>
            This is the state model of a note that changes the migration state of a note.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.TextMarkup">
            <summary>
            A text markup is a specialized markup and appear as highlight, underline, strikout or jagged ('Squiggly') underline.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.TextMarkup.#ctor">
            <summary>
            Create a new text markup (as highlight).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.TextMarkup.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new text markup.
            </summary>
            <param name="left">The left position for this text markup.</param>
            <param name="bottom">The bottom position for this text markup.</param>
            <param name="width">The width for this text markup.</param>
            <param name="height">The height for this text markup.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.TextMarkup.#ctor(TallComponents.PDF.Base.Annotations.Annotations,TallComponents.PDF.Base.Annotations.TextMarkupAnnotation,TallComponents.PDF.Actions.IActionResolver)">
            <summary>
            Creates a new text markup.
            </summary>
            <param name="allPageAnnotations">All annotations on the page that this text markup is on.</param>
            <param name="textMarkupAnnotation">The TextMarkupAnnotation to wrap</param>
            <param name="actionResolver">Needed to resolve [named] destinations.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.TextMarkup.Appearance">
            <summary>
            The appearance of this text markup (annotation).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.TextMarkup.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.TextMarkup.textMarkupAnnotation">
            <summary>
            The base TextMarkupAnnotation wrapped in this class.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.TextMarkupAppearance">
            <summary>
            Different appearances of the text markup (annotation).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.TextMarkupAppearance.Unknown">
            <summary>
            The type is unknown of cannot determined.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.TextMarkupAppearance.Highlight">
            <summary>
            This markup annotation appears as a highlight.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.TextMarkupAppearance.Underline">
            <summary>
            This markup annotation appears as an underline.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.TextMarkupAppearance.Squiggly">
            <summary>
            This markup annotation appears as a squiggly (jagged) underline.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Markups.TextMarkupAppearance.StrikeOut">
            <summary>
            This markup annotation appears as a strike out.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Markups.UnknownMarkup">
            <summary>
            Unknown markup.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Markups.UnknownMarkup.Name">
            <summary>
            The name for this unknown markup.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Markups.UnknownMarkup.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AnnotationVisitor">
            <summary>
            A derived instance of AnnotationVisitor is passed to Annotation.Accept(...). This method
            calls one of the below AnnotationVisitor methods according to the type of annotation.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Annotation,System.Object)">
            <summary>
            Visit an annotation.
            </summary>
            <param name="annotation">The vistor must handle an annotation.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            <see langword="null"/> is returned when not implementing this functionality.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Widgets.Widget,System.Object)">
            <summary>
            Visit a widget (annotation).
            </summary>
            <param name="annotation">The vistor must handle a widget.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the annotation overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Widgets.RadioButtonWidget,System.Object)">
            <summary>
            Visit a radio button widget (annotation).
            </summary>
            <param name="annotation">The vistor must handle a radio button widget.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the widget overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Widgets.PushButtonWidget,System.Object)">
            <summary>
            Visit a push button widget (annotation).
            </summary>
            <param name="annotation">The vistor must handle a push button widget.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the widget overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Widgets.SignatureWidget,System.Object)">
            <summary>
            Visit a signature widget (annotation).
            </summary>
            <param name="annotation">The vistor must handle a signature widget.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the widget overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Widgets.CheckBoxWidget,System.Object)">
            <summary>
            Visit a check box widget (annotation).
            </summary>
            <param name="annotation">The vistor must handle a check box widget.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the widget overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Link,System.Object)">
            <summary>
            Visit a link (annotation).
            </summary>
            <param name="annotation">The vistor must handle a link annotation.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the annotation overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.Markup,System.Object)">
            <summary>
            Visit a markup (annotation).
            </summary>
            <param name="annotation">The vistor must handle a markup (annotation).</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the annotation overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.Note,System.Object)">
            <summary>
            Visit a sticky-note (annotation).
            </summary>
            <param name="annotation">The vistor must handle a sticky-note (annotation).</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the markup overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.TextMarkup,System.Object)">
            <summary>
            Visit a text markup (annotation).
            </summary>
            <param name="annotation">The vistor must handle a text markup (annotation).</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the markup overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.Stamp,System.Object)">
            <summary>
            Visit a stamp markup (annotation).
            </summary>
            <param name="annotation">The vistor must handle a stamp markup (annotation).</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the markup overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.FreeText,System.Object)">
            <summary>
            Visit a free text markup (annotation).
            </summary>
            <param name="annotation">The vistor must handle a free text markup (annotation).</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the markup overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.Square,System.Object)">
            <summary>
            Visit a square markup (annotation).
            </summary>
            <param name="annotation">The vistor must handle a square markup (annotation).</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the markup overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.Circle,System.Object)">
            <summary>
            Visit a circle markup (annotation).
            </summary>
            <param name="annotation">The vistor must handle a circle markup (annotation).</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the markup overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.Line,System.Object)">
            <summary>
            Visit a line markup (annotation).
            </summary>
            <param name="annotation">The vistor must handle a line markup (annotation).</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the markup overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.Polyline,System.Object)">
            <summary>
            Visit a polyline markup (annotation).
            </summary>
            <param name="annotation">The vistor must handle a polyline markup (annotation).</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the markup overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.Polygon,System.Object)">
            <summary>
            Visit a polygon markup (annotation).
            </summary>
            <param name="annotation">The vistor must handle a polygon markup (annotation).</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the markup overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.FileAttachment,System.Object)">
            <summary>
            Visit a file attachment markup (annotation).
            </summary>
            <param name="annotation">The vistor must handle a file attachment markup (annotation).</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the markup overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.Popup,System.Object)">
            <summary>
            Visit a pop-up (annotation).
            </summary>
            <param name="annotation">The vistor must handle a pop-up (annotation).</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the annotation overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationVisitor.Visit(TallComponents.PDF.Annotations.Markups.UnknownMarkup,System.Object)">
            <summary>
            Visit an unknown markup (annotation).
            </summary>
            <param name="annotation">The vistor must handle an unknown markup (annotation).</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the annotation overload.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Annotation">
            <summary>
            An annotation is the base class all annotations.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Annotations.Annotation.PropertyChanged">
            <summary>
            Occurs when any property of the annotation has changed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Annotation.#ctor">
            <summary>
            Creates a new Annotation, without specifying the underlaying data.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Annotation.#ctor(TallComponents.PDF.Base.Annotations.Annotation,TallComponents.PDF.Actions.IActionResolver)">
            <summary>
            Creates a new Annotation.
            </summary>
            <param name="annotation">The base annotation to wrap</param>
            <param name="actionResolver">Needed to resolve [named] destinations.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Annotation.BeginUpdate">
            <summary>
            This method can be used to begin a properties bulk updat .
            </summary>
            <remarks>
            Notice that you should call EndUpdate when the bulk update is ready.
            You can nest BeginUpdate / EndUpdate pairs.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Annotation.EndUpdate">
            <summary>
            This method can be used to end the properties bulk update.
            </summary>
            <remarks>
            You can nest BeginUpdate / EndUpdate pairs.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Annotation.firePropertyChanged(System.String)">
            <summary>
            Fire the property changed event.
            </summary>
            <param name="name">The name of the changed property.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Annotation.updateAPAndFirePropertyChanged(System.String)">
            <summary>
            Update the AP entry and then fire the PropertyChanged event.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Annotation.updateAPAndFirePropertyChanged(System.String,System.Boolean)">
            <summary>
            Update the AP entry and then fire the PropertyChanged event.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.Page">
            <summary>
            The associated page.
            </summary>
            <remarks>
            <para>
            This property cannot be set.
            </para>
            Note that this property is updated if this annotation is added to the [DerivedAnnotation]Collection from a page.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.TabOrder">
            <summary>
            Retrieve the tab-order for this annotation.
            </summary>
            <returns>The zero-based tab-order. Return -1 if the annotation is not connected to any page.</returns>
            <remarks>
            The numbers are not garanteed to be continuous.  
            The absolute tab order number has no significant meaning.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.Left">
            <summary>
            Position of annotation's left edge. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.Bottom">
            <summary>
            Position of annotation's bottom edge. 
            </summary> 
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.Right">
            <summary>
            Position of annotation's right edge. 
            </summary>
            <remarks>
            This property cannot be set, it will be calculated from the left and width properties.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.Top">
            <summary>
            Position of annotation's top edge. 
            </summary>
            <remarks>
            This property cannot be set, it will be calculated from the bottom and height properties.
            </remarks> 
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.Width">
            <summary>
            Width of this annotation. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.Height">
            <summary>
            Height of this annotation. 
            </summary> 
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.Locked">
            <summary>
            Specifies if the annotations properties are locked in a viewer application.
            </summary>
            <remarks>
            This flag does not restrict changing Field properties, such as the value of a TextField.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.BorderColor">
            <summary>
            The color of the border of this annotation.
            </summary>
            <remarks>This property returns either an RgbColor or <see langword="null"/> (transparent). You should only assign an RgbColor or null/nothing (transparent) to this property.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.BorderWidth">
            <summary>
            The width in points of the border of this annotation.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.BorderStyle">
            <summary>
            The border style of this annotation.
            </summary>    
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.Invisible">
            <summary>
            This annotation will not be visible in the pdf-viewer.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.Print">
            <summary>
            This annotation will be visible on a printout.
            </summary>   
        </member>
        <member name="M:TallComponents.PDF.Annotations.Annotation.Flatten(TallComponents.PDF.Shapes.Canvas)">
            <summary>
            Flatten the annotation as static content to the given canvas.
            </summary>
            <param name="canvas">The canvas to add the content.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.NoRotate">
            <summary>
            This annotation will not be rotated with the page rotation.
            The upper left corner of the annotation rectangle remains in a fixed location on the page, regardless of the page rotation.
            </summary>   
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.OrientationImplementation">
            <summary>
            Implements the actual orientation functionality of various annotation types. Officially, only widgets
            can have a non-zero orientation, but it appears that other markup types can have a rotate flag.
            The orientationImplementation avoid runtime checks for this. If an annotation does not support
            non-zero orientations, the implementation will always return Rotate0.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.AppearanceProvider">
            <summary>
            The specific appearance provider for this annotation.
            </summary>
            <remarks>
            If <see langword="null"/> the default provider will be used.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Annotation.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.baseAnnotation">
            <summary>
            The base annotation wrapped in this class
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Annotation.ActionResolver">
            <summary>
            The Destination resolver used to resolve destinations in actions.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AnnotationCollection">
            <summary>
            An annotation collection.
            </summary>
            <remarks>
            This collection is non-creatable and can be obtained through the Annotations property of HideAction. 
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.#ctor">
            <summary>
            /// Creates an empty annotation collection
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.#ctor(System.Boolean)">
            <summary>
            /// Creates an empty annotation collection.
            </summary>
            <param name="readOnly">Specify if the collection is read-only or editable.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.#ctor(TallComponents.PDF.Base.Object,TallComponents.PDF.Annotations.IAnnotationResolver)">
            <summary>
            Creates a new annotation collection, based on the array.
            </summary>
            <param name="obj">The object with contains the base information for this collection.</param>
            <param name="annotationResolver">Needed to resolve existing annotations.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.Add(TallComponents.PDF.Annotations.Annotation)">
            <summary>
            Adds an <see cref="T:TallComponents.PDF.Annotations.Annotation">Annotation</see> to the end of the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection">AnnotationCollection</see>.
            </summary>
            <param name="annotation">The <see cref="T:TallComponents.PDF.Annotations.Annotation"/> to be addded to the end of the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection"/>.</param>
            <returns>
            The <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection"/> index at which the <see cref="T:TallComponents.PDF.Annotations.Annotation"/> has been added.
            </returns>
            <remarks>
            <para>
            <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection"/> does not accept a <see langword="null"/> as a valid value. 
            </para>
            <para>
            <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection"/> does not accept duplicate elements.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="annotation"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The given <paramref name="annotation"/> is already in this <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection"/>. (Duplicate <paramref name="annotation"/>)</exception>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.Remove(TallComponents.PDF.Annotations.Annotation)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Annotations.Annotation"/> from this <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection"/>.
            </summary>
            <param name="annotation">The annotation to remove.</param>
            <returns>true if removing the annotation succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.AddRange(TallComponents.PDF.Annotations.Annotation[])">
            <summary>
            Adds the elements of an array of annotations to the end of the collection.
            </summary>
            <param name="annotations">The array of annotations to be addded to the end of the collection.</param>
            <remarks>
            <para>
            <paramref name="annotations"/> does not accept a <see langword="null"/> as a valid value. 
            </para>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="annotations"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">(At least) one of the entries in the given <paramref name="annotations"/> is already in this collection. 
            (Duplicate <see cref="T:TallComponents.PDF.Annotations.Annotation"/>)</exception>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.Clear">
            <summary>
            Removes all annotations from the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection"/>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.Contains(TallComponents.PDF.Annotations.Annotation)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Annotations.Annotation"/> is in the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection"/>.
            </summary>
            <param name="annotation">The <see cref="T:TallComponents.PDF.Annotations.Annotation"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Annotations.Annotation"/> is found in this <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="annotation"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="annotation"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.IndexOf(TallComponents.PDF.Annotations.Annotation)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Annotations.Annotation"/> in the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection"/>.
            </summary>
            <param name="annotation">The <see cref="T:TallComponents.PDF.Annotations.Annotation"/> to locate in the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Annotations.Annotation"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.Insert(System.Int32,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            Insert an <see cref="T:TallComponents.PDF.Annotations.Annotation"/> on a specific place in this <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Annotations.Annotation"/> should be inserted.</param>
            <param name="annotation">The <see cref="T:TallComponents.PDF.Annotations.Annotation"/> to be insert.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Annotations.Annotation"/> from the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection"/> at the specified index.
            </summary>
            <param name="index">The zero-based index from the <see cref="T:TallComponents.PDF.Annotations.Annotation"/> to be removed.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.AnnotationCollection.Item(System.Int32)">
            <summary>
            Retrieve an <see cref="T:TallComponents.PDF.Annotations.Annotation"/> by zero-based index from the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection"/>. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.AnnotationCollection.Count">
            <summary>
            Get the number of <see cref="T:TallComponents.PDF.Annotations.Annotation"/>s actually contained in the <see cref="T:TallComponents.PDF.Annotations.AnnotationCollection"/>
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.AnnotationCollection.IsReadOnly">
            <summary>
            Get a value indicating whether this collection is read-only.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation for all items in the collection.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationCollection.toArray">
            <summary>
            Returns the annotations contained in this collection as array.
            </summary>
            <returns>The Annotation array.</returns>
        </member>
        <member name="T:TallComponents.PDF.Annotations.AnnotationResolver">
            <summary>
            An annotation resolver is used to resolve a Base.Object to an existing (derived)annotation.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationResolver.#ctor(TallComponents.PDF.PageCollection,TallComponents.PDF.Forms.Fields.IFieldResolver)">
            <summary>
            Creates a new AnnotationResolver
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationResolver.Resolve(TallComponents.PDF.Base.Object)">
            <summary>
            Resolve a base object to an existing (derived)annotation, without the widgets in fields.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.AnnotationResolver.Resolve(TallComponents.PDF.Base.Object,System.Boolean)">
            <summary>
            Resolve a base object to an existing (derived)annotation.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.AnnotationResolver.FieldResolver">
            <summary>
            Get the field resolver used to resolve widget annotations in this annotation resolver.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.HighlightStyle">
            <summary>
            The visual effect that is used when the mouse is pressed inside the annotation area.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.HighlightStyle.None">
            <summary>
            No visual effect.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.HighlightStyle.Invert">
            <summary>
            Invert the backgound and border of the annotation.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.HighlightStyle.Outline">
            <summary>
            Invert the border of the annotation
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.HighlightStyle.Push">
            <summary>
            Display the annotation as if it were pushed down.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.IAnnotationResolver">
            <summary>
            An annotation resolver is used to resolve a Base.Object to an existing (derived)annotation.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.IAnnotationResolver.Resolve(TallComponents.PDF.Base.Object)">
            <summary>
            Resolve a base object to an existing (derived)annotation,  without the widgets in fields.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.IAnnotationResolver.FieldResolver">
            <summary>
            Get the field resolver used to resolve widget annotations in this annotation resolver.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Link">
            <summary>
            A link annotation
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Link.#ctor">
            <summary>
            Create a new link annotation.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Link.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new link annotation.
            </summary>
            <param name="left">The left position for this link.</param>
            <param name="bottom">The bottom position for this link.</param>
            <param name="width">The width for this link.</param>
            <param name="height">The height for this link.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Link.BorderColor">
            <summary>
            The color of the border of this annotation.
            </summary>
            <remarks>This property returns either an RgbColor or <see langword="null"/> (transparent). You should only assign an RgbColor or null/nothing to this property.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Link.#ctor(TallComponents.PDF.Base.Annotations.LinkAnnotation,TallComponents.PDF.Actions.IActionResolver)">
            <summary>
            Creates a new link annotation.
            </summary>
            <param name="linkAnnotation">The LinkAnnotation to wrap</param>
            <param name="actionResolver">Needed to resolve [named] destinations</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Link.MouseUpActions">
            <summary>
            The actions executed when a mouse/pointing device goes up.
            </summary>
            <remarks>
            <para>These actions are also called the click-actions.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Link.linkAnnotation">
            <summary>
            The base LinkAnnotation wrapped in this class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Link.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
            <returns>The object as returned by the visitor. Meaning is visitor specific.</returns>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Link.HighlightStyle">
            <summary>
            The visual effect that is used when the mouse is pressed inside the annotation area.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.LinkCollection">
            <summary>
            A link annotation collection which belongs to a page inside this document.
            </summary>
            <remarks>
            This collection is non-creatable and can be obtained through the Links property of Page. 
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Annotations.LinkCollection.Changed">
            <summary>
            Fired when this collection has changed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.LinkCollection.#ctor(TallComponents.PDF.Page,TallComponents.PDF.Base.Annotations.Annotations,TallComponents.PDF.Actions.IActionResolver)">
            <summary>
            Creates a new link annnotation collection on Page level.
            </summary>
            <param name="page">The page this collection belongs to.</param>
            <param name="annotations">All annotations on the page. (may be <see langword="null"/>)</param>
            <param name="actionResolver">Needed to resolve [named] destinations.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.LinkCollection.Item(System.Int32)">
            <summary>
            Retrieve a Link annotation by 0-based index. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.LinkCollection.Add(TallComponents.PDF.Annotations.Link)">
            <summary>
            Add an existing link annotation to this collection.
            </summary>
            <param name="linkAnnotation">The link to add.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.LinkCollection.Remove(TallComponents.PDF.Annotations.Link)">
            <summary>
            Remove a link annotation from this collection.
            </summary>
            <param name="linkAnnotation">Remove this link annotation.</param>
            <returns>true if removing the link annotation succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Annotations.LinkCollection.AddRange(TallComponents.PDF.Annotations.Link[])">
            <summary>
            Adds the elements of an array of links to the end of the collection.
            </summary>
            <param name="links">The array of links to be addded to the end of the collection.</param>
            <remarks>
            <para>
            <paramref name="links"/> does not accept a <see langword="null"/> as a valid value. 
            </para>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="links"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">(At least) one of the entries in the given <paramref name="links"/> is already in this collection. 
            (Duplicate <see cref="T:TallComponents.PDF.Annotations.Link"/>)</exception>
        </member>
        <member name="M:TallComponents.PDF.Annotations.LinkCollection.Insert(System.Int32,TallComponents.PDF.Annotations.Link)">
            <summary>
            Insert an existing link annotation at the specified index.
            </summary>
            <param name="index">The index of the link annotation after insertion.</param>
            <param name="linkAnnotation">Insert this link annotation.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.LinkCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a link annotation at the specified index.
            </summary>
            <param name="index">The index of the link annotation to remove.</param>
            <remarks>Removing a link annotation at a non-existing index is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.LinkCollection.Clear">
            <summary>
            Clear this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.LinkCollection.Contains(TallComponents.PDF.Annotations.Link)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Annotations.Link"/> is in the <see cref="T:TallComponents.PDF.Annotations.LinkCollection"/>.
            </summary>
            <param name="link">The <see cref="T:TallComponents.PDF.Annotations.Link"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Annotations.Link"/> is found in this <see cref="T:TallComponents.PDF.Annotations.LinkCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="link"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="link"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Annotations.LinkCollection.IndexOf(TallComponents.PDF.Annotations.Link)">
            <summary>
            Returns the index of the specified link annotation in the collection.
            </summary>
            <param name="linkAnnotation">The link annotation to locate in this collection.</param>
            <returns>The zero-based index of the item found in the collection; otherwise, -1.</returns>
        </member>
        <member name="P:TallComponents.PDF.Annotations.LinkCollection.Count">
            <summary>
            Number of link annotations in this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.LinkCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Annotations.LinkCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Annotations.LinkCollection.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation for all items in the collection.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Widgets.CheckBoxWidget">
            <summary>
            A check box widget is a specialized widget.
            </summary>
            <remarks>
            You retrieve an existing Widget from the Widgets property of the Field class or Page class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.CheckBoxWidget.#ctor">
            <summary>
            Create a new PDF form field Check box Widget.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.CheckBoxWidget.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new PDF form field Radio button Widget.
            </summary>
            <param name="left">The left position for this widget.</param>
            <param name="bottom">The bottom position for this widget.</param>
            <param name="width">The width for this widget.</param>
            <param name="height">The height for this widget.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.CheckBoxWidget.CheckMarkAppearance">
            <summary>
            The check mark appearance for this check box widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.CheckBoxWidget.Option">
            <summary>
            The associated Option for this Widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.CheckBoxWidget.BorderShape">
            <summary>
            The shape of checkbox widget's border. By default it's square, but in dynamic xfa round radiobutton-like border is supported as well.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.CheckBoxWidget.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance">
            <summary>
            Different layout modes for a push button widget.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance.Check">
            <summary>
            Display the check mark as check.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance.Circle">
            <summary>
            Display the check mark as circle.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance.Cross">
            <summary>
            Display the check mark as cross.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance.Diamond">
            <summary>
            Display the check mark as diamond.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance.Square">
            <summary>
            Display the check mark as square.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance.Star">
            <summary>
            Display the check mark as star.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.CheckMarkAppearance.Unknown">
            <summary>
            The check mark is unknown (none of the known values).
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Widgets.DisplaySettings">
            <summary>
            Enum which specifies what to display in the Text region in a SignatureAppearance.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.None">
            <summary>
            Displays non of the proerties. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.Name">
            <summary>
            Display the name property.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.DistinguishedName">
            <summary>
            Display the distinguished name property.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.Reason">
            <summary>
            Display the reason property.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.Location">
            <summary>
            Display the location property.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.Date">
            <summary>
            Display the date property.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.Labels">
            <summary>
            Display labels in front of the other properties.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.DisplaySettings.All">
            <summary>
            Displays all the properties including labels.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Widgets.PdfWidget">
            <summary>
            A PDF form field Widget. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.PdfWidget.BorderColor">
            <summary>
            The color of the border of this widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.PdfWidget.BorderWidth">
            <summary>
            The width in points of the border of this widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.PdfWidget.BorderStyle">
            <summary>
            The border style of this widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.PdfWidget.BackgroundColor">
            <summary>
            The background color of this widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.PdfWidget.Orientation">
            <summary>
            Orientation of widget in degrees. Is always a multiple of 90. Default is 0.
            </summary>
            <remarks>
            The orientation is relative to the page and specified counterclockwise.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.PdfWidget.Font">
            <summary>
            Returns the font of this form field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.PdfWidget.FontSize">
            <summary>
            Returns the size of the font of this form field.
            A zero fontsize means that the text is auto-sized.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.PdfWidget.CharacterSpacing">
            <summary>
            Returns the size of the Character spacing of this form field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.PdfWidget.TextColor">
            <summary>
            The text color 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.PdfWidget.HorizontalAlignment">
            <summary>
            The text aligment 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.PdfWidget.NormalCaption">
            <summary>
            The normal caption [visable] on a [push] button.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.PdfWidget.PushButtonLayout">
            <summary>
            The text-icon position.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.PdfWidget.SetIcon(TallComponents.PDF.Shapes.ShapeCollection)">
            <summary>
            Set the icon for the button widget.
            </summary>
            <param name="icon">The icon to set, or null if reset.</param>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Widgets.PushButtonLayout">
            <summary>
            Different layout modes for a push button widget.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.PushButtonLayout.LabelOnly">
            <summary>
            Display the label only.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.PushButtonLayout.IconOnly">
            <summary>
            Display the icon only.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.PushButtonLayout.LabelBelowIcon">
            <summary>
            Display both label and icon, with the label on the bottom, the icon on the top. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.PushButtonLayout.LabelAboveIcon">
            <summary>
            Display both label and icon, with the label on the top, the icon on the bottom.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.PushButtonLayout.LabelRightIcon">
            <summary>
            Display both label and icon, with the label to the right of the icon. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.PushButtonLayout.LabelLeftIcon">
            <summary>
            Display both label and icon, with the label to the left of the icon.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.PushButtonLayout.LabelOverIcon">
            <summary>
            Display both label and icon, with the label overlaid directly on the icon.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Widgets.PushButtonWidget">
             <summary>
            A push button widget is a specialized widget.
             </summary>
             <remarks>
             You retrieve an existing Widget from the Widgets property of the Field class or Page class.
             </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.#ctor">
            <summary>
            Create a new PDF form field Push button Widget.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new PDF form field Push button Widget.
            </summary>
            <param name="left">The left position for this widget.</param>
            <param name="bottom">The bottom position for this widget.</param>
            <param name="width">The width for this widget.</param>
            <param name="height">The height for this widget.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.#ctor(TallComponents.PDF.Annotations.Widgets.Widget)">
            <summary>
            Create a new widget, based on an existing widget (used for cloning).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.SetIcon(System.Drawing.Bitmap)">
            <summary>
            Set a new Icon for this PushButtonWidget
            </summary>
            <param name="icon">The icon to set.</param>
            <remarks>
            Setting icon to <see langword="null"/> clears the icon.
            <para>The caller must dispose the bitmap. May be done after this function is finished.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.SetIcon(TallComponents.PDF.Shapes.ShapeCollection)">
            <summary>
            Set a new Icon for this PushButtonWidget
            </summary>
            <param name="icon">The icon to set.</param>
            <remarks>
            Setting icon to <see langword="null"/> clears the icon.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.HasIcon">
            <summary>
            Checks if an icon is present.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.GetIcon">
            <summary>
            Returns the content of the icon as a collection of shape objects (nested).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.Label">
            <summary>
            The label for the button.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.Layout">
            <summary>
            The Layout mode for this push button widget.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.PushButtonWidget.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Widgets.RadioButtonWidget">
             <summary>
            A radio button widget is a specialized widget, which has an additional Name which specifies the widget.
             </summary>
             <remarks>
             You retrieve an existing Widget from the Widgets property of the Field class or Page class.
             </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.RadioButtonWidget.#ctor">
            <summary>
            Create a new PDF form field Radio button Widget.
            </summary>
            <remarks>This constructor is needed for XML loading in TallPDF. It will create a widget with the export name "defaultExportName". Please take care
            to set Option.ExportName to a sensible value.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.RadioButtonWidget.#ctor(System.String)">
            <summary>
            Create a new PDF form field Radio button Widget.
            </summary>
            <param name="exportName">The exportName used when this option is checked.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.RadioButtonWidget.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Create a new PDF form field Radio button Widget.
            </summary>
            <param name="left">The left position for this widget.</param>
            <param name="bottom">The bottom position for this widget.</param>
            <param name="width">The width for this widget.</param>
            <param name="height">The height for this widget.</param>
            <param name="exportName">The exportName used when this option is checked.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.RadioButtonWidget.CheckMarkAppearance">
            <summary>
            The check mark appearance for this radio button widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.RadioButtonWidget.Option">
            <summary>
            The associated Option for this Widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.RadioButtonWidget.Persistency">
            <summary>
            The widget's persistency when this document is written.  
            </summary>
            <remarks>
            The persistency for radio buttons is the same for all radio buttons connected to one field.
            The property will be automatically updated for all radio button widgets.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.RadioButtonWidget.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Widgets.SignatureAppearance">
            <summary>
            The signature appearance can be used if the document is signed,
            it is the appearance for a signed signature widget.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.SignatureAppearance.#ctor">
            <summary>
            Create a new signature appearance.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.SignatureAppearance.Style">
            <summary>
            The style used in the SignatureAppearance.
            </summary>
            <remarks>
            Default is NameAndText.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.SignatureAppearance.Bitmap">
            <summary>
            The image used if style is ImageOnly or ImageAndText.
            </summary>
            <remarks>
            <para>Default value is <see langword="null"/>.</para>
            <para>The caller is resposible for disposing the bitmap.
            You may dispose the bitmap the bitmap after the setter is finished.</para>
            <para>In other styles this property has no meaning.</para>
            <para>If both a Bitmap and a TopazSignature are provided the TopazSignature will be used only.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.SignatureAppearance.TopazSignature">
            <summary>
            The image (as vector graphics) used if style is ImageOnly or ImageAndText.
            </summary>
            <remarks>
            <para>Default value is <see langword="null"/>.</para>
            <para>In other styles this property has no meaning.</para>
            <para>If both a Bitmap and a TopazSignature are provided the TopazSignature will be used only.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.SignatureAppearance.KeepAspectRatio">
            <summary>
            specify if the image must respect its aspect ratio.
            </summary>
            <remarks>
            Default value is true.
            <para>Meaning full if a bitmap or image is set only.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.SignatureAppearance.DisplaySettings">
            <summary>
            Specifies what to display in the Text region.
            </summary>
            <remarks>
            In ImageOnly style this property has no meaning.
            <para>Default is All.</para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Widgets.SignatureAppearanceStyle">
            <summary>
            Enum which specifies the style for a SignatureAppearance.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.SignatureAppearanceStyle.TextOnly">
            <summary>
            The text will use all space. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.SignatureAppearanceStyle.ImageOnly">
            <summary>
            The image will use all space
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.SignatureAppearanceStyle.ImageAndText">
            <summary>
            On the left side an image will be placed, if no image is given an empty image is used.
            On the right side the text is placed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.SignatureAppearanceStyle.NameAndText">
            <summary>
            On the left side the name of the signer is used.
            On the right side the text is placed.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Widgets.SignatureWidget">
             <summary>
            A signature widget is a specialized widget.
             </summary>
             <remarks>
             You retrieve an existing Widget from the Widgets property of the Field class or Page class.
             </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.SignatureWidget.#ctor">
            <summary>
            Create a new PDF form field Signature Widget.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.SignatureWidget.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new PDF form field Signature Widget.
            </summary>
            <param name="left">The left position for this widget.</param>
            <param name="bottom">The bottom position for this widget.</param>
            <param name="width">The width for this widget.</param>
            <param name="height">The height for this widget.</param>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.SignatureWidget.SignedAppearance">
            <summary>
            The appearance settings that will be used during signing. 
            </summary>
            <remarks>
            Will be used if a signature handler is specified for the attached signature field only.
            Default value is <see langword="null"/>, meaning use factory defaults 
            (see <see cref="T:TallComponents.PDF.Annotations.Widgets.SignatureAppearance"/> class for details).
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.SignatureWidget.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Widgets.TopazSignature">
            <summary>
            A class representing a Topaz System Signature.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.TopazSignature.#ctor(System.String)">
            <summary>
            Create a new TopazSignature based on an existing sig string.
            </summary>
            <param name="sigStringHex">An unencrypted, uncompressed SIG string.</param>
            <remarks>
            This is the ascii hex string as returned by the GetSigString() method from the SigPlusNET library.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.TopazSignature.#ctor(System.IO.Stream)">
            <summary>
            Create a new TopazSignature based on an existing sig stream.
            </summary>
            <param name="sigStream">An unencrypted, uncompressed SIG string as stream.</param>
            <remarks>
            The caller is responsible for closing the
            stream. The stream should be kept open during the lifetime of the returned TopazSignature instance.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Widgets.Widget">
            <summary>
            A PDF form field Widget.  
            </summary>
            <remarks>
            You retrieve an existing Widget from the Widgets property of the Field class or Page class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.Widget.#ctor">
            <summary>
            Create a new PDF form field Widget.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.Widget.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new PDF form field Widget.
            </summary>
            <param name="left">The left position for this widget.</param>
            <param name="bottom">The bottom position for this widget.</param>
            <param name="width">The width for this widget.</param>
            <param name="height">The height for this widget.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.Widget.#ctor(TallComponents.PDF.Annotations.Widgets.Widget)">
            <summary>
            Create a new widget, based on an existing widget (used for cloning).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.Field">
            <summary>
            The associated Field.
            </summary>
            <remarks>
            <para>
            This property cannot be set.
            </para>
            Note that this property is updated if this widget is added to the WidgetCollection from a field.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.TextColor">
            <summary>
            The text color 
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.FontSize">
            <summary>
            The font size.
            </summary>
            <remarks>
            <para>For widgets connected to SignatureField this property is not used.</para> 
            <para>Setting this property is supported in classic PDF documents only.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.Font">
            <summary>
            The text font.
            </summary>
            <remarks>
            <para>For widgets connected to RadioButtons and CheckBoxes this property is not used.</para>
            <para>Setting this property is supported in classic PDF documents only.</para>
            <para>The EmbedMode of the font that is assigned should be Auto, Full or ReferenceOnly. All other cases will throw
            an InvalidOperationException.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.BorderColor">
            <summary>
            The color of the border of this widget.
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.BackgroundColor">
            <summary>
            The background color of this widget.
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            The supported colors are all derived device colors and <see langword="null"/> (transparent).
            </remarks> 
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.HorizontalAlignment">
            <summary>
            The horiontal text alignment 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.VerticalAlignment">
            <summary>
            The vertical text aligment 
            </summary>
            <remarks>
            Setting this property is supported in Xfa documents only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.Invisible">
            <summary>
            This annotation will not be visible in the pdf-viewer.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.Orientation">
            <summary>
            Orientation of this widget in degrees. Default is Rotate0.
            </summary>
            <remarks>
            <para>The orientation is relative to the page and specified counterclockwise.</para>
            <para>Setting this property is supported in classic PDF documents only.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.Persistency">
            <summary>
            The widget's persistency when this document is written.  
            </summary>
            <remarks>
            If a widget is flattened and the Value property for the related field is not set, 
            the field's default value will be used, if no default value is specified this widget is simply removed. 
            If the widget is flattened and the Value is set, appropriate content is drawn in place of this widget. 
            E.g. in case of a multiline text field, the  text is wrapped, formatted using the widget's and field's 
            font, font size, orientation, alignment, border and background color. 
            If a widget is not flattened, the widget and the related field is preserved and can still be filled out
            interactively. If a field is not flattened and the Value property is set, the corresponding value will
            be entered into the field.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.MouseEnterActions">
            <summary>
            The actions executed when a mouse/pointing device enters the widget.
            </summary>
            <remarks>
            <para>This property is supported in classic PDF documents only.</para>
            <para>In Xfa documents this property returns a readonly collection.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.MouseExitActions">
            <summary>
            The actions executed when a mouse/pointing device leaves the widget.
            </summary>
            <remarks>
            <para>This property is supported in classic PDF documents only.</para>
            <para>In Xfa documents this property returns a readonly collection.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.MouseDownActions">
            <summary>
            The actions executed when a mouse/pointing device goes down in the widget.
            </summary>
            <remarks>
            <para>This property is supported in classic PDF documents only.</para>
            <para>In Xfa documents this property returns a readonly collection.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.GotFocusActions">
            <summary>
            The actions executed when the widget recieves the input focus.
            </summary>
            <remarks>
            <para>This property is supported in classic PDF documents only.</para>
            <para>In Xfa documents this property returns a readonly collection.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.LostFocusActions">
            <summary>
            The actions executed when the widget loses the input focus.
            </summary>
            <remarks>
            <para>This property is supported in classic PDF documents only.</para>
            <para>In Xfa documents this property returns a readonly collection.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.MouseUpActions">
            <summary>
            The actions executed when a mouse/pointing device goes up.
            </summary>
            <remarks>
            <para>This property is supported in classic PDF documents only.</para>
            <para>In Xfa documents this property returns a readonly collection.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.Widget.widgetAnnotation">
            <summary>
            The base WidgetAnnotation wrapped in this class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.Widget.Flatten(TallComponents.PDF.Shapes.Canvas,System.Boolean)">
            <summary>
            Flatten the annotation as static content to the given canvas.
            </summary>
            <param name="canvas">The canvas to add the content.</param>
            <param name="reformat">Force this widget to re-format the content.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.Widget.UpdateAppearance">
            <summary>
            This updates the appearance of this widget.
            </summary>
            <remarks>
            You should call this function when you change at least one of the following items:
            <list type="bullet">
            <item>The format action in the connected Field (type must be ValueField).</item>
            <item>The JavaScript inside the format action.</item>
            <item>Document level JavaScript called by the format action.</item> 
            </list>
            <para>
            Note that this function is automatically called when you change any widget or annotation property or set a new ValueField.Value.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.Widget.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.Widget.ToString">
             <summary>
            Obtains the String representation of this instance.
             </summary>
             <returns>
            The friendly name of the Widget 
            </returns>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.Widget.TestOverflow(System.String)">
            <summary>
            Determines whether a given text will "overflow", i.e. whether scrolling is needed
            to display the entire text.
            </summary>
            <param name="text">The text that is to be fitted.</param>
            <returns>True if the text will cause an overflow. False if it can be displayed
            without scrolling.</returns>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Widgets.WidgetCollection">
            <summary>
            Collection of form widgets. Associated with a page and field
            </summary>
            <remarks>
            This collection is non-creatable and can be obtained through the Widgets property of both Page and Field. 
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Changed">
            <summary>
            Fired when this collection has changed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Item(System.Int32)">
            <summary>
            Retrieve a widget by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Count">
            <summary>
            Number of widgets.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Contains(TallComponents.PDF.Annotations.Widgets.Widget)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Annotations.Widgets.Widget"/> is in the <see cref="T:TallComponents.PDF.Annotations.Widgets.WidgetCollection"/>.
            </summary>
            <param name="widget">The <see cref="T:TallComponents.PDF.Annotations.Widgets.Widget"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Annotations.Widgets.Widget"/> is found in this <see cref="T:TallComponents.PDF.Annotations.Widgets.WidgetCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="widget"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="widget"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.IndexOf(TallComponents.PDF.Annotations.Widgets.Widget)">
            <summary>
            Returns the index of the specified widget in the collection.
            </summary>
            <param name="widget">The widget to locate in this collection.</param>
            <returns>The zero-based index of the item found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Add(TallComponents.PDF.Annotations.Widgets.Widget)">
            <summary>
            Add a widget to the end of this collection.
            </summary>
            <param name="widget">The widget to add.</param>
            <returns>
            The zero-based index where the widget is added.
            </returns>
            <remarks>
            Note that this collection can be associated with a page or a field, the page or field property on the added widget
            will be updated to this association.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Remove(TallComponents.PDF.Annotations.Widgets.Widget)">
            <summary>
            Removes the given widget from this collection.
            </summary>
            <param name="widget">The widget to remove.</param>
            <returns>true if removing the widgets succeeded.</returns>
            <remarks>
            Note that this collection can be associated with a page or a field, the page or field property on the added widget
            will be updated to this association.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.AddRange(TallComponents.PDF.Annotations.Widgets.Widget[])">
            <summary>
            Adds the elements of an array of widgets to the end of the collection.
            </summary>
            <param name="widgetAnnotations">The array of widgets to be addded to the end of the collection.</param>
            <remarks>
            <para>
            <paramref name="widgetAnnotations"/> does not accept a <see langword="null"/> as a valid value. 
            </para>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="widgetAnnotations"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">(At least) one of the entries in the given <paramref name="widgetAnnotations"/> is already in this collection. 
            (Duplicate <see cref="T:TallComponents.PDF.Annotations.Widgets.Widget"/>)</exception>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Insert(System.Int32,TallComponents.PDF.Annotations.Widgets.Widget)">
            <summary>
            Insert an widget at the specified index.
            </summary>
            <param name="index">The zero-based index of the widget after insertion.</param>
            <param name="widget">The widget to insert.</param>
            <remarks>
            Note that this collection can be associated with a page or a field, the page or field property on the added widget
            will be updated to this association.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.validateTypes(TallComponents.PDF.Forms.Fields.Field,TallComponents.PDF.Annotations.Widgets.Widget)">
            <summary>
            Check if the widget is the correct type for the field (and visa-versa)
            </summary>
            <param name="field">The field.</param>
            <param name="widget">The widget.</param>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a widget at the specified index.
            </summary>
            <param name="index">The zero-based index of the widget to remove.</param>
            <remarks>Removing a widget at a non-existing index is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Clear">
            <summary>
            Removes all widgets from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Annotations.Widgets.WidgetCollection.Accept(TallComponents.PDF.Annotations.AnnotationVisitor,System.Object)">
            <summary>
            Accept this annotation for all items in the collection.
            </summary>
            <param name="visitor">The vistor used to Accept this annotation.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Annotations.Widgets.WidgetPersistency">
            <summary>
            The persistency for a widget
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.WidgetPersistency.Leave">
            <summary>
            The widget will be present in the target document, with the updated properties
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.WidgetPersistency.Flatten">
            <summary>
            Remove the widget from the document so it can no longer be manipulated, but the appearance is 
            added as static content.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Annotations.Widgets.WidgetPersistency.Remove">
            <summary>
            Remove the widget from the document. 
            </summary>
            <remarks>
            The appearance will not be added as static content. 
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Compression">
            <summary>
            Compression types for Image and ImageShape.
            </summary>
            <remarks>
            Note that not all compressions are supported for all image formats. 
            If this is the case, the image will be written in it's native format
            or compressed using Zip if it's an uncompressed image format.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Shapes.Compression.Zip">
            <summary>
            Lossless compression.
            </summary>
            <remarks>
            This compression is also known as flate.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Shapes.Compression.Jpeg">
            <summary>
            Lossy compression.
            </summary>
            <remarks>
            This compression is also known as DCT.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Shapes.Compression.Auto">
            <summary>
            Use source image compression or Zip if uncompressed.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.FragmentReadDirection">
            <summary>
            Different read directions for text.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.FragmentReadDirection.LeftToRight">
            <summary>
            Text is read from left to right.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.FragmentReadDirection.RightToLeft">
            <summary>
            Text is read from right to left (e.g. Arabic).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.FragmentReadDirection.InheritFromParent">
            <summary>
            The direction of the parent is used.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.PageBoundary">
            <summary>
            The box which should be used as outline for the page.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.PageBoundary.Default">
            <summary>
            The dimensions of the intersection of the media box and the crop box. 
            If the crop box is not present, the visible box is set to the media box.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.PageBoundary.MediaBox">
            <summary>
            The boundaries of the physical medium on which the page is intended to be displayed or printed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.PageBoundary.CropBox">
            <summary>
            The visible region. When the page is displayed or printed, its contents are to be clipped (cropped).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.PageBoundary.BleedBox">
            <summary>
            The region to which the contents of the page should be clipped when output in a production environment.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.PageBoundary.TrimBox">
            <summary>
            The intended dimensions of the finished page after trimming.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.PageBoundary.ArtBox">
            <summary>
            The extent of the page’s meaningful content (including potential white space) as intended by the page’s creator.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.TextFlowException">
            <summary>
            The exception that is thrown when a text flow constraint cannot be satisfied.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TextFlowException.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:TallComponents.PDF.Shapes.ContextFieldsReplacer">
            <summary>
            Implementation of context field replacement.
            </summary>
            <remarks>This implementation derives implements both IReplacer and Context. Context is used in TallPDF4. IReplacer is the
            old interface that is used in TallPDF3. This implementation is just a way to bridge the gap between Tall 3 and 4 without
            having to use too many ifdefs in the code. It should be removed when support for Tall 3 ends.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ContextFieldsReplacer.Replace(System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="text">For internal use only.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="F:TallComponents.PDF.Shapes.ContextFieldsReplacer.EscapeRegexp">
            <summary>
            Escape replacment symbol
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.ContextFieldsReplacer.TempReplaceString">
            <summary>
            First temp escape char sequence.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.ContextFieldsReplacer.TempReplaceString1">
            <summary>
            Second temp escape char sequence
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ContextFieldsReplacer.PrepareReplacement(System.String)">
            <summary>
            Prepares the replacement.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ContextFieldsReplacer.ReturnEscapeCharacters(System.String)">
            <summary>
            Returns the escape characters.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ContextFieldsReplacer.MatchEvaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Matches the evaluator.
            </summary>
            <param name="match">The match.</param>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Fragment">
            <summary>
            The fragment class represents a piece of text as part of a multiline text shape.
            </summary>
            <remarks>
            All text of a fragment is typeset equally.
            Fragments allow to contain pieces of text with different <see cref="P:TallComponents.PDF.Shapes.Fragment.Font">font</see> and <see cref="P:TallComponents.PDF.Shapes.Fragment.TextColor">color</see>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Fragment.TallComponents#PDF#Shapes#ITextWidthCalculator#GetWidth(System.Char)">
            <summary>
            For internal use only.
            </summary>
            <param name="c">For internal use only.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Fragment.TallComponents#PDF#Shapes#ITextWidthCalculator#GetWidth(System.String)">
            <summary>
            For internal use only.
            </summary>
            <param name="s">For internal use only.</param>
            <returns>For internal use only.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Fragment.GetTabSize">
            <summary>
            For internal use only.
            </summary>
            <returns>For internal use only.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Fragment.#ctor">
            <summary>
            Initializes a new empty instance of the Fragment class.
            </summary>
            <remarks>
            Create a new empty fragment with default properties.
            The default font is Helvetica at 12pt.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Fragment.#ctor(System.String)">
            <summary>
            Initialize a new instance of the Fragment class with given content.
            </summary>
            <remarks>
            Create a new fragment with given text.
            The default font is Helvetica at 12pt.
            </remarks>
            <param name="text">Content.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Fragment.#ctor(System.String,TallComponents.PDF.Fonts.Font)">
            <summary>
            Initialize a new instance of the Fragment class with given content and font.
            </summary>
            <remarks>
            Create a fragment with given text and font.
            The default font size is 12pt.
            </remarks>
            <param name="text">Content.</param>
            <param name="font">Font.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Fragment.#ctor(System.String,System.Double)">
            <summary>
            Initialize a new instance of the Fragment class with given content and fontsize.
            </summary>
            <remarks>
            Create a fragment with given text and fractional font size.
            The default font is Helvetica.
            </remarks>
            <param name="text">Content.</param>
            <param name="fontSize">Font size.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Fragment.#ctor(System.String,TallComponents.PDF.Fonts.Font,System.Double)">
            <summary>
            Initialize a new instance of the Fragment class with given content, font and fontsize.
            </summary>
            <remarks>
            Create a fragment with given text, font and fractional font size.
            </remarks>
            <param name="text">Content.</param>
            <param name="font">Font.</param>
            <param name="fontSize">Font size.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.Text">
            <summary>
            Get or set the content of this fragment.
            </summary>
            <remarks>
            <para>By default all whitespace characters (tabs, spaces and newlines) will be removed.
            To render pre-formatted text set <see cref="P:TallComponents.PDF.Shapes.Fragment.PreserveWhiteSpace">PreserveWhiteSpace</see> to true.
            </para>
            <para>
            Use <see cref="P:TallComponents.PDF.Shapes.Fragment.SuppressSpaceBefore">SuppressSpaceBefore</see> to prevent a space from being inserted before this fragment.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.Bold">
            <summary>
            Get or set if the text appears bold.
            </summary>
            <remarks>Note that the boldness is simulated by using a thicker stroke.
            It is preferrable to use a bold font if possible. E.g. use arialbd.ttf for bold Arial and arial.ttf for
            regular Arial. This property is ignored if applied to a Bold font.
            <seealso cref="P:TallComponents.PDF.Shapes.Fragment.Italic"/>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.Italic">
            <summary>
            Get or set if the text appears italic.
            </summary>
            <remarks>
            Note that the italicness is simulated by skewing the text slightly.
            It is preferrable to use an italic font if possible. E.g. use ariali.ttf for italic Arial and arial.ttf for
            regular Arial. This property is ignored if applied to an Italic font.
            <seealso cref="P:TallComponents.PDF.Shapes.Fragment.Bold"/>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Fragment.DetermineReadDirection(TallComponents.PDF.ReadDirection)">
            <summary>
            Get the readdirection for the fragments words.
            </summary>
            <remarks>
            If the read direction for the fragment has been specified the assigned value
            is used. If the direction is set to "InheritFromParagraph" (Default) the paragraph's flow
            direction is used.
            </remarks>
            <param name="flowDirectionParagraph">The flow direction from the paragraph.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.ReadDirection">
            <summary>
            Get or set the direction of the text fragment.
            </summary>
            <remarks>
            If the read direction is set to "Default" the read direction of the
            MultilineTextShape is used. The default value is "Default".
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.KeepWithNext">
            <summary>
            Get or set if the next fragment is started on the same line as this fragment.
            </summary>
            <remarks>
            Make sure this fragment always appears on the same line as the
            next fragment.
            A fragment that has keep with next set will not break across lines.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.FontSize">
            <summary>
            Font size in points. Fontsize 0 will autosize when the fragment is single
            in a MultilineTextShape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.Font">
            <summary>
            The font for this fragment. You can use one of the 14 standard PDF fonts or a TrueType font.
            </summary>
            <example>
            C#
            <code>
              myFragment.Font = Font.Helvetica;
            </code>
            </example>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.PreserveWhiteSpace">
            <summary>
            Preserve spaces, tabs (\t), carriage returns (\r) and line feeds (\n).
            Set this property to true to include preformatted text like code fragments.
            </summary>
            <remarks>
            <para>
            Fragments that have PreserveWhiteSpace set to true cannot be Justified because justification
            modifies the whitespace between words.
            </para>
            <para>
            Use <see cref="P:TallComponents.PDF.Shapes.Fragment.TabSize">TabSize</see> to set the width of tabs in spaces.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.TrimStartOfLine">
            <summary>
            If PreserveWhiteSpace is true, for each (see remarks) line the leading whitespaces will be removed.
            </summary>
            <remarks>
            The first line, from the container this fragment is used in, will not be trimmed.
            Also the first line after a carriage return will not be trimmed.
            <para>
            So basically only the lines that are automatically broken by this component (due to the fact that there is no more space left on the current line to place the characters)
            will be trimmed.
            </para>
            <para>
            Meaningless when PreserveWhiteSpace is false.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.TabSize">
            <summary>
            If PreserveWhiteSpace is true, each tab character (\t) is replaced by
            TabSize number of spaces. Default is 3.
            </summary>
            <remarks>
            Meaningless when PreserveWhiteSpace is false.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.SuppressSpaceBefore">
            <summary>
            Suppress the insertion of an extra space between two successive fragments.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.StrikeOut">
            <summary>
            Get or set if the fragment is rendered striked out.
            </summary>
            <seealso cref="P:TallComponents.PDF.Shapes.Fragment.DoubleUnderline"/>
            <seealso cref="P:TallComponents.PDF.Shapes.Fragment.Underline"/>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.Underline">
            <summary>
            Get or set if the fragment is rendered with an underline.
            </summary>
            <seealso cref="P:TallComponents.PDF.Shapes.Fragment.DoubleUnderline"/>
            <seealso cref="P:TallComponents.PDF.Shapes.Fragment.StrikeOut"/>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.DoubleUnderline">
            <summary>
            Get or set if the fragment is rendered with a double underline.
            </summary>
            <seealso cref="P:TallComponents.PDF.Shapes.Fragment.Underline"/>
            <seealso cref="P:TallComponents.PDF.Shapes.Fragment.StrikeOut"/>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.Overline">
            <summary>
            Get or set if the fragment is rendered with an overline.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.TextColor">
            <summary>
            Get or set the color of the text and decoration, see remarks
            </summary>
            <remarks>
            <para>
            This is a derived property, the real storage will be the Brush and Pen
            Setting this property will clear the Pen and set the Brush property to a solid brush, with the specified color.
            When getting this property this property returns a color when the pen is null and the brush is a solid brush only,
            otherwise null will be returned
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.Pen">
            <summary>
            Used to draw the curves on this text. (default = null)
            </summary>
            <remarks>
            You can use a pen to draw outlines. (most likely you want to set Brush = null).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.Brush">
            <summary>
            The brush that is used to fill this text. (default = Black - SolidBrush)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.Superscript">
            <summary>
            Get or set if the fragment is rendered as superscript.
            </summary>
            <seealso cref="P:TallComponents.PDF.Shapes.Fragment.Subscript"/>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.Subscript">
            <summary>
            Get or set if the fragment is rendered as subscript.
            </summary>
            <seealso cref="P:TallComponents.PDF.Shapes.Fragment.Superscript"/>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.VerticalAlign">
            <summary>
            Gets or sets the vertical align.
            </summary>
            <value>
            The vertical align.
            </value>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.Background">
            <summary>
            Get or set the brush that is used to paint the background of the fragment.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.Border">
            <summary>
            Get or set the border around this content element.
            Default is null, meaning that there is no border.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Fragment.Clone">
            <summary>
            Clones a Fragment.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Fragment.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Fragment
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.Actions">
            <summary>
            The actions that the PDF reader will execute when this link is clicked.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.IsLink">
            <summary>
            True if <see cref="P:TallComponents.PDF.Shapes.Fragment.Actions">Actions</see> holds one or more actions.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Fragment.ShowLinkBorder">
            <summary>
            If true a black 1pt outline is drawn around the clickable area of the link.
            </summary>
            <remarks>Default value is false.</remarks>
            <example>
            XML
            <code>
              &lt;paragraph type="textparagraph"&gt;
                 &lt;fragment textcolor="blue" showlinkborder="true"&gt;
                    &lt;action type="uriaction" uri="http://www.tallcomponents.com"/ &gt;
                    Visit TallComponents online.
                 &lt;/fragment&gt;
              &lt;/paragraph&gt;
            </code>
            </example>
        </member>
        <member name="T:TallComponents.PDF.Shapes.FragmentCollection">
            <summary>
            Collection of fragment objects.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FragmentCollection.#ctor">
            <summary>
            Create a new empty collection of fragments.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FragmentCollection.Add(TallComponents.PDF.Shapes.Fragment)">
            <summary>
            Add an existing fragment to this collection.
            </summary>
            <param name="fragment">Add this fragment.</param>
            <exception cref="T:System.ArgumentNullException">A given <paramref name="fragment"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FragmentCollection.Remove(TallComponents.PDF.Shapes.Fragment)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Shapes.Fragment">Fragment</see> from this <see cref="T:TallComponents.PDF.Shapes.FragmentCollection">FragmentCollection</see>.
            </summary>
            <param name="fragment">The fragment to remove.</param>
            <remarks>
            The <paramref name="fragment"/> does not accept a <see langword="null"/> as a valid value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="fragment"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FragmentCollection.AddRange(TallComponents.PDF.Shapes.FragmentCollection)">
            <summary>
            Adds the elements of a FragmentCollection to the end of this collection.
            </summary>
            <param name="fragments">The FragmentCollection whose elements should be added to
            the end of the collection.
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para></param>
            <exception cref="T:System.ArgumentNullException">The given FragmentCollection is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FragmentCollection.AddRange(TallComponents.PDF.Shapes.Fragment[])">
            <summary>
            Adds the elements of an array of fragments to the end of this collection.
            </summary>
            <remarks>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="fragments">The array of fragments whose elements should be added to
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given array is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FragmentCollection.Clear">
            <summary>
            Removes all fragments from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FragmentCollection.Contains(TallComponents.PDF.Shapes.Fragment)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Shapes.Fragment">Fragment</see> is in the <see cref="T:TallComponents.PDF.Shapes.FragmentCollection">FragmentCollection</see>.
            </summary>
            <param name="fragment">The <see cref="T:TallComponents.PDF.Shapes.Fragment"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Shapes.Fragment"/> is found in this <see cref="T:TallComponents.PDF.Shapes.FragmentCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="fragment"/> does not accept a <see langword="null"/> as a valid value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="fragment"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FragmentCollection.IndexOf(TallComponents.PDF.Shapes.Fragment)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Shapes.Fragment">Fragment</see> in the <see cref="T:TallComponents.PDF.Shapes.FragmentCollection">FragmentCollection</see>.
            </summary>
            <param name="fragment">The <see cref="T:TallComponents.PDF.Shapes.Fragment"/> to locate in the <see cref="T:TallComponents.PDF.Shapes.FragmentCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Shapes.Fragment"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FragmentCollection.Insert(System.Int32,TallComponents.PDF.Shapes.Fragment)">
            <summary>
            Insert an <see cref="T:TallComponents.PDF.Shapes.Fragment"/> on a specific place in this <see cref="T:TallComponents.PDF.Shapes.FragmentCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Shapes.Fragment"/> should be inserted.</param>
            <param name="fragment">The <see cref="T:TallComponents.PDF.Shapes.Fragment"/> to be insert.</param>
            <remarks>
            The <paramref name="fragment"/> does not accept a <see langword="null"/> as a valid value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="fragment"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FragmentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Shapes.Fragment">Fragment</see> from the <see cref="T:TallComponents.PDF.Shapes.FragmentCollection">FragmentCollection</see> at the specified index.
            </summary>
            <param name="index">The zero-based index from the <see cref="T:TallComponents.PDF.Shapes.Fragment"/> to be removed.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FragmentCollection.Count">
            <summary>
            Number of fragment objects in this collecion.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FragmentCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FragmentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FragmentCollection.Item(System.Int32)">
            <summary>
            0-based indexer that returns the fragments at the specified position.
            Returns <see langword="null"/> if index is invalid.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FragmentCollection.Clone">
            <summary>
            Clones a FragmentCollection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FragmentCollection.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a FragmentCollection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FragmentCollection.AnnotationList">
            <summary>
            Returns the annotations for this fragment
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FragmentCollection.IPatternList">
            <summary>
            Returns the patterns for this fragment
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FragmentCollection.TextFieldMode">
            <summary>
            We need to set the Shape in 'special' mode, because acrobat dispays text different then we do.
            However we do not want to change it for all text we display.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FragmentCollection.FireLineBreak(TallComponents.PDF.Shapes.Fragment,TallComponents.PDF.Shapes.LineBreakEventArgs)">
            <summary>
            The function that will fire the assigned events for breaking words on line end.
            </summary>
            <param name="sender">The fragment (sender) that has a word that needs to be broken.</param>
            <param name="args">The event arguments that have to be updated to facilitate word breaking.</param>
        </member>
        <member name="E:TallComponents.PDF.Shapes.FragmentCollection.LineBreak">
            <summary>
            Will be fired when a word has to be broken.
            </summary>
            <remarks>Events have to be set (forwarded) in the owning object (TextParagraph, ML-TextShape)</remarks>
        </member>
        <member name="T:TallComponents.PDF.Shapes.HyphenatorResult">
            <summary>
            Returned by IHyphenator.GetNext.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.HyphenatorResult.text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.HyphenatorResult.width">
            <summary>
            The width in points needed to render the text.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.HyphenatorResult.forceLineBreakAfter">
            <summary>
            True if a new line should be started after the text is rendered.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.HyphenatorResult.isWhiteSpace">
            <summary>
            True if it is white space.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.HyphenatorResult.jumpToNextTabStop">
            <summary>
            True if text is followed by a tab. Caller should append text and then jump to the next tab stop.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.HyphenatorResult.spaceCount">
            <summary>
            The number of spaces in the text.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.ITextWidthCalculator">
            <summary>
            For internal usage only. 
            </summary>
            <remarks>
            Do not use this interface in your code
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ITextWidthCalculator.GetWidth(System.Char)">
            <summary>
            Calculate the width of a single character.
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ITextWidthCalculator.GetWidth(System.String)">
            <summary>
            Calculate the width of a string.
            </summary>
            <remarks>Also performs glyph substitution to compensate for ligatures.</remarks>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ITextWidthCalculator.GetTabSize">
            <summary>
            The tab size expressed in spaces.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.LineBreakContainer">
            <summary>
            Class that is used to hold the line break info.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LineBreakContainer.#ctor(TallComponents.PDF.Shapes.Fragment)">
            <summary>
            The container that is used to determine word breaking positions.
            </summary>
            <param name="owner">The fragment that holds (creates) this container.</param>
        </member>
        <member name="E:TallComponents.PDF.Shapes.LineBreakContainer.LineBreakEventHandler">
            <summary>
            The event handlers for this event.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LineBreakContainer.HandleEvent(TallComponents.PDF.Shapes.LineBreakEventArgs)">
            <summary>
            Handler that triggers the LineBreak event.
            </summary>
            <remarks>As sender of the event the owner (parent) of the container is used...</remarks>
            <param name="args">arguments that have to be supplied with the event.</param>
        </member>
        <member name="T:TallComponents.PDF.Shapes.LineBreakEventArgs">
            <summary>
            Class containing data for LineBreak events.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.LineBreakEventArgs.Word">
            <summary>
            Get the word that has to be broken into part.
            </summary>
            <remarks>The remainder part will be placed on the next line.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.LineBreakEventArgs.BreakAt">
            <summary>
            The 0-based position at which the word will be broken into parts.
            </summary>
            <remarks>
            By default this value will be set the the default behavior.
            <para>Example: BreakAt=4 on 'WordBreak' results in 'Word'-'Break'.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.LineBreakEventArgs.BreakBefore">
            <summary>
            The position before which the word has to be broken.
            </summary>
            <remarks>
            <para>The value returned will depend if a hyphen has to be inserted.</para>
            <para>The BreakAt must be set before or at this value.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.LineBreakEventArgs.InsertHyphen">
            <summary>
            Get or set if a hyphen has to be inserted.
            </summary>
            <remarks>If the current breaking position has become invalid, it will be re-positioned 
            to the initial position.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.LineBreakEventArgs.HyphenChar">
            <summary>
            Get or set the character to insert on the breaking position.
            </summary>
            <remarks>The hyphen will only be inserted if <seealso cref="P:TallComponents.PDF.Shapes.LineBreakEventArgs.InsertHyphen"/> has been set to true.</remarks>
        </member>
        <member name="T:TallComponents.PDF.Shapes.LineBreakEventHandler">
            <summary>
            Represents the method that handles LineBreak events.
            </summary>
            <param name="sender">The fragment the word has to be broken for.</param>
            <param name="args">The LineBreak event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Shapes.LineBreakFragment">
            <summary>
            Insert this fragment to force a line break.
            </summary>
            <remarks>
            Any text added to this fragment is ignored.
            </remarks>
            <example>
            XML
            <code>
            &lt;paragraph type="TextParagraph"&gt;
              &lt;fragment&gt;First Line&lt;/fragment&gt;
              &lt;fragment type="LineBreakFragment" /&gt;
              &lt;fragment&gt;Second Line&lt;/fragment&gt;
            &lt;/paragraph&gt;
            </code>
            </example>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LineBreakFragment.#ctor">
            <summary>
            Create a new line break fragment.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.PreserveWhiteSpaceHyphenator">
            <summary>
            Summary description for PreserverWhiteSpaceHyphenator.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.PreserveWhiteSpaceHyphenator.canNotBreak(System.Char,System.Char)">
            <summary>
            Checks if the line may be broken
            </summary>
            <param name="current">current character</param>
            <param name="last">previous character</param>
            <returns>false if either parameter is a whitespace, true if both are 'printable' characters</returns>
        </member>
        <member name="P:TallComponents.PDF.Shapes.PreserveWhiteSpaceHyphenator.LineBreakContainer">
            <summary>
            The container that will handle line breaking
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.TabStop">
            <summary>
            A tab stop defines a point at which text continues after a tab character.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TabStop.#ctor">
            <summary>
            Create a new tab stop. Position is 0.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TabStop.#ctor(System.Double)">
            <summary>
            Create a new tab stop.
            </summary>
            <param name="position">The position of this tab stop.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TabStop.Position">
            <summary>
            The position of this tab stop measured from the left edge in points.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.TabStopCollection">
            <summary>
            Collection of tab stops.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TabStopCollection.Add(TallComponents.PDF.Shapes.TabStop)">
            <summary>
            Add a new tab stop.
            </summary>
            <param name="tabStop">Add this tab stop.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TabStopCollection.Add(System.Double)">
            <summary>
            Add a new tab stop.
            </summary>
            <param name="position">Position of new tab stop.</param>
            <returns>New tab stop.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TabStopCollection.Clear">
            <summary>
            Clear this collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TabStopCollection.Count">
            <summary>
            Number of tab stops.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TabStopCollection.Item(System.Int32)">
            <summary>
            Get a tabstop by 0-based index.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TextLine.AddAnnotation(TallComponents.PDF.Base.Annotations.Annotation)">
            <summary>
            Adds an annotation to the list.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TextLine.AddPattern(TallComponents.PDF.Base.Graphics.Patterns.IPattern)">
            <summary>
            Adds a pattern to the list.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TextLine.fixate(TallComponents.PDF.Base.Graphics.Content)">
            <summary>
            Now that the exact position of this textline is known, we can
            set the exact positions of all annotations that are associated
            with this line.
            </summary>
            <param name="content">Graphical content stream</param>
            <returns>Generation result with eg annotation data</returns>
        </member>
        <member name="P:TallComponents.PDF.Shapes.WhiteSpaceHyphenator.LineBreakContainer">
            <summary>
            The container that will handle word breaking
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Annotations.AnnotationShape">
            <summary>
            Used to position an existing annotation in a layer or shape collection.
            </summary>
            <remarks>
            You should use the AnnotationShape in ShapeCollections with 90-degree rotations (0, 90, 180 and 270) only.
            <param>
            If the Annotation is a Widget the FontSize will be changed automatically when VirtualHeight is set
            (which implies a coordinate system transformation).
            </param>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Annotations.AnnotationShape.#ctor">
            <summary>
            Create a new AnnotationShape on position 0,0.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Annotations.AnnotationShape.#ctor(System.Double,System.Double,TallComponents.PDF.Annotations.Annotation)">
            <summary>
            Creates a new AnnotationShape with given startpoint.
            </summary>
            <param name="x">X-position of the lower-left corner.</param>
            <param name="y">Y-position of the lower-left corner.</param>
            <param name="annotation">The annotation you want to place.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Annotations.AnnotationShape.#ctor(TallComponents.PDF.Annotations.Annotation)">
            <summary>
            Creates a new AnnotationShape with given annotation.
            </summary>
            <param name="annotation">The annotation you want to place.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Annotations.AnnotationShape.Annotation">
            <summary>
            The Annotation to replace.
            </summary>
            <remarks>
            The X and Y properties in this shape will be mapped to the Left and Bottom properties
            for the given annotation.
            <para>
            You should add the annotation to the page.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Annotations.AnnotationShape.X">
            <summary>
            Get the Left position of the annotation, or 0 if nu annotation is connected.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Annotations.AnnotationShape.Y">
            <summary>
            Get the Bottom position of the annotation, or 0 if nu annotation is connected.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.ArcShape">
            <summary>
            An arc shape is a segment of an ellipse outline. It has a center, a horizontal
            and vertical radi and it has a start and sweep angle.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ArcShape.#ctor">
            <summary>
            Create a new ArcShape. 
            </summary>
            <remarks>
            With a default radiusX and radiusY from 50.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius.
            </summary>
            <param name="centerX">X-position of the center of the arc.</param>
            <param name="centerY">Y-position of the center of the arc.</param>
            <param name="radiusX">Horizontal radius.</param>
            <param name="radiusY">Vertical radius.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen)">
            <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
            <param name="centerX">X-position of the center of the arc.</param>
            <param name="centerY">Y-position of the center of the arc.</param>
            <param name="radiusX">Horizontal radius.</param>
            <param name="radiusY">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the arc.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,TallComponents.PDF.Brushes.Brush)">
            <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
            <param name="centerX">X-position of the center of the arc.</param>
            <param name="centerY">Y-position of the center of the arc.</param>
            <param name="radiusX">Horizontal radius.</param>
            <param name="radiusY">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the arc.</param>
            <param name="brush">The brush that is used to fill this shape if closed.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius, start and sweep angle.
            </summary>
            <param name="centerX">X-position of the center of the arc.</param>
            <param name="centerY">Y-position of the center of the arc.</param>
            <param name="radiusX">Horizontal radius.</param>
            <param name="radiusY">Vertical radius.</param>
            <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
            <param name="sweep">Sweep angle, counter-clockwise.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,System.Double,System.Double)">
            <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
            <param name="centerX">X-position of the center of the arc.</param>
            <param name="centerY">Y-position of the center of the arc.</param>
            <param name="radiusX">Horizontal radius.</param>
            <param name="radiusY">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the arc.</param>
            <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
            <param name="sweep">Sweep angle, counter-clockwise.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ArcShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,TallComponents.PDF.Brushes.Brush,System.Double,System.Double)">
            <summary>
            Create a new ArcShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
            <param name="centerX">X-position of the center of the arc.</param>
            <param name="centerY">Y-position of the center of the arc.</param>
            <param name="radiusX">Horizontal radius.</param>
            <param name="radiusY">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the arc.</param>
            <param name="brush">The brush that is used to fill this shape if closed.</param>
            <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
            <param name="sweep">Sweep angle, counter-clockwise.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ArcShape.Start">
            <summary>
            Start angle (0 corresponds to 3 o-clock).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ArcShape.Sweep">
            <summary>
            Sweep angle, counter-clockwise.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ArcShape.CenterX">
            <summary>
            X-position of the center of the arc.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ArcShape.CenterY">
            <summary>
            Y-position of the center of the arc.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ArcShape.RadiusX">
            <summary>
            Horizontal radius.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ArcShape.RadiusY">
            <summary>
            Vertical radius.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ArcShape.StartX">
            <summary>
            Calculated horizontal position of the start point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ArcShape.StartY">
            <summary>
            Calculated vertical position of the start point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ArcShape.EndX">
            <summary>
            Calculated horizontal position of the end point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ArcShape.EndY">
            <summary>
            Calculated vertical position of the end point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper">
            Generates the 2D barcode PDF417. Supports dimensioning auto-sizing, fixed
            and variable sizes, automatic and manual error levels, raw codeword input,
            codeword size optimization and bitmap inversion. 
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.#ctor">
            Creates a new <CODE>PDF417BarCodeHelper</CODE> with the default settings. 
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.MacroSegmentId">
            Sets the segment id for macro PDF417 encoding
            @param id the id (starting at 0)
            @see #setMacroSegmentCount(int)
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.MacroSegmentCount">
            Sets the segment count for macro PDF417 encoding
            @param cnt the number of macro segments
            @see #setMacroSegmentId(int)
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.MacroFileId">
            Sets the File ID for macro PDF417 encoding 
            @param id the file id
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.SetDefaultParameters">
            Set the default settings that correspond to <CODE>PDF417_USE_ASPECT_RATIO</CODE>
            and <CODE>PDF417_AUTO_ERROR_LEVEL</CODE>.
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.PaintCode">
            Paints the barcode. If no exception was thrown a valid barcode is available. 
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.OutBits">
            Gets the raw image bits of the barcode. The image will have to
            be scaled in the Y direction by <CODE>yHeight</CODE>.
            @return The raw barcode image
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.BitColumns">
            Gets the number of X pixels of <CODE>outBits</CODE>.
            @return the number of X pixels of <CODE>outBits</CODE>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.CodeRows">
            Gets the number of Y pixels of <CODE>outBits</CODE>.
            It is also the number of rows in the barcode.
            @return the number of Y pixels of <CODE>outBits</CODE>
            Sets the number of barcode rows. This number may be changed
            to keep the barcode valid.
            @param codeRows the number of barcode rows
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.CodeColumns">
            Sets the number of barcode data columns.
            This number may be changed to keep the barcode valid.
            @param codeColumns the number of barcode data columns
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.Codewords">
            Gets the codeword array. This array is always 928 elements long.
            It can be writen to if the option <CODE>PDF417_USE_RAW_CODEWORDS</CODE>
            is set.
            @return the codeword array
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.LenCodewords">
            Sets the length of the codewords.
            @param lenCodewords the length of the codewords
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.ErrorLevel">
            Gets the error level correction used for the barcode. It may different
            from the previously set value.
            @return the error level correction used for the barcode
            Sets the error level correction for the barcode.
            @param errorLevel the error level correction for the barcode
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.Text">
            Sets the bytes that form the barcode. This bytes should
            be interpreted in the codepage Cp437.
            @param text the bytes that form the barcode
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.SetText(System.String)">
            Sets the text that will form the barcode. This text is converted
            to bytes using the encoding Cp437.
            @param s the text that will form the barcode
            @throws UnsupportedEncodingException if the encoding Cp437 is not supported
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.Options">
            Sets the options to generate the barcode. This can be all
            the <CODE>PDF417_*</CODE> constants.
            @param options the options to generate the barcode
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.AspectRatio">
            Sets the barcode aspect ratio. A ratio or 0.5 will make the
            barcode width twice as large as the height.
            @param aspectRatio the barcode aspect ratio
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.YHeight">
            Sets the Y pixel height relative to X. It is usually 3.
            @param yHeight the Y pixel height relative to X
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_USE_ASPECT_RATIO">
            Auto-size is made based on <CODE>aspectRatio</CODE> and <CODE>yHeight</CODE>. 
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_FIXED_RECTANGLE">
            The size of the barcode will be at least <CODE>codeColumns*codeRows</CODE>. 
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_FIXED_COLUMNS">
            The size will be at least <CODE>codeColumns</CODE>
            with a variable number of <CODE>codeRows</CODE>.
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_FIXED_ROWS">
            The size will be at least <CODE>codeRows</CODE>
            with a variable number of <CODE>codeColumns</CODE>.
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_AUTO_ERROR_LEVEL">
            The error level correction is set automatically according
            to ISO 15438 recomendations.
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_USE_ERROR_LEVEL">
            The error level correction is set by the user. It can be 0 to 8. 
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_FORCE_BINARY">
            One single binary segment is used
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_USE_RAW_CODEWORDS">
            No <CODE>text</CODE> interpretation is done and the content of <CODE>codewords</CODE>
            is used directly.
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_INVERT_BITMAP">
            Inverts the output bits of the raw bitmap that is normally
            bit one for black. It has only effect for the raw bitmap.
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.PDF417_USE_MACRO">
            Use Macro PDF417 Encoding
            @see #setMacroFileId(String)
            @see #setMacroSegmentId(int)
            @see #setMacroSegmentCount(int)
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.outBits">
            Holds value of property outBits. 
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.bitColumns">
            Holds value of property bitColumns. 
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.codeRows">
            Holds value of property codeRows. 
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.codeColumns">
            Holds value of property codeColumns. 
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.codewords">
            Holds value of property codewords. 
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.lenCodewords">
            Holds value of property lenCodewords. 
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.errorLevel">
            Holds value of property errorLevel. 
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.text">
            Holds value of property text. 
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.options">
            Holds value of property options. 
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.aspectRatio">
            Holds value of property aspectRatio. 
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.PDF417BarCodeHelper.yHeight">
            Holds value of property yHeight. 
        </member>
        <member name="T:TallComponents.PDF.Shapes.Barcodes.BarcodeShape">
            <summary>
            Abstract base class of all barcode shapes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.#ctor">
            <summary>
            Creates a new bar code shape. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.#ctor(System.String)">
            <summary>
            Creates a new bar code shape. 
            </summary>
            <param name="data">The data that is represented by this barcode.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.Data">
            <summary>
            The data that is represented by this barcode.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.Display">
            <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.DataLength">
            <summary>
            Maximum length of data. Default: 12.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.Location">
            <summary>
            If, and how the textual respresentation of the data is displayed. Default: None.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.UseQuietZone">
            <summary>
            Add a quiet zone to the left and to the right of the barcode. Default: false.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.Width">
            <summary>
            The actual width of the barcode. If set to 0 (default), the minimum width will be used.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.Height">
            <summary>
            The actual height of the barcode. If set to 0 (default), the minimum height will be used.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.MinimumHeight">
            <summary>
            The recommended minimum height (in points) of the barcode given the current settings.
            It is possible to set the height smaller than the minimum height but then the content
            will be clipped.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.MinimumWidth">
            <summary>
            The recommended minimum width (in points) of the barcode given the current settings.
            It is possible to set the width smaller than the minimum width but then the content
            will be clipped.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.BarcodeShape.XDimension">
            <summary>
            The x-dimension (narrowest element of a bar code symbol) in mils.
            1 mil = 0.001 inch. E.g. A 7.5 mil x-dimension means that the most narrow
            bar code element measures 0.0075 inches. Default: 13.5.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape">
            <summary>
            Barcode 128 shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.#ctor">
            <summary>
            Create a new Code 128 barcode.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.#ctor(System.String)">
            <summary>
            Create a new Code 128 barcode.
            </summary>
            <param name="data">The Data. This should not include the start and end codes '*'.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.Display">
            <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.QuiteZone">
            <summary>
            The effective width of the quite zone in points. The quite zone is the empty space at 
            both the left and right side of the bar code. Property Width includes the quite zone.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.CharacterSet">
            <summary>
            The character set this Code 128 barcode will use. (default=B)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.GS1Compatible">
            <summary>
            Whether this barcode is GS1-128 compatibly (default false).
            </summary>
            <remarks>
            Setting to true will insert the FNC1 character [102] on the second position, making it compatible with
            GS1-128 (previously known as UCC/EAN-128 or EAN-128) 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.MinimumWidth">
            <summary>
            The effective width (in points) of the barcode given the current settings.
            Includes the quite zone.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code128BarcodeShape.MinimumHeight">
            <summary>
            The effective height (in points) of the barcode given the current settings.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape">
            <summary>
            Shape for the Interleaved 2 of 5 barcode.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.#ctor">
            <summary>
            Create a new Code 2 of 5 Interleaved bar code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.#ctor(System.String)">
            <summary>
            Create a new Code 2 of 5 Interleaved bar code.
            </summary>
            <param name="data">The Data. This should not include the start and end codes '*'.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.Display">
            <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.DataWithChecksum">
            <summary>
            The data with the checksum digit added. This is only different from Data if Checksum is set.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.QuiteZone">
            <summary>
            The effective width of the quite zone in points. The quite zone is the empty space at 
            both the left and right side of the bar code. Property Width includes the quite zone.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.Checksum">
            <summary>
            If set, a checksum is appended to the barcode. Default: false.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.MinimumWidth">
            <summary>
            The effective width (in points) of the barcode given the current settings.
            Includes the quite zone.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.MinimumHeight">
            <summary>
            The effective height (in points) of the barcode given the current settings.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code2of5InterleavedBarcodeShape.WideNarrowRatio">
            <summary>
            The ration of wide bars/spaces and narrow bars/spaces.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape">
            <summary>
            Barcode 39 (or 3 of 9) shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.#ctor">
            <summary>
            Create a new Code 39 (3 of 9) barcode.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.#ctor(System.String)">
            <summary>
            Create a new Code 39 (3 of 9) barcode.
            </summary>
            <param name="data">The Data. This should not include the start and end codes '*'.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.Display">
            <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.DataWithChecksum">
            <summary>
            The data with the checksum digit added. This is only different from Data if Checksum is set.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.QuiteZone">
            <summary>
            The effective width of the quite zone in points. The quite zone is the empty space at 
            both the left and right side of the bar code. Property Width includes the quite zone.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.Checksum">
            <summary>
            If set, a checksum is appended to the barcode. Default: false.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.MinimumWidth">
            <summary>
            The effective width (in points) of the barcode given the current settings.
            Includes the quite zone.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.MinimumHeight">
            <summary>
            The effective height (in points) of the barcode given the current settings.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.Code3of9BarcodeShape.WideNarrowRatio">
            <summary>
            The ration of wide bars/spaces and narrow bars/spaces.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Barcodes.OneDimensionalBarcodeShape">
            <summary>
            Base Shape for all 1D barcodes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.OneDimensionalBarcodeShape.#ctor">
            <summary>
            Create a new 1D bar code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.OneDimensionalBarcodeShape.#ctor(System.String)">
            <summary>
            Create a new 1D bar code.
            </summary>
            <param name="data">The Data. This should not include the start and end codes '*'.</param>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Barcodes.PDF417BarcodeShape">
            <summary>
            Shape for the PDF 417 barcode.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.PDF417BarcodeShape.#ctor">
            <summary>
            Create a new PDF 417 bar code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.PDF417BarcodeShape.#ctor(System.String)">
            <summary>
            Create a new PDF 417 bar code.
            </summary>
            <param name="data">The Data. </param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarcodeShape.Display">
            <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarcodeShape.MinimumWidth">
            <summary>
            The effective width (in points) of the barcode given the current settings.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.PDF417BarcodeShape.MinimumHeight">
            <summary>
            The effective height (in points) of the barcode given the current settings.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Barcodes.QRBarcodeShape">
            <summary>
            QR (Quick Response) code shape.
            </summary>
            <remarks><para>The physical size of the QR code is given by its Width and Height in points. The number of "dots" dat get
            generated depends on the value of the Data parameter. More data implies a QR code with more (and smaller) dots.
            The current implementation will always generate a code with error correction level "M".
            </para>
            <para>
            The Quiet zone property is ignored, as QR codes incorporate a mandatory "quiet zone". The 
            DataLength and XDimension properties are currently also ignored.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.QRBarcodeShape.#ctor">
            <summary>
            Create a new QR code.
            </summary>
            <remarks>By default, the QR code will have both its width and height set to 60 points.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.QRBarcodeShape.#ctor(System.String)">
            <summary>
            Create a new QR code.
            </summary>
            <param name="data">The Data. </param>
            <remarks>By default, the QR code will have both its width and height set to 60 points.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.QRBarcodeShape.Display">
            <summary>
            The textual representation of the data as it appears with the barcode.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.QRBarcodeShape.MinimumWidth">
            <summary>
            For QR codes the minimum width is ignored.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Barcodes.QRBarcodeShape.MinimumHeight">
            <summary>
            For QR codes the minimum height is ignored.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Barcodes.QRCoder.QRCodeGenerator.ECCLevel">
            <summary>
            Error correction level. These define the tolerance levels for how much of the code can be lost before the code cannot be recovered.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.QRCoder.QRCodeGenerator.ECCLevel.L">
            <summary>
            7% may be lost before recovery is not possible
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.QRCoder.QRCodeGenerator.ECCLevel.M">
            <summary>
            15% may be lost before recovery is not possible
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.QRCoder.QRCodeGenerator.ECCLevel.Q">
            <summary>
            25% may be lost before recovery is not possible
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.QRCoder.QRCodeGenerator.ECCLevel.H">
            <summary>
            30% may be lost before recovery is not possible
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Barcodes.TwoDimensionalBarcodeShape">
            <summary>
            Base Shape for all 2D barcodes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.TwoDimensionalBarcodeShape.#ctor">
            <summary>
            Create a new 2D bar code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Barcodes.TwoDimensionalBarcodeShape.#ctor(System.String)">
            <summary>
            Create a new 2D bar code.
            </summary>
            <param name="data">The Data.</param>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Barcodes.Code128CharacterSet">
            <summary>
            The used character set in the code128 barcode.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.Code128CharacterSet.A">
            <summary>
            Use Code 128 - Set A
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.Code128CharacterSet.B">
            <summary>
            Use Code 128 - Set B
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.Code128CharacterSet.C">
            <summary>
            Use Code 128 - Set C
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Barcodes.TextLocation">
            <summary>
            The used text location in the barcode region.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.TextLocation.None">
            <summary>
            No text will be displayed
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.TextLocation.Below">
            <summary>
            Below the barcode
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.TextLocation.Above">
            <summary>
            Above the barcode
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.TextLocation.AboveEmbedded">
            <summary>
            In the top region of the barcode
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.Barcodes.TextLocation.BelowEmbedded">
            <summary>
            In the botton region of the barcode
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.BezierShape">
            <summary>
            A cubic bezier shape. It has a start and an end point and two respective
            control points.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.BezierShape.#ctor">
            <summary>
            Create a new BezierShape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.BezierShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new BezierShape given a start point, start control point, end control point and a end point
            </summary>
            <param name="x0">Horizontal position of the start point.</param>
            <param name="y0">Vertical position of the start point.</param>
            <param name="x1">Horizontal position of the start control point.</param>
            <param name="y1">Vertical position of the start control point.</param>
            <param name="x2">Horizontal position of the end control point.</param>
            <param name="y2">Vertical position of the end control point.</param>
            <param name="x3">Horizontal position of the end point.</param>
            <param name="y3">Vertical position of the end point.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.BezierShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen)">
            <summary>
            Creates a new BezierShape given a start point, start control point, end control point and a end point
            </summary>
            <param name="x0">Horizontal position of the start point.</param>
            <param name="y0">Vertical position of the start point.</param>
            <param name="x1">Horizontal position of the start control point.</param>
            <param name="y1">Vertical position of the start control point.</param>
            <param name="x2">Horizontal position of the end control point.</param>
            <param name="y2">Vertical position of the end control point.</param>
            <param name="x3">Horizontal position of the end point.</param>
            <param name="y3">Vertical position of the end point.</param>
            <param name="pen">Used to draw the curves of this bezier.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.BezierShape.X0">
            <summary>
            Horizontal position of the start point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.BezierShape.Y0">
            <summary>
            Vertical position of the start point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.BezierShape.X1">
            <summary>
            Horizontal position of the start control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.BezierShape.Y1">
            <summary>
            Vertical position of the start control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.BezierShape.X2">
            <summary>
            Horizontal position of the end control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.BezierShape.Y2">
            <summary>
            Vertical position of the end control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.BezierShape.X3">
            <summary>
            Horizontal position of the end point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.BezierShape.Y3">
            <summary>
            Vertical position of the end point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.BorderShape">
            <summary>
            A classic style border. The lower-left corner is defined by 
            the X and Y properties of base class Shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.BorderShape.#ctor">
            <summary>
            Create a new border with zero width and height.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.BorderShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new BorderShape with given startpoint, width and height.
            </summary>
            <param name="left">X-position of the lower-left corner.</param>
            <param name="bottom">Y-position of the lower-left corner.</param>
            <param name="width">Width of this rectangle.</param>
            <param name="height">Height of this rectangle.</param>
            <param name="lineWidth">Width of the line in points.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.BorderShape.Width">
            <summary>
            Width of this border.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.BorderShape.Height">
            <summary>
            Height of this border.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.BorderShape.LineWidth">
            <summary>
            LineWidth of this rectangle.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.BorderShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Canvas">
            <summary>
            Each page has 4 canvasses: an underlay, a visual underlay, an overlay and a visual overlay, all of type Canvas.
            You draw underneath or on top of a page by adding shapes to one of the 
            4 layer objects. The layers are non-creatable and retrieved through
            the [Visual]Underlay and [Visual]Overlay properties of a page object.
            </summary>
            <remarks> 
            The underlay and overlay uses the original coordinate system and doesn't respect page orientation and/or any clipping area.
            The visual underlay and visual overlay uses a coordinate system that does respect page orientation and/or any clipping area.
            The visual layer will be placed exact on the resulting visual area shown in a viewer (e.g. Acrobat Reader). 
            Note that if no rotation and/or clipping is available that the visual layer has the same result as the normal layer.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Canvas.#ctor(TallComponents.PDF.Shapes.ShapeCollection)">
            <summary>
            Creates a Canvas based on an existing shape collection.
            </summary>
            <param name="masterShapes">The shape collection to include.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Canvas.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a Canvas based on absolute coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Canvas.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Creates a Canvas based on relative cooordinates.
            </summary>
            <param name="startX"></param>
            <param name="startY"></param>
            <param name="endX"></param>
            <param name="endY"></param>
            <param name="orientation"></param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Canvas.Width">
            <summary>
            Width of this canvas.
            </summary>
            <remarks>
            This property is read-only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Canvas.Height">
            <summary>
            Height of this canvas.
            </summary>
            <remarks>
            This property is read-only.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Canvas.Add(TallComponents.PDF.Shapes.Shape)">
            <summary>
            Add a shape to this canvas. Shapes are drawn in the same order as they are added.
            Consequently a shape may obscure previously added shapes.
            </summary>
            <param name="shape">The shape to add.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Canvas.Remove(TallComponents.PDF.Shapes.Shape)">
            <summary>
            Remove a shape from this canvas.
            </summary>
            <param name="shape">Remove this shape.</param>
            <returns>true if removing the shape succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Canvas.AddRange(TallComponents.PDF.Shapes.Shape[])">
            <summary>
            Adds the elements of a Shape array to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="shapes">The array of shapes whose elements should be added to 
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shapes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Canvas.Count">
            <summary>
            Number of shapes in this Canvas.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Canvas.Item(System.Int32)">
            <summary>
            Get a shape by index (0-based).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Canvas.Insert(System.Int32,TallComponents.PDF.Shapes.Shape)">
            <summary>
            Insert an existing shape at the specified index.
            </summary>
            <param name="index">The index of the shape after insertion.</param>
            <param name="shape">Insert this shape.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Canvas.RemoveAt(System.Int32)">
            <summary>
            Remove a shape at the specified index.
            </summary>
            <param name="index">The index of the shape to remove.</param>
            <remarks>Removing a shape at a non-existing index is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Canvas.Clear">
            <summary>
            Remove all shapes from this canvas.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Canvas.Contains(TallComponents.PDF.Shapes.Shape)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Shapes.Shape">Shape</see> is in the <see cref="T:TallComponents.PDF.Shapes.Canvas">Canvas</see>.
            </summary>
            <param name="shape">The <see cref="T:TallComponents.PDF.Shapes.Shape"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Shapes.Shape"/> is found in this <see cref="T:TallComponents.PDF.Shapes.Shape"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="shape"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shape"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Canvas.IndexOf(TallComponents.PDF.Shapes.Shape)">
            <summary>
            Returns the index of the specified shape.
            </summary>
            <param name="shape">The shape to locate on this canvas.</param>
            <returns>The zero-based index of the shape found on this canvas; otherwise, -1.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Canvas.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Canvas.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Shapes.ContentShape">
            <summary>
            Base type for all content shapes.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ContentShape.Opacity">
            <summary>
            The opacity (0...255) which must be used for this shape. Default is 255 (fully opaque).
            </summary>
            <remarks>
            0 means not visible (100% transparent), 255 means 100% visible (no transparancy).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ContentShape.BlendMode">
            <summary>
            The blend mode used by this shape. (default is BlendMode.Inherit)
            </summary>
            <remarks>
            Inherit means that the Blendmode from it's container is used (parent shape, or page).
            At page level 'Normal' is defined.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ContentShape.RenderingIntent">
            <summary>
            Gets or sets the rendering intent (default is RenderingIntent.RelativeColorimetric).
            </summary>
            <value>
            The rendering intent.
            </value>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ContentShape.Transform">
            <summary>
            Apply this transformation to the content shape before rendering.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ContentShape.X">
            <summary>
            X-position of the lower-left corner, center or start point (depending on shape type).
            </summary>
            <remarks>
            For MultilineTextShape (and derived) it is the top-left corner.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ContentShape.Y">
            <summary>
            Y-position of the lower-left corner, center or start point (depending on shape type).
            </summary>
            <remarks>
            For MultilineTextShape (and derived) it is the top-left corner.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Shapes.ClipShape">
            <summary>
            The ClipShape allow you to build an arbitray curve composed of
            straight lines and bezier curves, used as clipping path.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ClipShape.#ctor">
            <summary>
            Create a new open free hand shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ClipShape.Paths">
            <summary>
            The paths that make up this clip shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ClipShape.FillRule">
            <summary>
            The FillRule used by this clip shape. (Default = FillRule.NonzeroWindingNumber)
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ClipShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.BlendMode">
            <summary>
            Different blend modes.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.BlendMode.Inherit">
            <summary>
            Do not change the blend mode, but interit it from it's container.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.BlendMode.Normal">
            <summary>
            Selects the source color, ignoring the backdrop.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.BlendMode.Multiply">
            <summary>
            Multiplies the backdrop and source color.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.BlendMode.Screen">
            <summary>
            Multiplies the complements of the backdrop and source color, then complements the result.
            Note: Screening any color with white results in white; screening with black leaved the original color unchanged. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.BlendMode.Difference">
            <summary>
            Subtracts the darker of the two constituent colors from the lighter color.
            Note: Paiting with white inverts the backdrop color; painting with black produce no change. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.BlendMode.Exclusion">
            <summary>
            Subtracts the darker of the two constituent colors from the lighter color (see difference, but with lowel contrast).
            Note: Paiting with white inverts the backdrop color; painting with black produce no change. 
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.IReference`1">
            <summary>
            Interface class for references.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.IReference`1.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.LayerShape">
            <summary>
            A layer shape can be seen as a canvas. You draw on this canvas by adding
            shapes to it, they will be placed inside this layer.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LayerShape.#ctor">
            <summary>
            Create a new empty layer shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LayerShape.#ctor(TallComponents.PDF.Layer)">
            <summary>
            Create a new empty layer shape, connected to the provided Layer. 
            </summary>
            <param name="layer">The layer this shape is connected to.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.LayerShape.Layer">
            <summary>
            The layer this shape is connected to.
            </summary>
            <remarks>
            If this entry is not set, it means the current layer (layer wise like this shape was not inserted).
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LayerShape.Add(TallComponents.PDF.Shapes.Shape)">
            <summary>
            Add an existing shape to this layer.
            </summary>
            <param name="shape">Add this shape.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LayerShape.Remove(TallComponents.PDF.Shapes.Shape)">
            <summary>
            Remove a shape from this layer.
            </summary>
            <param name="shape">Remove this shape.</param>
            <returns>true if removing the shape succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LayerShape.AddRange(TallComponents.PDF.Shapes.ShapeCollection)">
            <summary>
            Adds the elements of a ShapeCollection to the end of this layer.
            </summary>
            <remarks>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="shapes">The ShapeCollection whose elements should be added to 
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shapes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LayerShape.AddRange(TallComponents.PDF.Shapes.Shape[])">
            <summary>
            Adds the elements of a Shape array to the end of this layer.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="shapes">The array of shapes whose elements should be added to 
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shapes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Shapes.LayerShape.Count">
            <summary>
            Number of shapes in this layer.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.LayerShape.Item(System.Int32)">
            <summary>
            Get a shape by index (0-based).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LayerShape.Contains(TallComponents.PDF.Shapes.Shape)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Shapes.Shape">Shape</see> is in the <see cref="T:TallComponents.PDF.Shapes.LayerShape">LayerShape</see>.
            </summary>
            <param name="shape">The <see cref="T:TallComponents.PDF.Shapes.Shape"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Shapes.Shape"/> is found in this <see cref="T:TallComponents.PDF.Shapes.LayerShape"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="shape"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shape"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LayerShape.Insert(System.Int32,TallComponents.PDF.Shapes.Shape)">
            <summary>
            Insert an existing shape at the specified index.
            </summary>
            <param name="index">The index of the shape after insertion.</param>
            <param name="shape">Insert this shape.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LayerShape.RemoveAt(System.Int32)">
            <summary>
            Remove a shape at the specified index.
            </summary>
            <param name="index">The index of the shape to remove.</param>
            <remarks>Removing a shape at a non-existing index is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LayerShape.Clear">
            <summary>
            Remove all shapes from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LayerShape.IndexOf(TallComponents.PDF.Shapes.Shape)">
            <summary>
            Returns the index of the specified shape.
            </summary>
            <param name="shape">The shape to locate in this layer shape.</param>
            <returns>The zero-based index of the shape found in the layer shape; otherwise, -1.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LayerShape.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LayerShape.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LayerShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
            <remarks>
            If this shape refres a Layer, the layer will not be cloned.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.LayerShape.InnerShapes">
            <summary>
            Return the InnerShapes as ShapeCollection.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.RenderingIntent">
            <summary>
            Enumerates rendering intent types.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.RenderingIntent.RelativeColorimetric">
            <summary>
            Colors are represented with respect to the combination of the light source and the output medium’s white point.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.RenderingIntent.AbsoluteColorimetric">
            <summary>
            Colors are represented solely with respect to the light source; no correction is made for the output medium’s white point.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.RenderingIntent.Saturation">
            <summary>
            Colors are represented in a manner that preserves or emphasizes saturation.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.RenderingIntent.Perceptual">
            <summary>
            Colors are represented in a manner that provides a pleasing perceptual appearance.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.SvgShape">
            <summary>
            A shape containing a svg image.
            </summary>
            <remarks>
            In XML you can specify the svg image data as regular xml data.
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Shapes.SvgShape.GetWebCredentials">
            <summary>
            Occurs when a svg is loaded from a weblocation to retrieve the credentials.
            </summary>
            <remarks>Set the credentials in the arguments to perform authentication.
            To authenticate using the user running the application or the impersonated
            user (on ASP.NET) supply <i>System.Net.CredentialCache.DefaultCredentials</i>.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.SvgShape.#ctor">
            <summary>
            Creates a new SvgShape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.SvgShape.#ctor(System.String)">
            <summary>
            Create a new SvgShape from a relative, absolute or virtual path.
            </summary>
            <param name="path">Relative, absolute or virtual path.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.SvgShape.#ctor(System.IO.Stream)">
            <summary>
            Create a new SvgShape from a stream.
            </summary>
            <remarks>The referenced stream must be disposed by the client (caller). The stream mus be kept open
            during the lifetime of the SvgShape instance.</remarks>
            <param name="stream">The stream containing the svg data.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SvgShape.Path">
            <summary>
            Relative or absolute path of svg image file.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SvgShape.FontPath">
            <summary>
            Relative or absolute path to the folder containing fonts. Leav empty to use the system font folder. (default = empty)
            </summary>
            <remarks>
            The system font folder may not be accessible during web requests if the anonymous user (IUSR_xxxx) does not have read access to this folder. Clone the required fonts into a different folder within the website instead.
            </remarks>	
        </member>
        <member name="P:TallComponents.PDF.Shapes.SvgShape.Width">
            <summary>
            The width of the svg image. 
            </summary>
            <remarks>
            If KeepAspectRatio is set:
            <pare>If both the height and width are not specified: use PhysicalWidth and PhysicalHeight.</pare>
            <para>Width is specified, no height specified: The height is calculated from the width (and height property is ignored).</para>
            <para>Height is specified, no width specified: The width is calculated from the height (and width property is ignored).</para>
            <para>If both the height and width are specified: fit into area.</para>
            </remarks>	
        </member>
        <member name="P:TallComponents.PDF.Shapes.SvgShape.AspectRatio">
            <summary>
            The aspect ratio based on the svg image dimensions.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SvgShape.Height">
            <summary>
            The height of the svg image. 
            </summary>
            <remarks>
            If KeepAspectRatio is set:
            <pare>If both the height and width are not specified: use PhysicalWidth and PhysicalHeight.</pare>
            <para>Width is specified, no height specified: The height is calculated from the width (and height property is ignored).</para>
            <para>Height is specified, no width specified: The width is calculated from the height (and width property is ignored).</para>
            <para>If both the height and width are specified: fit into area.</para>
            </remarks>	
        </member>
        <member name="P:TallComponents.PDF.Shapes.SvgShape.KeepAspectRatio">
            <summary>
            If KeepAspectRatio is set to true, the height is calculated from the 
            width so that the width/height ratio is equal to the ratio of the original svg image. 
            If set to false, the specified width and height are used and the svg image will in general appear distorted.
            </summary>
            <remarks>
            Default as indicated by the root SVG element.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.SvgShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SvgShape.ViewPortWidth">
            <summary>
            Get the view port width specified on the root SVG element.
            </summary>
            <remarks>
            This property is readonly.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SvgShape.ViewPortHeight">
            <summary>
            Get the view port height specified on the root SVG element.
            </summary>
            <remarks>
            This property is readonly.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SvgShape.ViewBox">
            <summary>
            Get the view port specified on the root SVG element(can be null/nothing).
            </summary>
            <remarks>
            This property is readonly.
            <para>Null/Nothing means that there is no viewbox specified.</para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Shapes.FreeHandPath">
            <summary>
            A free hand path.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPath.#ctor">
            <summary>
            Create a new FreeHandPath.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPath.#ctor(System.Boolean)">
            <summary>
            Creates a new FreeHandPath.
            </summary>
            <param name="closed"> Close this free hand path by drawing a straight line from the end point to the start point.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandPath.Closed">
            <summary>
            Close this free hand path by drawing a straight line from the end point to the start point.
            </summary>
            <remarks>
            This property is don't care if this path is part of a ClipShape, because it will be closed always.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandPath.Segments">
            <summary>
            The segments that make up this free hand path.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPath.Clone">
            <summary>
            Clones a FreeHandPath.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPath.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a FreeHandPath.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.FreeHandPathCollection">
            <summary>
            Collection of Free Hand Path objects.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.#ctor">
            <summary>
            Create a new empty collection of free hand path objects.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.Add(TallComponents.PDF.Shapes.FreeHandPath)">
            <summary>
            Add an existing free hand path object to this collection.
            </summary>
            <param name="freeHandPath">Add this path.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.Remove(TallComponents.PDF.Shapes.FreeHandPath)">
            <summary>
            Remove a free hand path from this collection.
            </summary>
            <param name="freeHandPath">Remove this free hand path.</param>
            <returns>true if removing the path succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.AddRange(TallComponents.PDF.Shapes.FreeHandPathCollection)">
            <summary>
            Adds the free hand paths from an existing collection to the end of this collection.
            </summary>
            <remarks>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="freeHandPaths">The FreeHandPathCollection whose elements should be added to
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="freeHandPaths"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.AddRange(TallComponents.PDF.Shapes.FreeHandPath[])">
            <summary>
            Adds the elements of a FreeHandPath array to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="freeHandPaths">The array of freee hand paths whose elements should be added to
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="freeHandPaths"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandPathCollection.Count">
            <summary>
            Number of path shapes in this collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandPathCollection.Item(System.Int32)">
            <summary>
            Get a free hand path by index (0-based).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.Insert(System.Int32,TallComponents.PDF.Shapes.FreeHandPath)">
            <summary>
            Insert an existing free hand path at the specified index.
            </summary>
            <param name="index">The zero-based index of the path shape after insertion.</param>
            <param name="freeHandPath">Insert this path.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a free hand path at the specified index.
            </summary>
            <param name="index">The index of the free hand path to remove.</param>
            <remarks>Removing a free hand path at a non-existing index is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.Clear">
            <summary>
            Remove all free hand paths from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.Contains(TallComponents.PDF.Shapes.FreeHandPath)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Shapes.FreeHandPath"/> is in the <see cref="T:TallComponents.PDF.Shapes.FreeHandPathCollection"/>.
            </summary>
            <param name="freeHandPath">The <see cref="T:TallComponents.PDF.Shapes.FreeHandPath"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Shapes.FreeHandPath"/> is found in this <see cref="T:TallComponents.PDF.Shapes.FreeHandPathCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="freeHandPath"/> does not accept a <see langword="null"/> as a valid value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="freeHandPath"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.IndexOf(TallComponents.PDF.Shapes.FreeHandPath)">
            <summary>
            Returns the index of the specified free hand path.
            </summary>
            <param name="freeHandPath">The free hand path to locate in this collection.</param>
            <returns>The zero-based index of the free hand path found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a free hand path collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandPathCollection.Clone">
            <summary>
            Clones a free hand path collection.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.DockStyle">
            <summary>
            Different ways to dock shapes.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.DockStyle.None">
            <summary>
            The shape is positioned at its exact coordinates.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.DockStyle.Top">
            <summary>
            The shape is moved up to the top edge of the container if the first, otherwise to the bottom edge
            of its predecessor.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.DockStyle.Left">
            <summary>
            The shape is moved up to the left edge of the container if the first, otherwise to the right edge
            of its predecessor.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.DockStyle.Bottom">
            <summary>
            The shape is moved up to the bottom edge of the container if the first, otherwise to the top edge
            of its predecessor.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.DockStyle.Right">
            <summary>
            The shape is moved up to the right edge of the container if the first, otherwise to the left edge
            of its predecessor.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.DockStyle.Fill">
            <summary>
            The shape fills the entire remaining area.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.FreeHandStartSegment">
            <summary>
            The start point of the free hand path.
            </summary>
            <remarks>
            This class must be the first object in the FreeHandSegmentCollection, if it's not available 0,0 will be used.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandStartSegment.#ctor">
            <summary>
            Create a new FreeHandStartSegment.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandStartSegment.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new FreeHandStartSegment with given end point.
            </summary>
            <param name="x">Horizontal position of start point.</param>
            <param name="y">Vertical position of start point.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandStartSegment.X">
            <summary>
            Horizontal position of start point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandStartSegment.Y">
            <summary>
            Vertical position of start point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.FreeHandBezierSegment">
            <summary>
            A cubic bezier segment. It has an end point and two respective
            control points.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandBezierSegment.#ctor">
            <summary>
            Create a new FreeHandBezierSegment.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandBezierSegment.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new BezierShape given a start control point, end control point and an end point
            </summary>
            <param name="x1">Horizontal position of the start control point.</param>
            <param name="y1">Vertical position of the start control point.</param>
            <param name="x2">Horizontal position of the end control point.</param>
            <param name="y2">Vertical position of the end control point.</param>
            <param name="x3">Horizontal position of the end point.</param>
            <param name="y3">Vertical position of the end point.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandBezierSegment.X1">
            <summary>
            Horizontal position of the start control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandBezierSegment.Y1">
            <summary>
            Vertical position of the start control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandBezierSegment.X2">
            <summary>
            Horizontal position of the end control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandBezierSegment.Y2">
            <summary>
            Vertical position of the end control point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandBezierSegment.X3">
            <summary>
            Horizontal position of the end point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandBezierSegment.Y3">
            <summary>
            Vertical position of the end point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.FreeHandLineSegment">
            <summary>
            A straight line. It has an end point.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandLineSegment.#ctor">
            <summary>
            Create a new FreeHandLineSegment.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandLineSegment.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new FreeHandLineSegment with given end point.
            </summary>
            <param name="x1">Horizontal position of end point.</param>
            <param name="y1">Vertical position of end point.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandLineSegment.X1">
            <summary>
            Horizontal position of end point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandLineSegment.Y1">
            <summary>
            Vertical position of end point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.FreeHandSegment">
            <summary>
            The base class for all FreeHandSegment objects.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegment.Clone">
            <summary>
            Clones a FreeHandSegment.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegment.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a FreeHandSegment.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.FreeHandSegmentCollection">
            <summary>
            Collection of FreeHandSegment objects.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.#ctor">
            <summary>
            Create a new empty collection of free hand segments.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Add(TallComponents.PDF.Shapes.FreeHandSegment)">
            <summary>
            Add an existing free hand segment to this collection.
            </summary>
            <param name="segment">Add this segment.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Remove(TallComponents.PDF.Shapes.FreeHandSegment)">
            <summary>
            Remove a segment from this collection.
            </summary>
            <param name="segment">Remove this segment.</param>
            <returns>true if removing the segment succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.AddRange(TallComponents.PDF.Shapes.FreeHandSegmentCollection)">
            <summary>
            Adds the elements of a Free hand segment collection to the end of this collection.
            </summary>
            <remarks>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="segments">The FreeHandSegmentCollection whose elements should be added to
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="segments"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.AddRange(TallComponents.PDF.Shapes.FreeHandSegment[])">
            <summary>
            Adds the elements of a FreeHandSegment array to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="segments">The array of segments whose elements should be added to
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="segments"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Count">
            <summary>
            Number of segments in this collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Item(System.Int32)">
            <summary>
            Get a segment by index (0-based).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Insert(System.Int32,TallComponents.PDF.Shapes.FreeHandSegment)">
            <summary>
            Insert an existing segment at the specified index.
            </summary>
            <param name="index">The zero-based index of the segment after insertion.</param>
            <param name="segment">Insert this segment.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a segment at the specified index.
            </summary>
            <param name="index">The index of the segment to remove.</param>
            <remarks>Removing a segment at a non-existing index is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Clear">
            <summary>
            Remove all segments from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Contains(TallComponents.PDF.Shapes.FreeHandSegment)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Shapes.FreeHandSegment"/> is in the <see cref="T:TallComponents.PDF.Shapes.FreeHandSegmentCollection"/>.
            </summary>
            <param name="freeHandSegment">The <see cref="T:TallComponents.PDF.Shapes.FreeHandSegment"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Shapes.FreeHandSegment"/> is found in this <see cref="T:TallComponents.PDF.Shapes.FreeHandSegmentCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="freeHandSegment"/> does not accept a <see langword="null"/> as a valid value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="freeHandSegment"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.IndexOf(TallComponents.PDF.Shapes.FreeHandSegment)">
            <summary>
            Returns the index of the specified segment.
            </summary>
            <param name="segment">The segment to locate in this collection.</param>
            <returns>The zero-based index of the segment found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a FreeHandSegmentCollection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandSegmentCollection.Clone">
            <summary>
            Clones a FreeHandSegmentCollection.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.FreeHandShape">
            <summary>
            The FreeHandShape allow you to build an arbitray curve composed of
            straight lines and bezier curves.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandShape.#ctor">
            <summary>
            Create a new open free hand shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandShape.Paths">
            <summary>
            The paths that make up this free hand shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandShape.Segments">
            <summary>
            The segments that make up this free hand shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandShape.Closed">
            <summary>
            Close this free hand shape by drawing a straight line from the end point to the start point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.FreeHandShape.FillRule">
            <summary>
            The FillRule used by this free hand shape. (Default = FillRule.NonzeroWindingNumber)
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.FreeHandShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.EllipseShape">
            <summary>
            An ellipse drawn using a pen and brush. 
            </summary>
            <remarks>
            The center is determined by the X and Y
            properties of base class Shape.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.EllipseShape.#ctor">
            <summary>
            Create a new EllipseShape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.EllipseShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new EllipseShape with the given startpoint, horizontal and vertical radius.
            </summary>
            <param name="centerX">X-position of the center of the ellipse.</param>
            <param name="centerY">Y-position of the center of the ellipse.</param>
            <param name="radiusX">Horizontal radius.</param>
            <param name="radiusY">Vertical radius.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.EllipseShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen)">
            <summary>
            Create a new EllipseShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
            <param name="centerX">X-position of the center of the ellipse.</param>
            <param name="centerY">Y-position of the center of the ellipse.</param>
            <param name="radiusX">Horizontal radius.</param>
            <param name="radiusY">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the ellipse.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.EllipseShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,TallComponents.PDF.Brushes.Brush)">
            <summary>
            Create a new EllipseShape with the given startpoint, horizontal and vertical radius, pen and brush.
            </summary>
            <param name="centerX">X-position of the center of the ellipse.</param>
            <param name="centerY">Y-position of the center of the ellipse.</param>
            <param name="radiusX">Horizontal radius.</param>
            <param name="radiusY">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the ellipse.</param>
            <param name="brush">The brush that is used to fill this shape if closed.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.EllipseShape.CenterX">
            <summary>
            X-position of the center of the ellipse.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.EllipseShape.CenterY">
            <summary>
            Y-position of the center of the ellipse.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.EllipseShape.RadiusX">
            <summary>
            Horizontal radius in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.EllipseShape.RadiusY">
            <summary>
            Vertical radius in points.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.IBaseDocumentCache">
            <summary>
            Used in shapes to resolve a base document in multiple PageShapes [TallPDF.NET only]
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.IBaseDocumentCache.cacheDocument(TallComponents.PDF.Base.DocumentStructure.Document,System.String)">
            <summary>
            For internal usage only
            </summary>
            <param name="document">For internal usage only</param>
            <param name="path">For internal usage only</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.IBaseDocumentCache.findDocument(System.String)">
            <summary>
            For internal usage only
            </summary>
            <param name="path">For internal usage only</param>
        </member>
        <member name="T:TallComponents.PDF.Shapes.ImageShape">
            <summary>
            A shape containing bitmap image.
            </summary>
            <remarks>
            In XML you can specifiy the image data as Base64 encoded data.
            <example>
            You can convert an image file to Base64 using the .NET method <see cref="M:System.Convert.ToBase64String(System.Byte[])"/>.
            <para>C#</para>
            <code>
            string base64Data;
            using ( FileStream fs = new FileStream( fileName , FileMode.Open ) )
            {
              byte[] bytes  = new byte[ fs.Length ];
              fs.Read( bytes, 0, bytes.Length );
              base64Data = Convert.ToBase64String( bytes );
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Shapes.ImageShape.GetWebCredentials">
            <summary>
            Occurs when an image is loaded from a weblocation to retrieve the credentials.
            </summary>
            <remarks>Set the credentials in the arguments to perform authentication.
            To authenticate using the user running the application or the impersonated
            user (on ASP.NET) supply <i>System.Net.CredentialCache.DefaultCredentials</i>.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor">
            <summary>
            Creates a new ImageShape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor(System.String)">
            <summary>
            Create a new image shape from a relative or virtual path.
            </summary>
            <param name="path">Relative, absolute or virtual path</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor(System.String,System.Int32)">
            <summary>
            Create a new image shape from a relative, absolute or virtual path.
            </summary>
            <param name="path">Relative, absolute or virtual path</param>
            <param name="frameIndex">Index of frame. Typically used to select a page in a multi-page TIFF.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor(System.Drawing.Bitmap)">
            <summary>
            Create a new ImageShape from a System.Drawing.Bitmap.
            This constructor allows you to draw to a GDI+ surface and pass it to the ImageShape
            class without intermediate, temporary file.
            </summary>
            <param name="bitmap">In-memory GDI+ bitmap object.</param>
            <remarks>The frame index will be 0, not the current active frame index.
            The referenced bitmap must be disposed by the client (caller) after
            the pdf document (page with this ImageShape) has been written</remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor(System.Drawing.Bitmap,System.Boolean)">
            <summary>
            Create a new ImageShape from a System.Drawing.Bitmap.
            This constructor allows you to draw to a GDI+ surface and pass it to the ImageShape
            class without intermediate, temporary file.
            </summary>
            <param name="bitmap">In-memory GDI+ bitmap object.</param>
            <param name="disposeBitmap">The bitmap will be disposed by this component (callee)</param>
            <remarks>
            The frame index will be 0, not the current active frame index
            When setting disposeBitmap to true, the bitmap is disposed when this Image class is release
            from memory. Note that if this instance of the bitmap is used multiple times an error will
            be thrown if this bitmap is used after this Image class is removed from memory.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor(System.Drawing.Bitmap,System.Int32)">
            <summary>
            Create a new ImageShape from a System.Drawing.Bitmap and select a frame index.
            This constructor allows you to draw to a GDI+ surface and pass it to the ImageShape
            class without intermediate, temporary file.
            </summary>
            <param name="bitmap">In-memory GDI+ bitmap object.</param>
            <param name="frameIndex">0-based frame index.</param>
            <remarks>
            The referenced bitmap must be disposed by the client (caller) after
            the pdf document (page with this Image) is written.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor(System.Drawing.Bitmap,System.Int32,System.Boolean)">
            <summary>
            Create a new ImageShape from a System.Drawing.Bitmap and select a frame index.
            This constructor allows you to draw to a GDI+ surface and pass it to the ImageShape
            class without intermediate, temporary file.
            </summary>
            <param name="bitmap">In-memory GDI+ bitmap object.</param>
            <param name="frameIndex">0-based frame index.</param>
            <param name="disposeBitmap">The bitmap will be disposed by this component (callee)</param>
            <remarks>
            When setting disposeBitmap to true, the bitmap is disposed when this Image class is released
            from memory. Note that if this instance of the bitmap is used multiple times an error will
            be thrown if this bitmap is used after this Image class is removed from memory
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor(TallComponents.Images.ImageData)">
            <summary>
            Creates a new ImageShape based on an existing ImageData object.
            </summary>
            <param name="imageData">The imagedata object.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor(TallComponents.Images.ImageData,TallComponents.PDF.Base.Array)">
            <summary>
            Creates a new ImageShape based on an existing ImageData object.
            </summary>
            <param name="imageData">The imagedata object.</param>
            <param name="stencilFillColor">The color used to fill a stencil if the image shape is a mask.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor(System.IO.Stream)">
            <summary>
            Create a new ImageShape from a stream of binary data.
            </summary>
            <remarks>
            The stream is not closed when the image is disposed. Make sure that it remains open until
            Document.Write has been completed.
            </remarks>
            <param name="stream">The stream containing the binairy image data.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
            <summary>
            Create a new ImageShape from a stream of binary data.
            </summary>
            <remarks>
            When setting disposeStream to true, the stream will disposed after the Image instance has been released
            from memory. Note that if this instance of the stream is used multiple times an error will
            be thrown if the stream is used after this Image class is removed from memory.
            </remarks>
            <param name="stream">The stream containing the binairy image data.</param>
            <param name="frameIndex">0-based frame index.</param>
            <param name="disposeStream">The stream will be disposed by this component.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.Compression">
            <summary>
            The compression to apply to the image data.
            </summary>
            <remarks>
            This is a best-effort setting. Images that are already compressed
            will in most cases not be recoded to another compression.
            Uncompressed images will honor the compression setting.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.MaskColor">
            <summary>
            Set the color that will act as the transparent color.
            </summary>
            <remarks>
            Setting this color to any other color than <see langword="null"/> will enable color masking.
            The color that matches this color exactly will become transparent.
            <para>When the mask color is set, alpha transparency is ignored.</para>
            <para>For GIF images, the mask color can be specified in the file. Setting the MaskColor
            will override the transparent color in the GIF file.</para>
            <para>Color masking for images with lossy compression (JPEG) is not advised.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.FrameIndex">
            <summary>
            The FrameIndex which will be used to get the actual image data from the Bitmap
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.FrameCount">
            <summary>
            The number of frames in the image.
            </summary>
            <remarks>
            Most image types hold a single frame. TIFF images can have multiple frames.
            Use <see cref="P:TallComponents.PDF.Shapes.ImageShape.FrameIndex"/> to select the frame to show.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.GetFrameCount(System.String)">
             <summary>
             Extract the number of frames from the image data.
             </summary>
             <param name="path">The path to the image. May be a file path or a URL.</param>
             <returns>Number of frames in this image.</returns>
             <example>
             VB.NET
             <code>
             ' Get the number of frames
             Dim frameCount As Integer = ImageShape.GetFrameCount( path )
             Dim index As Integer
            
             For index = 0 To frameCount - 1
                ' Load the image for the frame
                Dim image as ImageShape = New ImageShape(path, index)
            
                'Create new page and append to document
                Dim page As New Page(image.Width, image.Height)
                document.Pages.Append(page)
                page.VisualOverlay.Add(image)
             Next index
             </code>
             </example>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.GetFrameCount(System.String,System.Object,TallComponents.PDF.GetWebCredentialsEventHandler)">
             <summary>
             Extract the number of frames from the image data.
             </summary>
             <param name="path">The path to the image. May be a file path or a URL.</param>
             <param name="sender">The sender for the GetWebCredentials event.</param>
             <param name="getWebCredentials">The event handlers to query for the web credentials.</param>
             <returns>Number of frames in this image.</returns>
             <example>
             VB.NET
             <code>
             ' Get the number of frames
             Dim frameCount As Integer = ImageShape.GetFrameCount( path )
             Dim index As Integer
            
             For index = 0 To frameCount - 1
                ' Load the image for the frame
                Dim image as ImageShape = New ImageShape(path, index)
            
                'Create new page and append to document
                Dim page As New Page(image.Width, image.Height)
                document.Pages.Append(page)
                page.VisualOverlay.Add(image)
             Next index
             </code>
             </example>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.GetFrameCount(System.IO.Stream)">
            <summary>
            Extract the number of frames from the image data.
            </summary>
            <remarks>
            The <paramref name="stream"/> may be closed when the method completes and it is no longer needed.
            It is the responsibility of the client to close the stream.
            </remarks>
            <param name="stream">A stream containing an image file.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.GetFrameCount(System.Drawing.Bitmap)">
            <summary>
            Extract the number of frames from the image data.
            </summary>
            <param name="bitmap">A Bitmap object.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.Path">
            <summary>
            Relative or absolute path of image file.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.Height">
            <summary>
            The height of the image.
            </summary>
            <remarks>
            If KeepAspectRatio is set:
            <para>If both the height and width are not specified: use PhysicalWidth and PhysicalHeight.</para>
            <para>Width is specified, no height specified: The height is calculated from the width (and height property is ignored).</para>
            <para>Height is specified, no width specified: The width is calculated from the height (and width property is ignored).</para>
            <para>If both the height and width are specified: fit into area.</para>
            <para>Set to double.NaN to reset to the initial state (not set, use PhysicalHeight)</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.Width">
            <summary>
            The width of the image.
            </summary>
            <remarks>
            If KeepAspectRatio is set:
            <para>If both the height and width are not specified: use PhysicalWidth and PhysicalHeight.</para>
            <para>Width is specified, no height specified: The height is calculated from the width (and height property is ignored).</para>
            <para>Height is specified, no width specified: The width is calculated from the height (and width property is ignored).</para>
            <para>If both the height and width are specified: fit into area.</para>
            <para>Set to double.NaN to reset to the initial state (not set, use PhysicalWidth)</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.VerticalSize">
            <summary>
            Get the vertical size (height) in pixels of this image.
            </summary>
            <remarks>
            This property cannot be set, it's readonly.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.HorizontalSize">
            <summary>
            Get the horizontal size (width) in pixels of this image.
            </summary>
            <remarks>
            This property cannot be set, it's readonly.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.VerticalResolution">
            <summary>
            Get the vertical resolution, in pixels per inch, of this image.
            </summary>
            <remarks>
            <para>
            Returns 0 (zero) if this information is not available in the image.
            </para>
            This property cannot be set, it's readonly.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.HorizontalResolution">
            <summary>
            Get the horizontal resolution, in pixels per inch, of this image.
            </summary>
            <remarks>
            <para>
            Returns 0 (zero) if this information is not available in the image.
            </para>
            This property cannot be set, it's readonly.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.AspectRatio">
            <summary>
            The pixel aspect ratio based on the physical image dimensions.
            </summary>
            <remarks>
            This includes a correction for images that have a different horizontal and vertical resolution.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.PhysicalHeight">
            <summary>
            The height where the resolution has been applied to.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.PhysicalWidth">
            <summary>
            The width where the resolution has been applied to.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.KeepAspectRatio">
            <summary>
            If KeepAspectRatio is set to true, the height is calculated from the
            width so that the width/height ratio is equal to the columns/rows ratio
            of the raster of the original image. If set to false, the specified
            width and height are used and the image will in general appear distorted.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.IgnoreAlpha">
            <summary>
            Set to true to completely ignore alpha transparency in the image. If no alpha information
            is available this setting is ignored.
            Default value is false.
            </summary>
            <remarks>
            Note that setting a MaskColor will cause all alpha information to be ignored.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.InvertCmykChannels">
            <summary>
            Set to true to invert the colors in a CMYK image.
            </summary>
            <remarks>
            Default = false.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ImageShape.CreateBitmap">
            <summary>
            This function created a bitmap based on an extracted ImageShape (returned by page.CreateShapes).
            </summary>
            <returns>The created bitmap</returns>
            <remarks>
            A NotSupportedException is thrown if you call this method on newly created ImageShapes.
            <para>
            Notice that the caller should dispose the returned bitmap.
            Calling this function multiple times creates multiple bitmap instances.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ImageShape.DesiredCompression">
            <summary>
            This is the desired compression.
            </summary>
            <remarks>It is not guaranteed that the requires compression will actually be used for each image type.</remarks>
        </member>
        <member name="T:TallComponents.PDF.Shapes.FillRule">
            <summary>
            Different rules for filling.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.FillRule.NonzeroWindingNumber">
            <summary>
            Specifies the nonzero winding number rule.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Shapes.FillRule.EvenOdd">
            <summary>
            Specifies the even-odd rule.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.LineShape">
            <summary>
            A straight line. It has a start and an end point.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LineShape.#ctor">
            <summary>
            Create a new LineShape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LineShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new LineShape with given start and end point.
            </summary>
            <param name="startX">Horizontal position of start point.</param>
            <param name="startY">Vertical position of start point.</param>
            <param name="endX">Horizontal position of end point.</param>
            <param name="endY">Vertical position of end point.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.LineShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen)">
            <summary>
            Creates a new LineShape with given start and end point and pen.
            </summary>
            <param name="startX">Horizontal position of start point.</param>
            <param name="startY">Vertical position of start point.</param>
            <param name="endX">Horizontal position of end point.</param>
            <param name="endY">Vertical position of end point.</param>
            <param name="pen">Used to draw the line.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.LineShape.StartX">
            <summary>
            Horizontal position of start point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.LineShape.StartY">
            <summary>
            Vertical position of start point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.LineShape.EndX">
            <summary>
            Horizontal position of end point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.LineShape.EndY">
            <summary>
            Vertical position of end point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.MetafileShape">
            <summary>
            A shape containing a metafile (emf or wmf) vector based image.
            </summary>
            <remarks>
            In XML you can specify the metafile image data as Base64 encoded data.
            <example>
            You can convert an image file to Base64 using the .NET method <see cref="M:System.Convert.ToBase64String(System.Byte[])"/>.
            <para>C#</para>
            <code>
            string base64Data;
            using ( FileStream fs = new FileStream( fileName , FileMode.Open ) )
            {
              byte[] bytes  = new byte[ fs.Length ];
              fs.Read( bytes, 0, bytes.Length );
              base64Data = Convert.ToBase64String( bytes );
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Shapes.MetafileShape.GetWebCredentials">
            <summary>
            Occurs when a metafile is loaded from a weblocation to retrieve the credentials.
            </summary>
            <remarks>Set the credentials in the arguments to perform authentication.
            To authenticate using the user running the application or the impersonated
            user (on ASP.NET) supply <i>System.Net.CredentialCache.DefaultCredentials</i>.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.MetafileShape.#ctor">
            <summary>
            Creates a new MetafileShape (emf or wmf).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.MetafileShape.#ctor(System.String)">
            <summary>
            Create a new MetafileShape (emf or wmf)  from a relative, absolute or virtual path.
            </summary>
            <param name="path">Relative, absolute or virtual path.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.MetafileShape.#ctor(System.IO.Stream)">
            <summary>
            Create a new MetafileShape (emf or wmf) from a stream of binary data.
            </summary>
            <remarks>The referenced stream must be disposed by the client (caller). The stream mus be kept open
            during the lifetime of teh MetaFileShape instance.</remarks>
            <param name="stream">The stream containing the binary metafile (image) data.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MetafileShape.Path">
            <summary>
            Relative or absolute path of metafile image file.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MetafileShape.Width">
            <summary>
            The width of the metafile image. 
            </summary>
            <remarks>
            If KeepAspectRatio is set:
            <pare>If both the height and width are not specified: use PhysicalWidth and PhysicalHeight.</pare>
            <para>Width is specified, no height specified: The height is calculated from the width (and height property is ignored).</para>
            <para>Height is specified, no width specified: The width is calculated from the height (and width property is ignored).</para>
            <para>If both the height and width are specified: fit into area.</para>
            </remarks>	
        </member>
        <member name="P:TallComponents.PDF.Shapes.MetafileShape.AspectRatio">
            <summary>
            The aspect ratio based on the metafile image dimensions.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MetafileShape.Height">
            <summary>
            The height of the metafile image. 
            </summary>
            <remarks>
            If KeepAspectRatio is set:
            <pare>If both the height and width are not specified: use PhysicalWidth and PhysicalHeight.</pare>
            <para>Width is specified, no height specified: The height is calculated from the width (and height property is ignored).</para>
            <para>Height is specified, no width specified: The width is calculated from the height (and width property is ignored).</para>
            <para>If both the height and width are specified: fit into area.</para>
            </remarks>	
        </member>
        <member name="P:TallComponents.PDF.Shapes.MetafileShape.KeepAspectRatio">
            <summary>
            If KeepAspectRatio is set to true, the height is calculated from the 
            width so that the width/height ratio is equal to the ratio of the original metafile image. 
            If set to false, the specified width and height are used and the metafile image will in general appear distorted.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.MetafileShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.MultilineTextShape">
            <summary>
            The MultilineTextShape allows you to stamp text that is wrapped given
            a certain maximum line width. The text is stored in 1 or more fragments.
            You can set layout properties such as alignment and indentation.
            </summary>
            <remarks>
            <para>
            The origin (X and Y properties) is the top-left position.
            </para>
            <para>Use a LineBreakFragment to insert a newline between two fragments.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.MultilineTextShape.#ctor">
            <summary>
            Create a new empty multiline text shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.MultilineTextShape.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a new empty multiline text shape.
            </summary>
            <param name="x">The X position.</param>
            <param name="y">The Y position.</param>
            <param name="width">Width of this MultilineTextShape.</param>
        </member>
        <member name="E:TallComponents.PDF.Shapes.MultilineTextShape.LineBreak">
            <summary>
            Will be fired when a word has to be broken on a line end.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.HorizontalAlignment">
            <summary>
            The horizontal alignment.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.Justified">
            <summary>
            Whether text is justified.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.JustifyLastLine">
            <summary>
            Whether last line of the text is justified.
            </summary>
            <remarks>
            If Justified is false, this property has no effect.
            </remarks>/// 
        </member>
        <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.HangIndentation">
            <summary>
            Indentation of all except first line.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.FirstLineIndentation">
            <summary>
            Indentation of first line.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.LineSpacing">
            <summary>
            Extra spacing between lines in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.Fragments">
            <summary>
            Collection of text fragments. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.Width">
            <summary>
            Width of this MultilineTextShape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.Height">
            <summary>
            Height of this MultilineTextShape, when the contents should be auto-sized. The content will be auto-sized when the following constaints are true: 1) Only one fragment is present; 2) The font-size in that fragment is specified as zero (0).
            </summary>
            <remarks>
            If this MultilineTextShape isn't auto-sized, this height property isn't used at all.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.MeasuredHeight">
            <summary>
            The measured height is the space that will be used when drawing this shape on the page. 
            This height is calculated with the fragments available in the fragments collection, 
            it respects the Width property and font-sizes used in the fragments. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.MeasuredWidth">
            <summary>
            The measured width is the space that will be used when drawing this shape on the page. 
            This width is calculated with the fragments available in the fragments collection, 
            it respects the Width property and font-sizes used in the fragments. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.TabStops">
            <summary>
            Allows you to define points to jump to when a tab character is encountered.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.ReadDirection">
            <summary>
            The read direction of text elements (fragments).
            </summary>
            <remarks>
            The fragments contained can have a different read direction to allow
            left-to-right reading elements (numbers) in right to left text.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.MaxFontSize">
            <summary>
            The maximum font size the auto-sized text will be (default = 24).
            </summary>
            <remarks>
            If this MultilineTextShape isn't auto-sized, this property isn't used at all.
            <seealso cref="P:TallComponents.PDF.Shapes.MultilineTextShape.Height"/>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.MultilineTextShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.MultilineTextShape.TextFieldMode">
            <summary>
            We need to set the Shape in 'special' mode, because acrobat dispays text different then we do.
            However we do not want to change it for all text we display.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.PageShape">
            <summary>
            A page shape is a placeholder for an existing page. 
            It is used to stamp existing pages on an other page, which could be either a new or an existing page.
            </summary>
            <remarks>
            Placing a page using the PageShape removes all interactive features such as links and form fields.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.PageShape.#ctor(TallComponents.PDF.Page)">
            <summary>
            Create a new page shape.
            </summary>
            <param name="page">The existing page that will be rendered inside this page shape.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.PageShape.#ctor(TallComponents.PDF.Page,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new page shape, with the aspect ratio not respected, no rotation
            </summary>
            <param name="page">The existing page that will be rendered inside this page shape.</param>
            <param name="left">The horizontal position of the left edge of this page shape.</param>
            <param name="bottom">The vertical position of the bottom edge of this page shape.</param>
            <param name="width">The width of this page shape.</param>
            <param name="height">The height of this page shape.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.PageShape.#ctor(TallComponents.PDF.Page,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Create a new page shape, no rotation.
            </summary>
            <param name="page">The existing page that will be rendered inside this page shape.</param>
            <param name="left">The horizontal position of the left edge of this page shape.</param>
            <param name="bottom">The vertical position of the bottom edge of this page shape.</param>
            <param name="width">The width of this page shape.</param>
            <param name="height">The height of this page shape.</param>
            <param name="keepAspectRatio">The width/height ratio is equal to the ratio of the original page.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.PageShape.#ctor(TallComponents.PDF.Page,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Double,TallComponents.PDF.Shapes.PageBoundary)">
            <summary>
            Create a new page shape. 
            </summary>
            <param name="page">The existing page that will be rendered inside this page shape.</param>
            <param name="left">The horizontal position of the left edge of this page shape.</param>
            <param name="bottom">The vertical position of the bottom edge of this page shape.</param>
            <param name="width">The width of this page shape.</param>
            <param name="height">The height of this page shape.</param>
            <param name="keepAspectRatio">The width/height ratio is equal to the ratio of the original page.</param>
            <param name="rotation">The rotation the page shape clockwise (360 corresponds to a full circle).</param>
            <param name="pageBoundary">This shape has the contents from the specified page boundary. If the page does not have the specified page boundary, then it will be automatically using the following fallback: ArtBox --> CropBox; TrimBox --> CropBox; BleedBox --> CropBox; CropBox --> MediaBox.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.PageShape.Width">
            <summary>
            The width of this page shape in points.
            </summary>
            <remarks>
            This must be a positive (non zero) number.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.PageShape.Height">
            <summary>
            The height of this page shape in points.
            </summary>
            <remarks>
            This must be a positive (non zero) number.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.PageShape.KeepAspectRatio">
            <summary>
            If KeepAspectRatio is set to true, the size is calculated from the 
            width and height so that the width/height ratio is equal to the ratio
            of the original page. If set to false, the specified.
            width and height are used and the page will in general appear distorted.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.PageShape.PageBoundary">
            <summary>
            Specifies which page boundary corresponds to this page shape, the space outside the specified boundary will be clipped. 
            </summary>
            <remarks>
            If the page does not have the specified page boundary, then it will be automatically using the following fallback: 
            ArtBox --> Default; 
            TrimBox --> Default; 
            BleedBox --> Default; 
            CropBox --> MediaBox.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Shapes.PathShape">
            <summary>
            PathShape is the base class for all shapes that have an associated pen or brush.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.PathShape.Pen">
            <summary>
            Used to draw the curves on this path.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.PathShape.Brush">
            <summary>
            The brush that is used to fill this shape if closed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.PathShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.PathShape.PathShapeFillRule">
            <summary>
            The Fill Rule to be used in this path. (default NonzeroWindingNumber )
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.PieShape">
            <summary>
            A pie is an arc shape with the addition of two straight lines drawn
            from the center to the start and end point of the arc. The closed area
            is filled using the specified brush (if any).
            A pie is fully defined by attributes of its base classes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.PieShape.#ctor">
            <summary>
            Create a new, uninitialized PieShape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius.
            </summary>
            <param name="centerX">X-position of the center of the pie.</param>
            <param name="centerY">Y-position of the center of the pie.</param>
            <param name="radiusX">Horizontal radius.</param>
            <param name="radiusY">Vertical radius.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen)">
            <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
            <param name="centerX">X-position of the center of the pie.</param>
            <param name="centerY">Y-position of the center of the pie.</param>
            <param name="radiusX">Horizontal radius.</param>
            <param name="radiusY">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the pie.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,TallComponents.PDF.Brushes.Brush)">
            <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius and pen.
            </summary>
            <param name="centerX">X-position of the center of the pie.</param>
            <param name="centerY">Y-position of the center of the pie.</param>
            <param name="radiusX">Horizontal radius.</param>
            <param name="radiusY">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the pie.</param>
            <param name="brush">The brush that is used to fill this shape if closed.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, start and sweep angle.
            </summary>
            <param name="centerX">X-position of the center of the pie.</param>
            <param name="centerY">Y-position of the center of the pie.</param>
            <param name="radiusX">Horizontal radius.</param>
            <param name="radiusY">Vertical radius.</param>
            <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
            <param name="sweep">Sweep angle, counter-clockwise.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,System.Double,System.Double)">
            <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
            <param name="centerX">X-position of the center of the pie.</param>
            <param name="centerY">Y-position of the center of the pie.</param>
            <param name="radiusX">Horizontal radius.</param>
            <param name="radiusY">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the pie.</param>
            <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
            <param name="sweep">Sweep angle, counter-clockwise.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.PieShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,TallComponents.PDF.Brushes.Brush,System.Double,System.Double)">
            <summary>
            Create a new PieShape with the given startpoint, horizontal and vertical radius, pen, start and sweep angle.
            </summary>
            <param name="centerX">X-position of the center of the pie.</param>
            <param name="centerY">Y-position of the center of the pie.</param>
            <param name="radiusX">Horizontal radius.</param>
            <param name="radiusY">Vertical radius.</param>
            <param name="pen">Used to draw the curves of the pie.</param>
            <param name="brush">The brush that is used to fill this shape if closed.</param>
            <param name="start">Start angle (0 corresponds to 3 o-clock).</param>
            <param name="sweep">Sweep angle, counter-clockwise.</param>
        </member>
        <member name="T:TallComponents.PDF.Shapes.RectangleShape">
            <summary>
            A rectangle drawn using a pen and brush. 
            </summary>
            <remarks>
            The lower-left corner is defined by the X and Y properties of base class Shape.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.RectangleShape.#ctor">
            <summary>
            Create a new rectangle with zero width and height.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.RectangleShape.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new RectangleShape with given startpoint, width and height.
            </summary>
            <param name="width">Width of this rectangle.</param>
            <param name="height">Height of this rectangle.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.RectangleShape.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new RectangleShape with given startpoint, width and height.
            </summary>
            <param name="x">X-position of the lower-left corner.</param>
            <param name="y">Y-position of the lower-left corner.</param>
            <param name="width">Width of this rectangle.</param>
            <param name="height">Height of this rectangle.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.RectangleShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen)">
            <summary>
            Creates a new RectangleShape with given startpoint, width, height and pen.
            </summary>
            <param name="x">X-position of the lower-left corner.</param>
            <param name="y">Y-position of the lower-left corner.</param>
            <param name="width">Width of this rectangle.</param>
            <param name="height">Height of this rectangle.</param>
            <param name="pen">Used to draw the lines on this rectangle.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.RectangleShape.#ctor(System.Double,System.Double,System.Double,System.Double,TallComponents.PDF.Pens.Pen,TallComponents.PDF.Brushes.Brush)">
            <summary>
            Creates a new RectangleShape with given startpoint, width, height, pen and brush.
            </summary>
            <param name="x">X-position of the lower-left corner.</param>
            <param name="y">Y-position of the lower-left corner.</param>
            <param name="width">Width of this rectangle.</param>
            <param name="height">Height of this rectangle.</param>
            <param name="pen">Used to draw the lines on this rectangle.</param>
            <param name="brush">The brush that is used to fill the rectangle.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.RectangleShape.Width">
            <summary>
            Width of this rectangle.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.RectangleShape.Height">
            <summary>
            Height of this rectangle.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.Shape">
            <summary>
            Base class for all vector and bitmap graphics objects.
            </summary>
            <seealso cref="T:TallComponents.PDF.Shapes.PathShape" />
            <seealso cref="N:TallComponents.PDF.Shapes" />
        </member>
        <member name="P:TallComponents.PDF.Shapes.Shape.Dock">
            <summary>
            How this shape is docked.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Shape.X">
            <summary>
            X-position of the lower-left corner, center or start point (depending on shape type).
            </summary>
            <remarks>
            For MultilineTextShape (and derived) it is the top-left corner.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Shape.Y">
            <summary>
            Y-position of the lower-left corner, center or start point (depending on shape type).
            </summary>
            <remarks>
            For MultilineTextShape (and derived) it is the top-left corner.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Shape.Margin">
            <summary>
            Get or set the margin of a shape.
            </summary>
            <remarks>
            This property is useful in combination with docking only, otherwise don't care.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.Shape.ID">
            <summary>
            This Identifier (ID) can be used to track which shape raise an exception.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Shape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.Shape.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Shape
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.ShapeCollection">
            <summary>
            Collection of shape objects. Shapes is a shape itself. This allows recursion.
            A shapes collection can be seen as a canvas. You draw on this canvas by adding
            shapes to it.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.#ctor">
            <summary>
            Create a new empty collection of shapes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.#ctor(System.Double,System.Double)">
            <summary>
            Create a new empty collection of shapes. Positioned at 0,0.
            </summary>
            <param name="width">The width of this shape with respect to parent coordinate system.</param>
            <param name="height">The height of this shape with respect to parent coordinate system.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.#ctor(System.Double,System.Double,TallComponents.PDF.Transforms.Transform)">
            <summary>
            Create a new empty collection of shapes.
            </summary>
            <param name="virtualWidth">The virtual width of the virtual canvas on which child shapes are positioned. </param>
            <param name="virtualHeight">The virtual height of the virtual canvas on which child shapes are positioned. </param>
            <param name="transformation">The initial Transform of this ShapeCollection.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new empty collection of shapes.
            </summary>
            <param name="x">The X position (left).</param>
            <param name="y">The Y position (bottom).</param>
            <param name="width">The width of this shape with respect to parent coordinate system.</param>
            <param name="height">The height of this shape with respect to parent coordinate system.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new empty collection of shapes.
            </summary>
            <param name="x">The X position (left).</param>
            <param name="y">The Y position (bottom).</param>
            <param name="width">The width of this shape with respect to parent coordinate system.</param>
            <param name="height">The height of this shape with respect to parent coordinate system.</param>
            <param name="virtualWidth">The virtual width of the virtual canvas on which child shapes are positioned. </param>
            <param name="virtualHeight">The virtual height of the virtual canvas on which child shapes are positioned. </param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.Add(TallComponents.PDF.Shapes.Shape)">
            <summary>
            Add an existing shape to this collection.
            </summary>
            <param name="shape">Add this shape.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.Remove(TallComponents.PDF.Shapes.Shape)">
            <summary>
            Remove a shape from this collection.
            </summary>
            <param name="shape">Remove this shape.</param>
            <returns>true if removing the shape succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.AddRange(TallComponents.PDF.Shapes.ShapeCollection)">
            <summary>
            Adds the elements of a ShapeCollection to the end of this collection.
            </summary>
            <remarks>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="shapes">The ShapeCollection whose elements should be added to 
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shapes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.AddRange(TallComponents.PDF.Shapes.Shape[])">
            <summary>
            Adds the elements of a Shape array to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="shapes">The array of shapes whose elements should be added to 
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shapes"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ShapeCollection.Count">
            <summary>
            Number of shapes in this collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ShapeCollection.Item(System.Int32)">
            <summary>
            Get a shape by index (0-based).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.Contains(TallComponents.PDF.Shapes.Shape)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Shapes.Shape">Shape</see> is in the <see cref="T:TallComponents.PDF.Shapes.ShapeCollection">ShapeCollection</see>.
            </summary>
            <param name="shape">The <see cref="T:TallComponents.PDF.Shapes.Shape"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Shapes.Shape"/> is found in this <see cref="T:TallComponents.PDF.Shapes.ShapeCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="shape"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="shape"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.Insert(System.Int32,TallComponents.PDF.Shapes.Shape)">
            <summary>
            Insert an existing shape at the specified index.
            </summary>
            <param name="index">The index of the shape after insertion.</param>
            <param name="shape">Insert this shape.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a shape at the specified index.
            </summary>
            <param name="index">The index of the shape to remove.</param>
            <remarks>Removing a shape at a non-existing index is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.Clear">
            <summary>
            Remove all shapes from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.IndexOf(TallComponents.PDF.Shapes.Shape)">
            <summary>
            Returns the index of the specified shape.
            </summary>
            <param name="shape">The shape to locate in this collection.</param>
            <returns>The zero-based index of the shape found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator">GetEnumerator</see>.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary> 
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ShapeCollection.Width">
            <summary>
            Width of this shape with respect to parent coordinate system.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ShapeCollection.Height">
            <summary>
            Height of this shape with respect to parent coordinate system.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ShapeCollection.VirtualWidth">
            <summary>
            The width of the virtual canvas on which child shapes are positioned. 
            This implies a coordinate system transformation.
            </summary>
            <remarks>
            Setting the <see cref="P:TallComponents.PDF.Shapes.ShapeCollection.VirtualHeight"/> to anything other than <see cref="P:TallComponents.PDF.Shapes.ShapeCollection.Height"/> will cause the child shapes to scale appropriately.
            <para>Fields cannot be scaled. Using virtual height with fields may lead to unexpected results.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ShapeCollection.VirtualHeight">
            <summary>
            The height of the virtual canvas on which child shapes are positioned. 
            This implies a coordinate system transformation.
            </summary>
            <remarks>
            Setting the <see cref="P:TallComponents.PDF.Shapes.ShapeCollection.VirtualHeight"/> to anything other than <see cref="P:TallComponents.PDF.Shapes.ShapeCollection.Height"/> will cause the child shapes to scale appropriately.
            <para>Fields cannot be scaled. Using virtual height with fields may lead to unexpected results.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ShapeCollection.Clip">
            <summary>
            Clip child shapes. Default is true.
            </summary>
            <remarks>
            Clipping does not work on fields.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.Compose">
            <summary>
            Overide this method to construct custom shapes.
            </summary>
            <remarks>
            To build custom shapes, derive a class from Shapes and provide an
            implementation of Compose. This method is called just before PDF generation
            starts. Add shapes to create a custom appearance.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Shapes.ShapeCollection.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.ShapeCollection.UseFormX">
            <summary>
            Whether this collection represent a seperate formX object or not.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.ShapeSizeException">
            <summary>
            The exception that is thrown when a shape cannot be placed on a page because 
            the shape has an invalid size.
            </summary>
            <remarks>
            This exception can occur when the width or height of a shape is 0.
            The shape.ID is included into the error description
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Shapes.SimpleXhtmlShape">
             <summary>
             Renders one or more lines of text with "simple" xhtml markup.
             </summary>
             <remarks>
             <para>For the SimpleXhtml shape the formatting is restricted to what is possible in rich text
             form fields in PDF. In PDF, rich text strings consist of XML that is a subset of the XFA text specification,
             which is itself a subset of the XHTML 1.0 specification.</para>
             <para>Text will wrap at the specified <see cref="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.Width"/> of the shape.
             You can set layout properties such as alignment and indentation.</para>
             <para>The origin (X and Y properties) is the top-left position.</para>
             </remarks>
             <example>
             The following example shows how xhtml can be used to specify formatting.
             <code>
             <![CDATA[
               string xhtml = "<?xml version='1.0'?><body xfa:APIVersion=\"PDFKit:3.0.0.0\" xfa:spec=\"2.1\" xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">";
               xhtml += "<p>With a simple Xhtml shape you can easily specify <b>bold</b> text, <i>italic</i> text, or <b><i>both</i></b>. ";
               xhtml += "It is also possible to specify a different <span style='color:#ff0000'>color</span>,";
               xhtml += "or a different <span style='font-family:courier'>font</span>, ";
               xhtml += "<span style ='text-decoration:underline'>underline</span>, or ";
               xhtml += "<span style ='text-decoration:line-through'>line-through</span>.</p> ";
               xhtml += "<p>Of course, text can also be <span style='font-size:72'>big</span>.</p>";
               xhtml += "<p>Note furthermore that &lt;p&gt; tags can be used to generate separate paragraphs.</p>";
               xhtml += "</body>";
               
               // stamp a text paragraph at the center
            
               TranslateTransform translate = new TranslateTransform();
               SimpleXhtmlShape xhtmlShape = new SimpleXhtmlShape();
               xhtmlShape.Text = xhtml;
               xhtmlShape.Transform = translate;
            
               xhtmlShape.DefaultTextIndent = 20;
               // center horizontally
               xhtmlShape.Width = page.Width / 2;
               translate.X = (page.Width - xhtmlShape.Width) / 2;
            
               // Y corresponds to the top of the paragraph
               translate.Y = page.Height / 2;
            
               page.VisualOverlay.Add(xhtmlShape);
             ]]></code>
             </example>
        </member>
        <member name="M:TallComponents.PDF.Shapes.SimpleXhtmlShape.#ctor">
            <summary>
            Creates a new SimpleXhtmlShape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.HorizontalAlignment">
            <summary>
            The horizontal alignment.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Shapes.SimpleXhtmlShape.LineBreak">
            <summary>
            Will be fired when a word has to be broken on a line end.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.LineSpacing">
            <summary>
            Extra spacing between lines in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.TabStops">
            <summary>
            Allows you to define points to jump to when a tab character is encountered.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.MaxFontSize">
            <summary>
            The maximum font size the auto-sized text will be (default = 24).
            </summary>
            <remarks>
            If this MultilineTextShape isn't auto-sized, this property isn't used at all.
            <seealso cref="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.Height"/>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.Width">
            <summary>
            Width of this SimpleXhtmlShape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.MeasuredHeight">
            <summary>
            The measured height is the space that will be used when drawing this shape on the page. 
            This height is calculated with the current text available, it respects the Width property 
            and other properties. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.MeasuredWidth">
            <summary>
            The measured width is the space that will be used when drawing this shape on the page. 
            This width is is calculated with the current text available, it respects the Width property 
            and other properties. It can be less than the Width, if only a few data is available (or is forced broken after short words).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.Text">
            <summary>
            The rich text string to display formatted as xhtml.
            </summary>
            <remarks>
            Supported tags include: strong, b, em, i,  span, p and a wide variety of CSS styles like
            font, font-family, font-size, color, text-decoration etc.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.FontResolver">
            <summary>
            The font resolver used to retrieve fonts.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultFont">
            <summary>
            The default font. (default Arial)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultFontSize">
            <summary>
            The default font size. (default 12)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultBold">
            <summary>
            If the text is default bold. (default = false)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultItalic">
            <summary>
            If the text is default italic. (default = false)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultUnderline">
            <summary>
            If the text is default underlined. (default = false)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultStrikeOut">
            <summary>
            If the text is default striked through. (default = false)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultColor">
            <summary>
            The default text color (default = black)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultJustified">
            <summary>
            Whether text is justified. (default = false)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultTextIndent">
            <summary>
            Indentation of first text line. (default = 0)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultLineHeight">
            <summary>
            Minimal spacing between 2 lines (default 1.2).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.DefaultLeftMargin">
            <summary>
            The default left margin (default 0).
            </summary>
            <remarks>
            You should maybe think to use Margin.Left instead, but that's for docking support only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.Multiline">
            <summary>
            Specifies whether the text may span multiple lines. (default true)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.PreserveWhitespace">
            <summary>
            Specifies whether whitespace must be kept (default false).
            </summary>
            <remarks>If false, all whitespace will be reduced to a single space.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.Height">
            <summary>
            Height of this MultilineTextShape, when the contents should be auto-sized. The content will be auto-sized when the following constaints are true: 1) Only one fragment is present; 2) The font-size in that fragment is specified as zero (0).
            </summary>
            <remarks>
            If this MultilineTextShape isn't auto-sized, this height property isn't used at all.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.SimpleXhtmlShape.Justified">
            <summary>
            Whether text is justified.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.SimpleXhtmlShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.TextShape">
            <summary>
            Used to add a single-line text to a layer.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.TextShape.ReferenceBridge`1">
            <summary>
            Provides an implementation for Base.IVariableText in terms of the public IVariable
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TextShape.#ctor">
            <summary>
            Create an empty text shape.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TextShape.#ctor(System.String,TallComponents.PDF.Fonts.Font,System.Double)">
            <summary>
            Create a text shape with given properties.
            </summary>
            <param name="text">Content.</param>
            <param name="font">Font.</param>
            <param name="fontSize">Size of the font in points.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TextShape.#ctor(System.Double,System.Double,System.String,TallComponents.PDF.Fonts.Font,System.Double)">
            <summary>
            Create a text shape with given properties.
            </summary>
            <param name="x">Horizontal position of left edge.</param>
            <param name="y">Vertical position of bottom edge.</param>
            <param name="text">Content.</param>
            <param name="font">Font.</param>
            <param name="fontSize">Size of the font in points.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TextShape.#ctor(System.Double,System.Double,System.String,TallComponents.PDF.Fonts.Font,System.Double,TallComponents.PDF.Colors.Color)">
            <summary>
            Create a text shape with given properties.
            </summary>
            <param name="x">Horizontal position of left edge.</param>
            <param name="y">Vertical position of bottom edge.</param>
            <param name="text">Content.</param>
            <param name="font">Font.</param>
            <param name="fontSize">Size of the font in points.</param>
            <param name="textColor">Forecolor of the text.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TextShape.#ctor(TallComponents.PDF.Shapes.IReference{System.String},TallComponents.PDF.Fonts.Font,System.Double)">
            <summary>
            Create a variable (late-bound) text shape with given properties.
            </summary>
            <param name="textReference">The variable text implementation.</param>
            <param name="font">Font.</param>
            <param name="fontSize">Size of the font in points.</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TextShape.#ctor(System.Double,System.Double,TallComponents.PDF.Shapes.IReference{System.String},TallComponents.PDF.Fonts.Font,System.Double)">
            <summary>
            Create a text shape with given properties.
            </summary>
            <param name="x">Horizontal position of left edge.</param>
            <param name="y">Vertical position of bottom edge.</param>
            <param name="textReference">The variable text implementation.</param>
            <param name="font">Font.</param>
            <param name="fontSize">Size of the font in points.</param>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.Bold">
            <summary>
            If set, the text appears bold. Note that the boldness is simulated by using a thicker stroke.
            It is preferrable to use a bold font if possible. E.g. use arialbd.ttf for bold Arial and arial.ttf for
            regular Arial. This property is ignored if applied to a Bold font.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.HorizontalScaling">
            <summary>
            Gets or sets the horizontal scaling 0.0 - 1.0.
            1.0 by default.
            </summary>
            <value>
            The horizontal scaling.
            </value>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.Italic">
            <summary>
            If set, the text appears italic. Note that the italicness is simulated by skewing the text slightly.
            It is preferrable to use an italic font if possible. E.g. use ariali.ttf for italic Arial and arial.ttf for
            regular Arial. This property is ignored if applied to an Italic font.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.MeasuredWidth">
            <summary>
            The measured width is the space that will be used when drawing this shape on the page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.MeasuredHeight">
            <summary>
            The measured height is the space that will be used when drawing this shape on the page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.Font">
            <summary>
            Text is typeset using this font.
            </summary>
            <remarks>
            The default font is Helvetica at 12pt.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.FontSize">
            <summary>
            Size of font in points.
            </summary>
            <remarks>
            The default font is Helvetica at 12pt.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when trying to assign an invalid number (NaN or Infinity).</exception>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.Pen">
            <summary>
            Used to draw the curves on this text. (default = null)
            </summary>
            <remarks>
            You can use a pen to draw outlines. (most likely you want to set Brush = null).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.Brush">
            <summary>
            The brush that is used to fill this text. (default = Black - SolidBrush)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.AppendToClipPath">
            <summary>
            Append this text to the clip path after the text is drawn, if any (default = false).
            </summary>
            <remarks>
            No text will be drawn if both Pen en Brush are null/nothing.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.KerningInfo">
            <summary>
            Gets or sets the kerning info.
            </summary>
            <value>
            The kerning info.
            </value>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.TextBytes">
            <summary>
            Gets or sets the text bytes.
            </summary>
            <remarks>
            It turned out that in some fonts the ToUnicode table mapes to different characters
            and it leads to different text in a result of the CreateShapes roundtriping. Therefore
            in order to preserve the original text in untouched text shapes we save its text bytes
            and write them back unless the text shape was modified.
            </remarks>
            <value>
            The text bytes.
            </value>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.TextColor">
            <summary>
            Forecolor of text.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.Text">
            <summary>
            Display this text.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.StrikeOut">
            <summary>
            Get or set if the text shape is rendered striked out.
            </summary>
            <seealso cref="P:TallComponents.PDF.Shapes.TextShape.DoubleUnderline"/>
            <seealso cref="P:TallComponents.PDF.Shapes.TextShape.Underline"/>
            <seealso cref="P:TallComponents.PDF.Shapes.TextShape.Overline"/>
            <remarks>
            The color of the decoration will be:
            If a pen is available: the color of the pen.
            If no pen is available, but a SolidBrush is available: the color from this brush.
            if no pen and no brush are available: RgbBlack.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.Underline">
            <summary>
            Get or set if the text shape is rendered with an underline.
            </summary>
            <seealso cref="P:TallComponents.PDF.Shapes.TextShape.DoubleUnderline"/>
            <seealso cref="P:TallComponents.PDF.Shapes.TextShape.StrikeOut"/>
            <seealso cref="P:TallComponents.PDF.Shapes.TextShape.Overline"/>
            <remarks>
            The color of the decoration will be:
            If a pen is available: the color of the pen.
            If no pen is available, but a SolidBrush is available: the color from this brush.
            if no pen and no brush are available: RgbBlack.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.Overline">
            <summary>
            Get or set if the text shape is rendered with an overline.
            </summary>
            <seealso cref="P:TallComponents.PDF.Shapes.TextShape.Underline"/>
            <seealso cref="P:TallComponents.PDF.Shapes.TextShape.DoubleUnderline"/>
            <seealso cref="P:TallComponents.PDF.Shapes.TextShape.StrikeOut"/>
            <remarks>
            The color of the decoration will be:
            If a pen is available: the color of the pen.
            If no pen is available, but a SolidBrush is available: the color from this brush.
            if no pen and no brush are available: RgbBlack.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.DoubleUnderline">
            <summary>
            Get or set if the text shape is rendered with a double underline.
            </summary>
            <seealso cref="P:TallComponents.PDF.Shapes.TextShape.Underline"/>
            <seealso cref="P:TallComponents.PDF.Shapes.TextShape.StrikeOut"/>
            <seealso cref="P:TallComponents.PDF.Shapes.TextShape.Overline"/>
            <remarks>
            The color of the decoration will be:
            If a pen is available: the color of the pen.
            If no pen is available, but a SolidBrush is available: the color from this brush.
            if no pen and no brush are available: RgbBlack.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.ReadDirection">
            <summary>
            Read direction of this text (left-to-right or right-to-left).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.CharacterSpacing">
            <summary>
            Get or set the character spacing. This is the extra spacing (in points) occupied by each character. Default is 0 (no extra spacing).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.WordSpacing">
            <summary>
            Get or set the word spacing. This is the extra spacing (in points) occupied by each space character. Default is 0 (no extra spacing).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Shapes.TextShape.BoundingBox">
            <summary>
            The size of the textshape after rotation is applied.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TextShape.Clone">
            <summary>
            Clones a Shape.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Shapes.SimpleXhtmlFormatException">
            <summary>
            Thrown when badly formatted Simple Xhtml is encountered.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.SimpleXhtmlFormatException.#ctor(System.String)">
            <summary>
            Create a new SimpleXhtmlFormatException.
            </summary>
            <param name="message">Description of the cause of this exception</param>
        </member>
        <member name="M:TallComponents.PDF.Shapes.SimpleXhtmlFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new SimpleXhtmlFormatException.
            </summary>
            <param name="message">Description of the cause of this exception</param>
            <param name="inner">The exception that caused this exception.</param>
        </member>
        <member name="T:TallComponents.PDF.Shapes.TextShapeCollection">
            <summary>
            Represents a text object.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Shapes.TextShapeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TallComponents.PDF.Shapes.TextShapeCollection"/> class.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.HorizontalAlignment">
            <summary>
            Horizontal alignment of text lines.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.HorizontalAlignment.Left">
            <summary>
            Left aligned
            </summary>
        </member>
        <member name="F:TallComponents.PDF.HorizontalAlignment.Center">
            <summary>
            Center aligned
            </summary>
        </member>
        <member name="F:TallComponents.PDF.HorizontalAlignment.Right">
            <summary>
            Right aligned
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Orientation">
            <summary>
            Orientations of various objects.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Orientation.Rotate0">
            <summary>
            No rotation.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Orientation.Rotate90">
            <summary>
            90 degrees rotation, counter-clockwise.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Orientation.Rotate180">
            <summary>
            180 degrees rotation.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Orientation.Rotate270">
            <summary>
            270 degrees rotation, counter-clockwise.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.ReadDirection">
            <summary>
            Different read directions for text.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.ReadDirection.LeftToRight">
            <summary>
            Text is read from left to right.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.ReadDirection.RightToLeft">
            <summary>
            Text is read from right to left (e.g. Arabic).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.ReadDirection.Default">
            <summary>
            Depending of the usage this means: LeftToRight or InheritFromParent.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.VerticalAlignment">
            <summary>
            Vertical alignment of text lines.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.VerticalAlignment.Top">
            <summary>
            Top aligned
            </summary>
        </member>
        <member name="F:TallComponents.PDF.VerticalAlignment.Middle">
            <summary>
            Middle aligned
            </summary>
        </member>
        <member name="F:TallComponents.PDF.VerticalAlignment.Bottom">
            <summary>
            Bottom aligned
            </summary>
        </member>
        <member name="T:TallComponents.PDF.UnsupportedPdfException">
            <summary>
            The exception that is thrown when the PDF document is not supported.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.PdfException">
            <summary>
            Base class for all exceptions thrown from TallComponents components.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.PdfException.Create(TallComponents.PDF.Base.PdfException)">
            <summary>
            Class factory. Generates a generic TallComponents.PDF.Exception or a specialized 
            instance if available.
            </summary>
            <param name="baseException"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.PdfException.CreateUnsupportedException(System.String)">
            <summary>
            Class factory. Generates a System.Exception
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.PdfException.Source">
            <summary>
            Get or set the name of the application or the object that causes the error.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PdfException.StackTrace">
            <summary>
            Get a string representation of the frames on the call stack at the time the current exception was thrown.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.InvalidImageException">
            <summary>
            The exception that is thrown when an invalid or corrupt image is encountered.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.InvalidPdfException">
            <summary>
            The exception that is thrown when the PDF document is invalid.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.NoPagesException">
            <summary>
            The exception that is thrown when a document without any page is written.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.WrongPasswordException">
            <summary>
            The exception that is thrown when a wrong password is specified or no password is specified where it is required.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Fonts.CharStringListener.ResetMoveFlag">
            <summary>
            Resets the move flag.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Fonts.EmbedMode">
            <summary>
            The different ways that a font can be stored inside a PDF.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.EmbedMode.Auto">
            <summary>
            The embed mode will be determined based on how the font is used. If the font is used to render static
            text only, then the subset will be embedded. If the font is associated with an editable field, then
            the full font will be embedded. This is the default embed mode of a newly created 
            TrueType font.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.EmbedMode.Unknown">
            <summary>
            The font embed mode could not be determined.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.EmbedMode.ReferenceOnly">
            <summary>
            The font is not embedded. Only a reference is stored inside the PDF.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.EmbedMode.Subset">
            <summary>
            A subset of the font is embdedded inside the PDF.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.EmbedMode.Full">
            <summary>
            The font is fully embedded inside the PDF.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Fonts.Font">
            <summary>
            A font is used to typeset text. 
            </summary>
            <remarks>
            There are 14 standard fonts available in PDF or you can load a TrueType font.
            <example>
            C#
            <code>
            // Internal fonts
            myFragment.Font = Font.Helvetica;
              
            // TrueType fonts
            Font arialBold = Font.TrueType( @"c:\windows\fonts\ARIALBD.TTF" );
            myFragment.Font = arialBold;
            
            // TrueType fonts can also be constructed through the Path property
            Font arialBold = new Font();
            arialBold.Path = @"c:\windows\fonts\ARIALBD.TTF";
            myFragment.Font = arialBold;
            </code>
            </example>
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Fonts.Font.ResolveCMap">
            <summary>
            Fired when a CMap need to be resolved.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.#ctor">
            <summary>
            Creates a new font object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.CMapFolder">
            <summary>
            The folder where the CMaps can be found.
            </summary>
            <remarks>
            By default this folder is where the assembly from this component is located 
            with an additional CMaps folder.
            <para>
            The CMaps are used for both calculating the length from a given (unicode) string as well 
            for TextExtraction purposes.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.LicensingRights">
            <summary>
            Font licensing rights.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.EmbedMode">
            <summary>
            How the font is stored inside the PDF.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.CreatePaths(System.Char,System.Double)">
            <summary>
            Return the glyph for the given Unicode chararacter as a FreeHandPathCollection.
            </summary>
            <param name="character"></param>
            <param name="fontSize"></param>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.Path">
            <summary>
            The path of the TrueType file of this font. 
            </summary>
            <remarks>
            When using TrueType collection fonts, you can specify the name of the font like this: <code>"c:\windows\fonts\myfont.ttf?MyFontBold"</code>
            Within a web application a relative path will be mapped relative to the web application root using MapPath.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.AddToSubset(System.Char[])">
            <summary>
            Add characters to the embedded subset.
            </summary>
            <param name="subset">Add these characters to the subset.</param>
            <remarks>
            <para>It is only valid to call this method if the EmbedMode of this font is Subset.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.GetWidth(System.String)">
            <summary>
            Width of a piece of text, which is calculated by means of glyph drawing and getting its boundary box. 
            Divide by 1000 and multiply by font size to get size in points
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.Contains(System.Char)">
            <summary>
            Check whether this font contains the given character.
            </summary>
            <remarks>
            It is only usefull to call this method with newly created fonts, for existing fonts false (meaning: don't know) is returned.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.SubscriptScale">
            <summary>
            The subscript scale of this font. Multiply with the font size to get the subscript font size.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.SuperscriptScale">
            <summary>
            The superscript scale of this font. Multiply with the font size to get the superscript font size.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.SubscriptOffset">
            <summary>
            The subscript offset is the distance in points between the lower extreme of a font and the 
            lower extreme where to place subscript text for a font of size 1 pt.  
            Multiply with the font size to get the offset in points.
            </summary>
            <remarks>This property can be used to vertically align multiple TextShape instances with subscript text.</remarks>
            <seealso cref="P:TallComponents.PDF.Fonts.Font.SubscriptScale"/>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.SuperscriptOffset">
            <summary>
            The superscript offset is the distance in points between the lower extreme of a font and the 
            lower extreme where to place superscript text for a font of size 1 pt. 
            Multiply with the font size to get the offset in points.
            </summary>
            <remarks>This property can be used to vertically align multiple TextShape instances with superscript text.</remarks>
            <seealso cref="P:TallComponents.PDF.Fonts.Font.SuperscriptScale"/>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.FontHeight">
            <summary>
            Height of the font. Divide by 1000 and multiply by font size to get size in points
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.Height">
            <summary>
            The height of this font at a font size of 1 pt. Multiply the height with the font size to
            get the height in points.
            </summary>
            <remarks>
            This is the height specified by the bounding box. 
            This height is used as line spacing.
            <para>
            For TrueType this value is : YMax - YMin (notice that YMin is negative).
            </para>
            </remarks>
            <returns>Height of this font at 1 pt.</returns>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.BaselineOffset">
            <summary>
            The distance in points between the lower extreme of a font and the visual baseline  for a font of size 1 pt. 
            Multiply the value of this property with the font size to get the distance in points.
            </summary>
            <remarks>This property can be used to vertically align multiple TextShape instances with different heights. 
            <para>
            For TrueType this value is : - YMin (notice that YMin is most likely negative, so returning a positive value).
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.UnderlineOffset">
            <summary>
            The distance in points between the lower extreme of a font and the position of an underline for a font of size 1 pt. 
            Multiply the value of this property with the font size to get the distance in points.
            </summary>
            <remarks>This property can be used to draw underlines.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.DecorationLineWidth">
            <summary>
            The width of decoration lines for a font with a size of 1 pt. 
            </summary>
            <remarks>
            Decoration lines are lines that are drawn to underline or strike-out text amongst others.
            Multiply the value of this property with the font size to get the line width in points.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.StrikeOutOffset">
            <summary>
            The distance in points between the lower extreme of a font and the position of a strikethrough for a font of size 1 pt. 
            Multiply the value of this property with the font size to get the distance in points.
            </summary>
            <remarks>This property can be used to draw strikethroughs.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.XHeight">
            <summary>
            The height of the small letter x this font at a font size of 1 pt. Multiply the x-height with the font size to
            get the x-height in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.Ascender">
            <summary>
            The ascender of this font at a font size of 1 pt. Multiply the ascender with the font size to
            get the ascender in points. 
            </summary>
            <remarks>
            For roman font programs: typically the y-value of the top of the lowercase d. 
            <para>
            If this font program contains no ascender double.NaN is returned.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.Descender">
            <summary>
            The descender of this font at a font size of 1 pt. Multiply the descender with the font size to
            get the descender in points.
            </summary>
            <remarks>
            For roman font programs: typically the y-value of the bottom of the lowercase p. 
            <para>
            If this font program contains no decender double.NaN is returned.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.LineGap">
            <summary>
            The height of the line gap specified inside this font at a font size of 1 pt. Multiply the line gap with the font size to
            get the line gap in points.
            </summary>
            <remarks>
            If this font program contains no line gap information double.NaN is returned.
            </remarks> 
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.Weight">
            <summary>
            The Weight this font has by design [100...900]
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.Bold">
            <summary>
            Whether this font is bold by design.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.Italic">
            <summary>
            Whether this font is italic by design.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.ItalicAngle">
            <summary>
            The italic angle the font designer has assigned to this font (counter-clockwise from vertical).
            </summary>
            <remarks>
            Most likely useful only if Italic is true. 
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.CalculateHeight(System.String,System.Double,System.Double)">
            <summary>
            Calculate the height of the given text in points
            </summary>
            <param name="text">The text that the height will be calculated of.</param>
            <param name="fontSize">The font size.</param>
            <param name="textWidth">The maximum width of the text.</param>
            <returns>The height in points.</returns>
            <remarks>
            The the text will be wrapped so that it fits in the specified width.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.CalculateWidth(System.String,System.Double)">
            <summary>
            Calculate the width of given text in points.
            </summary>
            <param name="text">The text that the height will be calculated of.</param>
            <param name="fontSize">The font size.</param>
            <returns>Width in points.</returns>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.TrueType(System.String)">
            <summary>
            Get a TrueType font from file.
            </summary>
            <param name="path">Relative or absolute path to TrueType file.</param>
            <returns></returns>
            <remarks>To specifiy a TrueType font in XML use the font attribute and assign a value equal to the TrueType path.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.TrueType(System.IO.Stream)">
            <summary>
            Get a TrueType font from a stream. 
            </summary>
            <param name="stream">Stream containing TrueType font data.</param>
            <returns>The created font.</returns>
            <remarks>To specifiy a TrueType font in XML use the font attribute and assign a value equal to the TrueType path.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.TrueType(System.String,System.String)">
            <summary>
            Get a TrueType font from a TrueType collection (.TTC) file.
            </summary>
            <param name="path">Relative or absolute path to TrueType collection file.</param>
            <param name="fontName">Name (case-insensitive) of the TrueType font inside the collection.</param>
            <returns></returns>
            <remarks>To specifiy a TrueType font in XML use the font attribute and assign a value equal to the concatenation of the TrueType collection path and the font name, separated by a question mark.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.TrueType(System.IO.Stream,System.String)">
            <summary>
            Get a TrueType font from a TrueType collection stream. 
            </summary>
            <param name="stream">Stream containing TrueType collection font data.</param>
            <param name="fontName">Name (case-insensitive) of the TrueType font inside the collection.</param>
            <returns>The created font.</returns>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.Name">
            <summary>
            The name of the font.
            </summary>
            <remarks>
            Returns <see langword="null"/> if no name can be found.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.FamilyName">
            <summary>
            The family name of the font.
            </summary>
            <remarks>
            Returns <see langword="null"/> is no family name can be found.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.Create(System.String,System.Boolean,System.Boolean)">
            <summary>
            Tries to find the first matching font.
            </summary>
            <param name="familyName">The font family to look for.</param>
            <param name="bold">True if a bold font needs to be resolved.</param>
            <param name="italic">True if a bold font needs to be resolved.</param>
            <returns>The font or null if none found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.GetFont(System.String)">
            <summary>
            Used by the javascript dom to obtain a font with a particular name.
            </summary>
            <param name="fontName"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.Create(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Tries to find the first matching font.
            </summary>
            <param name="familyName">The font family to look for.</param>
            <param name="bold">True if a bold font needs to be resolved.</param>
            <param name="italic">True if a bold font needs to be resolved.</param>
            <param name="additionalFontFolders">One or more paths (semicolon [;] seperated) to folder(s) with TTF documents.</param>
            <returns>The font or null if none found.</returns>
            <remarks>
            First the additionalFontFolders (from left to right if multiple are specified) will be used to find, if this doesn't result in any font, the windows
            folder will be tried.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.SaveFamilies(System.IO.Stream)">
            <summary>
            Save the font family collection. 
            </summary>
            <param name="stream">Save to this stream.</param>
            <remarks>
            You can use the saved stream to initialize the collection the next time.
            This will reduce the load-time.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.LoadFamilies(System.IO.Stream)">
            <summary>
            Load the font family collection. 
            </summary>
            <param name="stream">Save to this stream.</param>
            <remarks>
            You can use the stream saved by SaveFamilies to initialize the collection.
            This will reduce the load-time.
            <para>
            You must Load the file, before you call the static Create().
            </para>
            <para>
            If an exception is thrown the previous state is restored. 
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.Helvetica">
            <summary>
            Get standard PDF font Helvetica.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.HelveticaBold">
            <summary>
            Get standard PDF font Helvetica bold.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.HelveticaOblique">
            <summary>
            Get standard PDF font Helvetica oblique.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.HelveticaBoldOblique">
            <summary>
            Get standard PDF font Helvetica bold oblique.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.Courier">
            <summary>
            Get standard PDF font Courier.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.CourierBold">
            <summary>
            Get standard PDF font Courier bold.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.CourierOblique">
            <summary>
            Get standard PDF font Courier oblique.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.CourierBoldOblique">
            <summary>
            Get standard PDF font Courier bold oblique.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.TimesRoman">
            <summary>
            Get standard PDF font TimesRoman.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.TimesBold">
            <summary>
            Get standard PDF font TimesRoman bold.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.TimesItalic">
            <summary>
            Get standard PDF font TimesRoman italic.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.TimesBoldItalic">
            <summary>
            Get standard PDF font TimesRoman bold italic.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.Symbol">
            <summary>
            Get standard PDF font Symbol.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.Font.ZapfDingbats">
            <summary>
            Get standard PDF font ZapfDingbats.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Fonts.Font.GetTrueTypeFontNames(System.String)">
            <summary>
            Retrieve the names of all TrueType files inside a TrueType collection file.
            </summary>
            <param name="path">Relative, absolute or virtual path to TrueType collection (.TTC) file.</param>
            <returns>Array of TrueType font names. These names can be passed to the TrueType overload that creates a TrueType font from a TrueType collection file.</returns>
            <remarks>
            When this method is performed on a TTF file, an empty string array is returned.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Fonts.FontCollection">
            <summary>
            A font collection.
            </summary>
            <remarks>
            This collection is read-only and cannot be changed.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontCollection.#ctor(TallComponents.PDF.Document)">
            <summary>
            Creates a new font collection object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.FontCollection.Item(System.Int32)">
            <summary>
            Get an <see cref="T:TallComponents.PDF.Fonts.Font">Font</see> by zero-based index from the <see cref="T:TallComponents.PDF.Fonts.FontCollection">FontCollection</see>. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.FontCollection.Count">
            <summary>
            Get the number of <see cref="T:TallComponents.PDF.Fonts.Font">Fonts</see>s actually contained in the <see cref="T:TallComponents.PDF.Fonts.FontCollection">FontCollection</see>
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontCollection.Contains(TallComponents.PDF.Fonts.Font)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Fonts.Font">Font</see> is in the <see cref="T:TallComponents.PDF.Fonts.FontCollection">FontCollection</see>.
            </summary>
            <param name="font">The <see cref="T:TallComponents.PDF.Fonts.Font"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Fonts.Font"/> is found in this <see cref="T:TallComponents.PDF.Fonts.FontCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="font"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="font"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontCollection.IndexOf(TallComponents.PDF.Fonts.Font)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Fonts.Font">Font</see> in the <see cref="T:TallComponents.PDF.Fonts.FontCollection">FontCollection</see>.
            </summary>
            <param name="font">The <see cref="T:TallComponents.PDF.Fonts.Font"/> to locate in the <see cref="T:TallComponents.PDF.Fonts.FontCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Fonts.Font"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Fonts.FontFamily">
            <summary>
            A FontFamily describes 4 fonts which belongs to the same family (aka that have a similar font face), the regular (normal), italic, bold and bold-italic font.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Fonts.FontFamilyCollection">
            <summary>
            A FontFamilyCollection holds multiple FontFamilies.
            	/// </summary>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontFamilyCollection.GetFont(System.String,System.Boolean,System.Boolean)">
            <summary>
            Tries to find the first matching font in a comma seperated list.
            </summary>
            <remarks>Used by (x)HTML parser...</remarks>
            <param name="familyNameList">The list of font families to look for.</param>
            <param name="bold">True if a bold font needs to be resolved.</param>
            <param name="italic">True if a bold font needs to be resolved.</param>
            <returns>the font or null if none found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontFamilyCollection.GetFont(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Tries to find the first matching font in a comma seperated list.
            </summary>
            <remarks>Used by (x)HTML parser...</remarks>
            <param name="familyNameList">The list of font families to look for.</param>
            <param name="bold">True if a bold font needs to be resolved.</param>
            <param name="italic">True if a bold font needs to be resolved.</param>
            <param name="customFamiliesOnly">only search in the custom fonts, not the standard or windows fonts</param>
            <returns>the font or null if none found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontFamilyCollection.GetFontNamesInPath(System.String,System.Collections.Specialized.StringCollection)">
            <summary>
            Gets the full pathname for all fonts in the specified folder
            </summary>
            <param name="fontPath">The path to search for fonts.</param>
            <param name="fontPaths">The collection to which the paths will be added.</param>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontFamilyCollection.AddFromPathList(System.Collections.Specialized.StringCollection,System.Collections.Hashtable)">
            <summary>
            Adds the fonts in the list to the given familylist
            </summary>
            <param name="fontPaths">Array of strings holding the full paths to the fonts to be added.</param>
            <param name="families">the family group the fonts have to be added to.</param>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontFamilyCollection.Save(System.IO.Stream)">
            <summary>
            Save the font family collection.
            </summary>
            <param name="stream">Save to this stream.</param>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontFamilyCollection.Load(System.IO.Stream)">
            <summary>
            Load font family collection.
            </summary>
            <param name="stream">Load from this stream.</param>
            <remarks>
            If an exception is thrown the previous state is restored. 
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Fonts.FontLicensingRights">
            <summary>
            Font licensing rights.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontLicensingRights.Unknown">
            <summary>
            The font licensing rights could not be determined.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontLicensingRights.InstallableEmbedding">
            <summary>
            This setting indicates that the font may be embedded and permanently installed on the 
            remote system by an application. The user of the remote system acquires the identical rights, 
            obligations and licenses for that font as the original purchaser of the font, and is subject 
            to the same end-user license agreement, copyright, design patent, and/or trademark as was the 
            original purchaser.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontLicensingRights.RestrictedLicenseEmbedding">
            <summary>
            This setting indicates that the font must not be modified, embedded or exchanged in any manner 
            without first obtaining permission of the legal owner. Caution: For Restricted License embedding 
            to take effect, it must be the only level of embedding selected.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontLicensingRights.PreviewAndPrintEmbedding">
            <summary>
            This setting indicates that the font may be embedded, and temporarily loaded on the 
            remote system. Documents containing Preview &amp; Print fonts must be opened "read-only;" no edits 
            can be applied to the document. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontLicensingRights.EditableEmbedding">
            <summary>
            This setting indicates that the font may be embedded but must only be installed temporarily 
            on other systems. In contrast to Preview &amp; Print fonts, documents containing Editable fonts may be 
            opened for reading, editing is permitted, and changes may be saved. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontLicensingRights.NoSubsetting">
            <summary>
            This setting indicates that the font may not be subsetted prior to embedding. 
            Other embedding restrictions may also apply.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontLicensingRights.BitmapEmbeddingOnly">
            <summary>
            This setting indicates that only bitmaps contained in the font may be embedded. 
            No outline data may be embedded. If there are no bitmaps available in the font, 
            then the font is considered unembeddable and the embedding services will fail. 
            Other embedding restrictions may also apply. 
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Fonts.ResolveCMapEventArgs">
            <summary>
            Class containing data for the Font.ResolveCMap event.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveCMapEventArgs.Name">
            <summary>
            The CMap name that needs to be resolved.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveCMapEventArgs.CMap">
            <summary>
            The resolved CMap, or null if the CMap cannot be resolved.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Fonts.ResolveCMapEventHandler">
            <summary>
            Represents the method that handles the Font.ResolveCMap event.
            </summary>
            <param name="e">The resolve cmap event arguments.</param>
            <remarks>
            This event handler will be used in static context, so it has no sender argument.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Fonts.IFontCache">
            <summary>
            For internal usage only. 
            </summary>
            <remarks>
            Do not use this interface in your code
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Fonts.IFontCache.GetFont(System.String)">
            <summary>
            For internal usage only.
            </summary>
            <param name="fontName"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Fonts.IFontCache.AddFont(System.String,TallComponents.PDF.Fonts.Font)">
            <summary>
            For internal usage only.
            </summary>
            <param name="fontName"></param>
            <param name="font"></param>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontLocation.Unresolved">
            <summary>
            No definition for the font has been found.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontLocation.System">
            <summary>
            The font is available as a system font. This is the case for example
            if no entry in the font substitution map matches the given font and
            a font with the same name has been found as a system font.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontLocation.File">
            <summary>
            The font is available as a file. This is the case for example if
            a path to the font file has been added to the font substition map.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontLocation.Data">
            <summary>
            The font is available as data. This is the case for example if the
            the font is embedded in the document or if the font data has been
            added as a stream to the font substitution map.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Fonts.FontLocationExtensions">
            <summary>
            Conversion helper methods
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontLocationExtensions.ToBaseLocation(TallComponents.PDF.Fonts.FontLocation)">
            <summary>
            Convert from public font location to base font location
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontLocationExtensions.ToPublicLocation(TallComponents.PDF.Base.Graphics.Fonts.FontLocation)">
            <summary>
            Convert from base font location to public font location
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontRenderMode.RenderAsCurves">
            <summary>
            Render glyphs as curves.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Fonts.FontRenderMode.RenderAsFont">
            <summary>
            Render glyphs as device fonts (GDI+, or WPF).
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Fonts.FontRenderModeExtensions">
            <summary>
            Conversion helper methods
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontRenderModeExtensions.ToBaseMode(TallComponents.PDF.Fonts.FontRenderMode)">
            <summary>
            Convert from public font render mode to base font render mode
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Fonts.FontRenderModeExtensions.ToPublicMode(TallComponents.PDF.Base.Graphics.Fonts.FontRenderMode)">
            <summary>
            Convert from base font render mode to public font render mode
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.PdfFontName">
            <summary>
            The name of the font, as found in the PDF document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.PdfFontNameBytes">
            <summary>
            The bytes of the name of the font, as found in the PDF document.
            </summary>
            <remarks>
            According to the PDF spec section 5.5.2, "Note that for CJK (Chinese, Japanese, and Korean) fonts, the host font system’s font name is often encoded in the host operating system’s script. For instance, a Japanese font may have a name that is written in Japanese using some (unidentified) Japanese encoding."
            The original bytes can help to figure out the indended font name in such a situation.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.PredefinedEncoding">
            <summary>
            The predefined encoding.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.Embedded">
            <summary>
            Whether the font is embedded in the PDF document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.SystemFontName">
            <summary>
            The system font name. If the font could be resolved and the <see cref="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.FontLocation"/>
            is
            <see cref="F:TallComponents.PDF.Fonts.FontLocation.System"/>, this property contains the name of the system font.
            </summary>
            <remarks>
            <para>If the properties of the event are not changed at all, the system
            will use the font as indicated in the Status.
            </para>
            <para>
            If the event handler changes the SystemFontName the system will 
            try to resolve the font to a system font with the new name.
            </para>
            <para>
            If the font name was changed by the event handler, and it could not be
            resolved, a new ResolveFont event will be issued. This event will have
            <see cref="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.FontLocation"/> <see cref="F:TallComponents.PDF.Fonts.FontLocation.Unresolved"/>,
            and the SystemFontName will indicate
            the unknown system font name.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.FontPath">
            <summary>
            The Resolved font path. If the font could be resolved and the <see cref="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.FontLocation"/>
            is <see cref="F:TallComponents.PDF.Fonts.FontLocation.File"/>, this value holds a path to the font.
            </summary>
            <remarks>
            <para>If the properties of the event are not changed at all, the system
            will use the font as indicated in the <see cref="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.FontLocation"/>.
            </para>
            <para>
            If the event handler changes the path, the system will try to use the
            indicated file. Please note that changing the system font name takes precedence.
            If you want to explicitly refer to a font file, please leave the font name
            untouched, or set it to null.
            </para>
            <para>
            If the font path was changed by the event handler, and the indicated file
            could not be loaded, a new ResolveFont event will be issued. This event
            will have <see cref="T:TallComponents.PDF.Fonts.FontLocation"/> <see cref="F:TallComponents.PDF.Fonts.FontLocation.Unresolved"/>, and the FontPath will indicate
            the improper file.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.Bold">
            <summary>
            Specifies a bold variant of a system font.
            </summary>
            <remarks>In many cases, the PDF font name specifies the boldness of the
            font in the font name itself. For example "TimesNewRoman-Bold". If your system
            has a "Times New Roman" font, you can set the SystemFontName to "Times New Roman"
            and set Bold to true. This will normally resolve to the right device font.
            If the system does have a special bold variant of the Times New Roman font,
            it will resolve to that.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.Italic">
            <summary>
            Specifies an italic variant of a system font.
            </summary>
            <remarks>In many cases, the PDF font name specifies an italic font
            in the font name itself. For example "TimesNewRoman-Italic". If your system
            has a "Times New Roman" font, you can set the FontName to "Times New Roman" and set Italic to
            true. This will normally resolve to the right device font. If the system does have
            a special italic variant of the Times New Roman font, it will resolve to that.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.FontRenderMode">
            <summary>
            The mode that will be used to render the font.
            </summary>
            <remarks>
            <para>If the render mode is
            <see cref="F:TallComponents.PDF.Fonts.FontRenderMode.RenderAsCurves"/>,
            a font will be rendered as a sequence of
            curved lines (a path) that is subsequently filled by a color. This will
            result in accurate drawing, but it has a few drawbacks, notably it will
            increase the size of print jobs and WPF conversion results. It is also possible
            that text looks blurred, or irregular at low resolutions, which is an
            artefact of mapping vector graphics onto a low resolution device.
            </para>
            <para>To avoid the problems of "curve" rendering, one may specify that a
            font is rendered by the underlying graphics system of .Net itself (GDI+,
            or WPF, depending on the situation). The render mode should then be
            set to <see cref="F:TallComponents.PDF.Fonts.FontRenderMode.RenderAsFont"/>.
            This will also lead to good results,
            but only if a font definition is available in a format that .Net
            can deal with. Usually, this means that the fonts as they occur in a
            PDF document, have to be mapped onto TrueType font definitions that are
            installed on the system. The ResolveFont event allows one to do this.
            </para>
            <para>At the moment, we only support RenderAsFont for fonts that are
            installed on the system (which have Location <see cref="F:TallComponents.PDF.Fonts.FontLocation.System"/>). Likewise,
            <see cref="F:TallComponents.PDF.Fonts.FontRenderMode.RenderAsCurves"/>
            is only supported for fonts that have
            Status <see cref="F:TallComponents.PDF.Fonts.FontLocation.File"/>. If one specifies the "wrong"
            rendermode, another ResolveFont event will be raised that corrects
            this render mode.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.FontLocation">
            <summary>
            Specifies whether a definition for the font has been found.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.Hinting">
            <summary>
            Specifies whether hinting is enabled for this font.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Fonts.ResolveFontEventArgs.BaseEventArgs">
            <summary>
            Gets the arguments in base format.
            All properties are mapped onto this object.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Fonts.ResolveFontEventHandler">
            <summary>
            The ResolveFont event handler.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event data.</param>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.ColorSpaces.GdiColorSpace">
            <summary>
            Factory that creates the GDI color from a color and the corresponding color space.
            This factory uses the corresponding method from the color space. These methods are internal
            and are not in IColorSpace, because we do not want System.Drawing to appear in the public
            interface.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation">
            <summary>
            Base class for the ColorTransformation classes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.#ctor">
            <summary>
            Constructor of the abstract base class. Needed for derived classes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.#ctor(TallComponents.ColorManagement.IccProfile,TallComponents.ColorManagement.IccProfile,System.Int32)">
            <summary>
            Constructor of the abstract base class.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">destination Color Space.</param>
            <param name="documentCacheCode">The document cache code.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.Clone">
            <summary>
            Creates a shallow copy of the current object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.ConvertColor(TallComponents.PDF.Base.Number[],TallComponents.PDF.Base.Number[])">
            <summary>
            Convert a color from one Color Space to another.
            </summary>
            <param name="input">Array containing the original color components.</param>
            <param name="output">Array receiving the converted color components.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.ConvertColor(System.Byte[],System.Byte[])">
            <summary>
            Convert a color from one Color Space to another.
            </summary>
            <param name="input">Array containing the original color components.</param>
            <param name="output">Array receiving the converted color components.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.ConvertImage(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Convert an image from one Color Space to another.
            Original image and result are both not aligned in anyway.
            This is also true for the scanlines of both images.
            </summary>
            <param name="input">Original image.</param>
            <param name="output">Converted image.</param>
            <param name="pixelCount">Number of pixels in the image.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.TransformTint(System.Byte[])">
            <summary>
            Transform the color components to the colorspace domain.
            This is only used for DeviceN color spaces.
            </summary>
            <param name="input">Color to transform.</param>
            <returns>Color for the base color space.</returns>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation.TransformTint(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Transform the color components to the colorspace domain.
            This is only used for DeviceN color spaces.
            </summary>
            <param name="input">Pointer to buffer containing the colors to transform.</param>
            <param name="output">Pointer to buffer receiving the transformed colors.</param>
            <param name="colorCount">Number of colors to transform.</param>
            <returns>Color for the base color space.</returns>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationCMYK2RGB.#ctor(TallComponents.ColorManagement.IccProfile,TallComponents.ColorManagement.IccProfile,System.Int32)">
            <summary>
            Constructor called by the factory in the abstract base class.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">Destination Color Space.</param>
            <param name="documentCacheCode">The document cache code.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationCMYK2RGB.#ctor(TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by the factory in the abstract base class.
            </summary>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationCMYK2RGB.ConvertImage(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Convert an image from one Color Space to another.
            Original image and result are both not aligned in anyway.
            This is also true for the scanlines of both images.
            </summary>
            <param name="input">Original image.</param>
            <param name="output">Converted image.</param>
            <param name="pixelCount">Number of pixels in the image.</param>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationCMYK2RGB._cacheLock">
            <summary>
            a object used to lock the cachedDestination and cachedTransformation
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationCMYK2RGB._cachedDestination">
            <summary>
            Stores the last encounterd value of the destination ICC profile in order to 
            avoid creating a new transform when the destination ICC profile does not change.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationCMYK2RGB._cachedTransformation">
            <summary>
            Stores the value of the transformation that belongs to the _cachedDestination.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationIndexed2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.IndexedColorSpace,TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation,TallComponents.ColorManagement.IccProfile)">
            <summary>
            Initializes a new instance of the <see cref="T:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationIndexed2RGB"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="baseColorSpaceTransformation">The base color space transformation.</param>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationIndexed2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.IndexedColorSpace,TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation,TallComponents.ColorManagement.IccProfile,TallComponents.PDF.Base.Functions.IFunction[])">
            <summary>
            Initializes a new instance of the <see cref="T:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationIndexed2RGB"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="baseColorSpaceTransformation">The base color space transformation.</param>
            <param name="destination">The destination.</param>
            <param name="transfer">The transfer.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationIndexed2RGB.ConvertColor(TallComponents.PDF.Base.Number[],TallComponents.PDF.Base.Number[])">
            <summary>
            Convert a color from one Color Space to another.
            </summary>
            <param name="input">Array containing the original color components.</param>
            <param name="output">Array receiving the converted color components.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationLab2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.Lab,TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by the factory in the abstract base class.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationLab2RGB.#ctor(TallComponents.ColorManagement.IccProfile,TallComponents.ColorManagement.IccProfile,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationLab2RGB"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="documentCacheCode">The document cache code.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationLab2RGB.ConvertColor(TallComponents.PDF.Base.Number[],TallComponents.PDF.Base.Number[])">
            <summary>
            Convert a color from one Color Space to another.
            </summary>
            <param name="input">Array containing the original color components.</param>
            <param name="output">Array receiving the converted color components.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationLab2RGB.ConvertColor(System.Byte[],System.Byte[])">
            <summary>
            Convert a color from one Color Space to another.
            </summary>
            <param name="input">Array containing the original color components.</param>
            <param name="output">Array receiving the converted color components.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationLab2RGB.ConvertImage(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Convert an image from one Color Space to another.
            Original image and result are both not aligned in anyway.
            This is also true for the scanlines of both images.
            </summary>
            <param name="input">Original image.</param>
            <param name="output">Converted image.</param>
            <param name="pixelCount">Number of pixels in the image.</param>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationMode.HighSpeed">
            <summary>
            HighSpeed uses a faster algorithm but with less quality ( especially for DeviceCMYK ).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationMode.HighQuality">
            <summary>
            ICC Based profiles are used to transform colors from the color space to the device.
            Very good quality, but a bit slower.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.#ctor">
            <summary>
            Constructor called by DeviceGray Color Spaces.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.CalGray,TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by CalGray Color Spaces.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.IndexedColorSpace,TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation,TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by Indexed Color Spaces.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="baseColorSpaceTransformation">The transformation.</param>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.IndexedColorSpace,TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation,TallComponents.ColorManagement.IccProfile,TallComponents.PDF.Base.Functions.IFunction[])">
            <summary>
            Constructor called by Indexed Color Spaces.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="baseColorSpaceTransformation">The transformation.</param>
            <param name="destination">Destination Color Space.</param>
            <param name="transfer">Transfer function (TR or TR2) from Graphic State Parameter Dictionary.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.Separation,TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation,TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by Separation Color Spaces.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="transformation">The transformation.</param>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.#ctor(TallComponents.ColorManagement.IccProfile,TallComponents.ColorManagement.IccProfile,System.Int32)">
            <summary>
            Constructor called by IccBased Color Spaces.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">Destination Color Space.</param>
            <param name="documentCacheCode">The document cache code.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.SetDeviceRGBPalette">
            <summary>
            Fill the palette with default RGB values
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationPalette2RGB.ConvertImage(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Convert an image from one Color Space to another.
            Original image and result are both not aligned in anyway.
            This is also true for the scanlines of both images.
            </summary>
            <param name="input">Original image.</param>
            <param name="output">Converted image.</param>
            <param name="pixelCount">Number of pixels in the image.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationRGB2RGB.#ctor(TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by the factory in the abstract base class.
            </summary>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationRGB2RGB.#ctor(TallComponents.ColorManagement.IccProfile,TallComponents.ColorManagement.IccProfile,System.Int32)">
            <summary>
            Constructor called by the factory in the abstract base class.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">Destination Color Space.</param>
            <param name="documentCacheCode">The document cache code.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationRGB2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.CalRgb,TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by the factory in the abstract base class.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationRGB2RGB.#ctor(TallComponents.PDF.Base.Graphics.ColorSpaces.Lab,TallComponents.ColorManagement.IccProfile)">
            <summary>
            Constructor called by the factory in the abstract base class.
            </summary>
            <param name="source">Source Color Space.</param>
            <param name="destination">Destination Color Space.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformationRGB2RGB.ConvertImage(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Convert an image from one Color Space to another.
            Original image and result are both not aligned in anyway.
            This is also true for the scanlines of both images.
            </summary>
            <param name="input">Original image.</param>
            <param name="output">Converted image.</param>
            <param name="pixelCount">Number of pixels in the image.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.GdiBitmapFactory.CreateMaskedBitmap(TallComponents.PDF.Base.Graphics.Images.Bitmap,TallComponents.PDF.Base.Graphics.StateConsumer,TallComponents.PDF.Base.Graphics.GraphicsState,System.Boolean)">
            <summary>
            Creates the masked bitmap.
            </summary>
            <param name="mask">The mask bitmap.</param>
            <param name="stateConsumer">The state consumer.</param>
            <param name="state">The state.</param>
            <param name="inverseMask">if set to <c>true</c> the mask contains inverted values which should be processed accordingly.</param>
            <returns>Bitmap with possibly transparent parts defined by the mask bitmap.</returns>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.Images.GdiSafeBitmap">
            <summary>
            The GdiSafeBitmap provides a 'Gdi' wrapper around the generic Bitmap.
            </summary>
            <remarks>
            <para>
            Basically, this bitmap provides the ability to obtain Gdi bitmaps from generic ones.
            It is a bit unfortunate that this is provided as a subclass of Bitmap, because this means that
            we probably create GdiSafeBitmaps more often than we want to. In the end, we MOSTLY need
            GdiSafeBitmap so that we can provide bitmaps to GDI+ for rendering. Other than that we
            should avoid them as much as possible. In this sense, the term "safe" is misleading.
            </para>
            <para>
            Another use for this class, is so that we can create instances from GDI bitmaps. Not sure
            whether this is still needed. Should be avoided at all costs.
            </para>
            <para>
            This is a 'safe' bitmap in the sense that it only contains operations that do not require
            "unsafe" blocks and that do not trigger PEVerify. In addition to that it supports 2 modes of
            operation, which are controlled via the (somewhat misleading) UseSafeCode flag. If true,
            this bitmap does not require full trust. Depending on the flag it operates as follows to
            create a Gdi bitmap:
            <list type="bullet">
            <item>
            Safe == false: Gdi bitmaps are created via a handle to the actual pixel data (Bits). This is
            fast, as it does not require copying of data. Trouble with this solution is that the GdiSafeBitmap
            must NOT get disposed if there are still references to the returned System.Drawing.Bitmap
            instance. See remarks at the Bitmap property.
            </item>
            Safe == true: we first save the bitmap into a memory stream in PNG format, and then we let
            the System.Drawing.Bitmap constructor create a bitmap from it. This requires quite a lot of
            memory, and it introduces saving/interpretation overheads. Can probably be improved by
            creating a "png" stream implemention for the bitmap that does not require saving all data
            to a separate memory stream first, so that System.Drawing.Bitmap can read from this directly.
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.GdiSafeBitmap.CreateGdiSafeBitmap(System.Drawing.Bitmap)">
            Trusted safe code to get access to the bits of a System.Drawing.Bitmap.
            Try to use this constructor as little as possible, because it uses a lot of memory.
            <param name="bmp">Bitmap for which the GdiSafeBitmap has to be constructed.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.GdiSafeBitmap.GetBitmapReference(System.Boolean)">
            <summary>
            Returns a System.Drawing.Bitmap that contains the same image as the GdiSafeBitmap.
            </summary>
            <remarks>
            <para>
            Ownership of the bitmap remains at GdiSafeBitmap. This means that callers should NOT Dispose
            the returned bitmaps. Also see the warning below. Also: the bitmap represents a finished bitmap.
            No further processing should take place on it as a) as these are not guaranteed to get transferred into
            the BitmapReference and b) the original pixels may have been deleted to save space.
            </para>
            <para>WARNING: 
            In case the UseSafeCode is false, the returned bitmap will refer to memory that is
            maintained by the GdiSafeBitmap instance. This has the advantage that this is fast and memory will be
            shared. One should be aware however that the returned bitmaps will become invalid as soon as "their"
            GdiSafeBitmap instance becomes garbage. If you refer to a bitmap of a collected/disposed GdiSafeBitmap,
            you are likely to to encounter an InvalidAccess exception.
            
            I (MK) think we need to think of a better way to deal with this, because using this is rather tricky.
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.Images.Bitmap">
            <summary>
            A generic bitmap class that is independent of System.Drawing etc.
            </summary>
            <remarks>This class is IDisposable, but actually it should not be, I think (MK). This class just provides
            some methods and properties for an array of bytes that contains the actual pixels.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.Bitmap.Dispose">
            <summary>
            Called by some routines to indicate the the bitmap is no longer needed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Base.Graphics.Images.Bitmap.Shared">
            <summary>
            This flag will be set at soon as the bitmap is stored in a cache, so that it may get
            referenced many times. The effect of this flag, is that calling dispose will have no
            effect when called explicitly. As a result, one can safely call Dispose, whether the
            bitmap is cached or not. This will have the advantage that bitmap that are not cached
            (usually the big ones) get disposed as soon as possible.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.Bitmap.TallComponents#PDF#Base#Graphics#IBitmap#ApplyBgraBlendMode(TallComponents.PDF.Base.Graphics.BlendMode)">
            <summary>
            return Blends.AlphaApproximate.ApplyBgraBlendMode(bitmap, BlendMode);
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.Bitmap.TallComponents#PDF#Base#Graphics#IBitmap#ApplyBlendMode(System.Byte[],TallComponents.PDF.Base.Graphics.BlendMode)">
            <summary>
            return Blends.AlphaApproximate.ApplyBlendMode(bitmap, argbPalette, BlendMode);
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.Bitmap.CreateScaledImageMask(TallComponents.PDF.Base.Graphics.Images.BitmapFactory,TallComponents.PDF.Base.Graphics.Images.Bitmap,System.Int32,System.Int32)">
            <summary>
            Return a scaled version of an Indexed1 image mask.
            </summary>
            <param name="factory">Factory that is used to create a specific type of image.</param>
            <param name="bmp">The source imagemask</param>
            <param name="width">The required with</param>
            <param name="height">The required height</param>
            <remarks>Calls finalize for the source bitmap.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.Bitmap.CreateScaledArgb32Bitmap(TallComponents.PDF.Base.Graphics.Images.BitmapFactory,TallComponents.PDF.Base.Graphics.Images.Bitmap,System.Int32,System.Int32)">
            <summary>
            Return a 32 bpp copy of the provided bitmap, scaled to the provided with and height, unless
            the provided bitmap already has the right type and size.
            </summary>
            <param name="factory">Factory that is used to create a specific type of image.</param>
            <param name="bmp">The source bitmap</param>
            <param name="width">The required with</param>
            <param name="height">The required height</param>
            <remarks>Calls finalize for the source bitmap.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.BitmapFactory.CreateBitmap(TallComponents.PDF.Base.Graphics.Images.ImageStream,TallComponents.PDF.Colors.RgbaColor,TallComponents.ColorManagement.IccProfile,System.Boolean,System.Boolean,System.Int32,System.Int32,TallComponents.PDF.Base.Graphics.StateConsumer,TallComponents.PDF.Base.Graphics.GraphicsState)">
             <summary>
            
             </summary>
             <param name="imageStream"></param>
             <param name="stateConsumer"></param>
             <param name="state">the graphics state. May be null.</param>
             <param name="currentNonStrokingColor"></param>
             <param name="outputDevice"></param>
             <param name="applyColorKeyMask">Has only effect when there is a Mask array that acts as
             a color key mask, and only for DeviceRGB images at that (not clear why).</param>
             <param name="obtainMask">True if the caller is creating a mask image.</param>
             <param name="width">Width of bitmap requested by caller, 0 means as defined in PDF</param>
             <param name="height">Height of bitmap requested by caller, 0 means as defined in PDF</param>
             <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.BitmapFactory.ApplyColorTransferFunctions(TallComponents.PDF.Base.Functions.IFunction[],System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Apply color transfer functions.
            </summary>
            <remarks>Color transfer functions are applied per component. This is currently done after GetPixelData, but we should let the decoders do
            this directly.</remarks>
            <param name="functions">The color transfer function for each component.</param>
            <param name="buffer">The image buffer.</param>
            <param name="colorantsInImage">The color components in the image.</param>
            <param name="colorantsInBuffer">The components in the buffer, i.e. including any extra "component" if any.</param>
            <param name="reversedComponents">Whether the components in the buffer are reversed.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.BitmapFactory.ApplyColorKeyMaskDeviceN(System.Byte[],System.UInt32,System.Byte[],System.UInt32,TallComponents.PDF.Base.Array,System.Int32)">
            <summary>
            Makes pixels of an (ARGB) image transparent if all corresponding DeviceN components are within the
            specified color key mask.
            </summary>
            <param name="image">The ARGB image that needs to be produced.</param>
            <param name="imageSize">The size of the ARGB image.</param>
            <param name="pixelData">The DeviceN pixeldata source of the image.</param>
            <param name="pixelCount">The number of bytes used by the pixel data.</param>
            <param name="mask">The color key mask.</param>
            <param name="nComponents">The number of color components.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.BitmapFactory.GetPaletteValues(TallComponents.PDF.Base.Graphics.Images.ImageStream,System.Byte[],TallComponents.PDF.Base.Graphics.ColorSpaces.ColorTransformation,TallComponents.PDF.Colors.RgbaColor)">
            <summary>
            Converts the array from GetPaletteEntriesToConvert to RGBA values.
            Checks for images mask requirements and makes changes to the palette if needed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.BitmapFactory.GetPixelDataAsIs(TallComponents.PDF.Base.Graphics.Images.RawImage,System.Byte[],System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method copies pixel data to a bitmap, assuming the data is in the same format as
            the bitmap wants it to be. So the number of components and the number of bits per
            component should match.
            </summary>
            <param name="rawImage">Get the pixel data from this image.</param>
            <param name="output">The buffer where the bitmap data must be stored</param>
            <param name="bufferSize">The size of the buffer in bytes</param>
            <param name="components">The number of color components</param>
            <param name="bitAlignment">The number of bits each scan-line is aligned to</param>
            <param name="bitsPerComponent">The number of bits per component</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.BitmapFactory.GetPixelData1CompUpsampled(TallComponents.PDF.Base.Graphics.Images.RawImage,System.Byte[],System.UInt32)">
            <summary>
            This method copies pixeldata to a bitmap, assuming the number of components is 1 and
            the number of bits in the image is 2, but in the bitmap we need 4 bits per component.
            All other requests with one component are copied as is or downsampled from 16 to 8 bpc.
            </summary>
            <param name="rawImage"></param>
            <param name="output">The buffer where the bitmap data must be stored</param>
            <param name="bufferSize">The size of the buffer in bytes</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.BitmapFactory.GetPixelDataNCompUpsampled(TallComponents.PDF.Base.Graphics.Images.RawImage,System.Byte[],System.UInt32,System.Int32,System.Int32,System.Nullable{System.Byte},System.Int32)">
            <summary>
            This method copies pixeldata to a bitmap, assuming the number of bits in
            the image is less than 8, but in the bitmap we need 8 bits per component.
            </summary>
            <param name="rawImage"></param>
            <param name="output">The buffer where the bitmap data must be stored</param>
            <param name="bufferSize">The size of the buffer in bytes</param>
            <param name="components">The number of color components</param>
            <param name="bitAlignment">The alignment of a scan-line in bits</param>
            <param name="extraCompValue">Value for extra components which are not in the original image</param>
            <param name="bpc">Bits per component</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Images.BitmapFactory.GetPixelDataNCompDownsampled(TallComponents.PDF.Base.Graphics.Images.RawImage,System.Byte[],System.UInt32,System.Int32,System.Int32,System.Nullable{System.Byte})">
            <summary>
            This method copies pixeldata to a bitmap, assuming the number of bits in
            the image is 16, but in the bitmap we need 8 bits per component.
            This is the only scenario where we need to downsample.
            </summary>
            <param name="rawImage"></param>
            <param name="output">The buffer where the bitmap data must be stored</param>
            <param name="bufferSize">The size of the buffer in bytes</param>
            <param name="components">The number of color components</param>
            <param name="bitAlignment">The number of bits at which a row should be aligned.</param>
            <param name="extraCompValue">Value for extra components which are not in the original image</param>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.Images.PDFPixelFormat">
            <summary>
            Our own pixel format definition. PDF has been added to avoid name clashes (for now).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.Images.PDFPixelFormat.Indexed1">
            <summary>
            1 bpp, indexed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.Images.PDFPixelFormat.Indexed4">
            <summary>
            4 bpp, indexed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.Images.PDFPixelFormat.Indexed8">
            <summary>
            8 bpp, indexed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.Images.PDFPixelFormat.Rgb24">
            <summary>
            24 bpp, RGB, windows order.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.Images.PDFPixelFormat.Argb32">
            <summary>
            32 bpp, ARGB, windows order.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.GDIContentConsumer">
            <summary>
            Specialization of StateConsumer that converts all PDF graphics instructions to GDI+ calls.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.GDIContentConsumer.#ctor(TallComponents.PDF.Base.Graphics.IRenderSettings,System.Drawing.Graphics,TallComponents.PDF.Base.Rectangle,System.Int32,TallComponents.PDF.Base.Graphics.IReporting)">
             <summary>
            
             </summary>
             <param name="renderSettings">Render settings.</param>
             <param name="graphics">Draw to this Graphics object.</param>
             <param name="rect">The rectangle of the PDF object that is drawn.</param>
             <param name="rotate">The page orientation in degrees.</param>
             <param name="reporting">The summary to which diagnostics are written.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.GDIContentConsumer.setOuterClipping(System.Drawing.Graphics)">
            <summary>
            sets the outer clipping region.
            </summary>
            <param name="graphics">The graphics state.</param>
            <remarks>The clipping region that is returned by graphics.Clip is relative to the current transformation, so
            its result also depends on the current transformation. We invoke this method at the Start override, so the
            outer clippling region is the region as it was at that point.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.GDIContentConsumer.Start(TallComponents.PDF.Base.Graphics.Content)">
            <summary>
            Prepares the content consumer for consumption of a content stream:
            sets the resolution of the graphics used to draw on.
            </summary>
            <param name="content">Content to prepare.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.GDIContentConsumer.GetBitmapSize(TallComponents.PDF.Base.Graphics.Images.ImageStream)">
            <summary>
            Return the size of the image in pixels as it will be painted on the GDI+ Graphics.
            If the image will be rotated, we return the original size.
            </summary>
            <param name="image">The ImageStream which represents the image.</param>
            <returns>The size of the image as it will be painted on the GDI+ Graphics.</returns>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.GDIContentConsumer.drawOverflowMarker(System.Drawing.Graphics,System.Single)">
            <summary>
            Renders an overflow marker of the given size at the origin.
            </summary>
            <param name="graphics">The graphics object.</param>
            <param name="size">The size of the overflow marker.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.GDIContentConsumer.DrawUpsampledImage(System.Drawing.Graphics,System.Drawing.Bitmap,System.Drawing.Rectangle,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Draws an images to the provided graphics instance. This is method implements
            a workaround for some printing issues in GDI+ (see case 3012, and case 5051).
            </summary>
            <param name="graphics">The graphics instance to draw to.</param>
            <param name="bitmap">The source bitmap.</param>
            <param name="destinationRectangle">Rectangle to draw into.</param>
            <param name="attrs">Image attributes.</param>
            <remarks>
            <para>Currently, we avoid these workarounds when the PageUnit is Pixel or Display, as these
            modes are typically used for bitmap rendering, which is not problematic.
            </para>
            <para>For case 3012, This is a workaround for an issue in GDI+ when printing low resolution images,
            in particular barcode images. Without special measures, GDI appears to generate
            heavily interpolated result, which makes barcodes fuzzy, so that they fail to
            scan. Setting the interpolation mode to NearestNeighbour on the other hand
            causes merging and dropping of pixels, which is also disastruous for a barcode.
            </para><para>
            The effect is as if GDI interpolates for a far lower resolution than the printer
            has.
            </para><para>
            Setting de dpi of these images very low helps a bit, but not enough. Other
            GDI settings appear to have no effect.
            </para><para>
            The only thing that appears to help, is to generate an image with a higher
            resolution. To avoid interpolation artefacts, we turn interpolation off, and
            upsample with an integer. The latter makes sure that the higher resolution
            pixels are aligned with the original ones.
            </para>
            <para>We avoid upsampling images that have
            both sides larger than 150, as this problem typically occurs for very small images.
            Also see case 3621, that would otherwise lead to a much larger print spool size.
            Note that we may have to provide a flag for this at some point, as this boundary
            is rather arbitary. </para>
            <para>For case 5051 we have an image that is only 1 pixel wide which get scaled up. This
            goes alright for bitmap rendering, but the image disappears when printing. Here too,
            the solution appears to be to create an image with more "body".
            </para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.Patterns.GdiShadingBrushFactory">
            <summary>
            Factory that creates the GDI shading brushes from a IShading.
            This factory uses the corresponding method from the shading. These methods are internal
            and are not in IShading, because we do not want System.Drawing to appear in the public
            interface.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Patterns.GdiShadingBrushFactory.#ctor">
            <summary>
            Private constructor. The fact that it is private ensures that the class cannot be instantiated.
            .NET 1.1 does not allow a static class. This is the workaround.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Patterns.GdiShadingBrushFactory.CreateBrush(TallComponents.PDF.Base.Graphics.Patterns.IPattern,TallComponents.PDF.Base.Graphics.GraphicsState,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.SmoothingMode,System.Drawing.Drawing2D.InterpolationMode,TallComponents.PDF.Base.Graphics.MetaContentConsumer,TallComponents.PDF.Base.Rectangle,System.Boolean)">
            <summary>
            Create a GDI+ brush from the given pattern, graphics state and tranformation matrices.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Patterns.GdiShadingBrushFactory.CreateBrush(TallComponents.PDF.Base.Graphics.Patterns.IShading,TallComponents.PDF.Base.Graphics.GraphicsState,System.Drawing.Drawing2D.Matrix,TallComponents.ColorManagement.IccProfile,TallComponents.PDF.Base.Rectangle,System.Boolean)">
            <summary>
            Create a GDI+ brush from the given shading pattern, graphics state and tranformation matrices.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Patterns.GdiShadingBrushFactory.TensorProductPatch.MapDomainNValues(System.Double[],System.Int32,System.UInt32[])">
            <summary>
            Return interpolated values, based on the specified domain.
            </summary>
            <param name="domain">The domain. This is an array of minimum and maximum values,
            one pair for each dimension.</param>
            <param name="bitsPerValue">Bits per value for the incoming values. This
            defines the minimum and maximum values of the incoming values.</param>
            <param name="values">The incoming values.</param>
            <returns>The remapped values.</returns>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.Patterns.GdiShadingBrushFactory.TensorProductPatch.C1">
            <summary>
            The "bottom" curve.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.Patterns.GdiShadingBrushFactory.TensorProductPatch.C2">
            <summary>
            The "top" curve.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.Patterns.GdiShadingBrushFactory.TensorProductPatch.D1">
            <summary>
            The "left" curve.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.Patterns.GdiShadingBrushFactory.TensorProductPatch.D2">
            <summary>
            The "right" curve.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.GdiSoftMask">
            <summary>
            A soft mask definition.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.GdiSoftMask.#ctor(TallComponents.PDF.Base.Graphics.SoftMaskDictionary,TallComponents.PDF.Base.Geom.AffineTransform,TallComponents.PDF.Base.Graphics.IRenderSettings)">
            <summary>
            Initialize a new SoftMask, based on a soft mask Dictionary.
            </summary>
            <param name="softMaskDictionary"></param>
            <param name="ctm"></param>
            <param name="renderSettings"></param>
            <remarks>
            <para>Soft masks specify alpha values and in principle, a soft mask can consist of any sequence of
            graphics. Currently the GdiSoftmask supports creating a masked brush, and painting an XForm object
            through a mask.
            </para>
            <para>As GDI does not support combinining abitrary graphics with arbitrary soft masks, we implement this
            by creating bitmaps for both, and combining these into a new bitmap that has the appropriate alpha values.
            The main problem with this is finding the appropriate resulution.
            </para>
            <para>Currently we just generate the graphics
            at 200 dpi, which appears to be low enough to avoid memory issues, and high enough to avoid pixellated
            output. Currently, we know of only one case in which this is somehwat noticeable: see case 2969, look
            at the verizon logo's and zoom in (using controls). At "normal" zoom factor, the logo looks fine (and
            better than without applying the mask).
            </para>
            <para>There are basically two ways in which to improve the resolution:
            <list type="number">
            <item>
            Delay generating the bitmaps until we are rendering on to the final device. This means that we
            will need to introduce some "softmask" metacontent that carries both the mask and the actual graphics as vector
            graphics (not as PDF graphics, but as metacontent).
            </item>
            <item>
            Detect special cases that (probably) can be represented in GDI, such as linear gradients. I suspect that this
            is too specific, and too complex to pay off.
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.GdiSoftMask.CreateBrush(TallComponents.Gdi.Brush,TallComponents.PDF.Base.Graphics.IRenderSettings,TallComponents.PDF.Base.Graphics.IReporting,System.Boolean)">
            <summary>
            Create a SoftMask brush based on another brush (e.g. pattern)
            Not very well tested, because it is an extremely rare case, but it works at least in the case of #1605015536
            </summary>
            <param name="brush"></param>
            <param name="renderSettings"></param>
            <param name="reporting"></param>
            <param name="fromRadialShading"></param>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.MetaContentConsumer">
            <summary>
            Specialization of StateConsumer that adds all PDF graphics to a MetaContent object. Note that this class
            does not consume metacontent consumes state and produces metacontent.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.MetaContentConsumer.#ctor(TallComponents.PDF.Base.Graphics.IRenderSettings,TallComponents.PDF.Base.Rectangle,System.Int32,TallComponents.PDF.Base.Graphics.IReporting)">
            <summary>
            
            </summary>
            <param name="renderSettings">Render settings.</param>
            <param name="rect">The drawing area.</param>
            <param name="rotate">The page orientation in degrees.</param>
            <param name="reporting">The summary to which diagnostics are written.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.MetaContentConsumer.#ctor(TallComponents.PDF.Base.Graphics.IRenderSettings,TallComponents.PDF.Base.Graphics.ResourceCache,TallComponents.PDF.Base.Rectangle,System.Int32,TallComponents.PDF.Base.Graphics.IReporting)">
            <summary>
            Initialise the meta content consumer.
            </summary>
            <param name="renderSettings">Render settings.</param>
            <param name="resourceCache">The resource cache that the meta content consumer uses.
             It is the responsibity of the caller to dispose the cache after use.
            </param>
            <param name="rect">The drawing area.</param>
            <param name="rotate">The page orientation in degrees.</param>
            <param name="reporting">The summary to which diagnostics are written.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.MetaContentConsumer.#ctor(TallComponents.PDF.Base.Graphics.IRenderSettings,TallComponents.PDF.Base.Graphics.ResourceCache,TallComponents.PDF.Base.Graphics.Meta.MetaContent,TallComponents.PDF.Base.Rectangle,System.Int32,TallComponents.PDF.Base.Graphics.IReporting)">
            <summary>
            Initialise the meta content consumer.
            </summary>
            <param name="renderSettings">Render settings.</param>
            <param name="resourceCache">The resource cache that the meta content consumer uses.
             It is the responsibity of the caller to dispose the cache after use.
            </param>
            <param name="metaContent">All meta operations will be added to this object.</param>
            <param name="rect">The drawing area.</param>
            <param name="rotate">The page orientation in degrees.</param>
            <param name="reporting">The summary to which diagnostics are written.</param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.MetaContentConsumer.GetRenderedRectangleSize(System.Drawing.Graphics,System.Drawing.Drawing2D.Matrix,System.Drawing.RectangleF)">
            <summary>
            This method returns a best guess for the number of pixels that the given rectangle will
            occupy in the real world.
            </summary>
            <param name="graphics">The current graphics instance.</param>
            <param name="transform">The transformation that will be used to drawn the image. Take care to provide the
            correct transformation.</param>
            <param name="rect">The rectangle in the "source" coordinate system, i.e. before applying the transformation.</param>
            <returns>The size of the rectangle in "pixels".</returns>
            <remarks>
            <para>
            In theory, our components uses coordinate system that uses points for its units, i.e. each unit is 1/72 of
            an inch. In practice, whether this is really true, depends on the properties of the graphics instance that
            is passed in. In the ideal situation, one passes in a graphics instance that has its PageUnit set to
            Point, and the dpi to the correct value for a particular device.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.MetaContentConsumer.GetPixelSize(System.Drawing.Graphics)">
            <summary>
            Delivers a rectangle in the current coordinate system that encompassed a pixel.
            </summary>
            <param name="graphics"></param>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.MetaContentConsumer.GetUnitSize(System.Drawing.Graphics,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Delivers a rectangle in the current coordinate system that encompassed a "unit".
            </summary>
            <param name="graphics"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.MetaContentConsumer.GetPixelSize(System.Drawing.Graphics,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Delivers a rectangle in the current coordinate system that encompassed a pixel.
            </summary>
            <param name="graphics"></param>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.Base.Graphics.MetaContentConsumer.ApplyColorKeyMask">
            <summary>
            
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Base.Graphics.MetaContentConsumer.SmoothingModePatternBrushes">
            <summary>
            
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Base.Graphics.MetaContentConsumer.InterpolationModePatternBrushes">
            <summary>
            
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Base.Graphics.MetaContentConsumer.fontFamilies">
            <summary>
            The fontFamilies table contains a map of all fontfamilies known in the system.
            This map is initialized lazily, and only once.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.Meta.ClipOperation">
            <summary>
            Summary description for ClipOperation.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.Meta.DrawImageOperation">
            <summary>
            Summary description for DrawImageOperation.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Meta.DrawImageOperation.draw1bppHorizontal(TallComponents.PDF.ILengthyJobMonitor,System.Drawing.Bitmap,System.Drawing.Bitmap,System.Drawing.Rectangle,System.Single,System.Single,System.Single,System.Single)">
            <summary>Draws the bitmap into a target bitmap. The origin of the source bitmap is
            considered to be at its lower-left corner, with the y-axis pointing up and the
            x-axis pointing to the right.
            </summary>
            <param name="lengthyJobMonitor"></param>
            <param name="targetBitmap">The bitmap to draw into.</param>
            <param name="clippingBitmap">The clipping mask.</param>
            <param name="targetRect">The part of the target bitmap that the source must be drawn into.</param>
            <param name="startX">The x coordinate of the source pixel that will be drawn at
            position (0,0) of the target.</param>
            <param name="startY">The y coordinate of the source pixel that will be drawn at
            position (0,0 of the target.</param>
            <param name="endX">The x coordinate of the source pixel that will be drawn at
            position (width -1 , height -1) of the target.</param>
            <param name="endY">The y coordinate of the sourse pixel that will be drawn at
            position (width -1 , height -1) of the target.</param>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.Meta.DrawTextOperation">
            <summary>
            Summary description for DrawImageOperation.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.Meta.FillOperation">
            <summary>
            Summary description for FillOperation.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.Meta.FillThenStrokeOperation">
            <summary>
            Summary description for FillThenStrokeOperation.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.Meta.LayerOperation">
            <summary>
            A layer operations marks the start of content that is part of a particular layer.
            </summary>
            <remarks>The end of a particular layer section is marked by another layer operation. If
            the layer is null, the following operations are not part of a layer.</remarks>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.Meta.MessageOperation">
            <summary>
            This operation is produced whenever a reporting message is produced during the production of the
            metacontent.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.Meta.MetaContent">
            <summary>
            Summary description for MetaContent.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Meta.MetaContent.Start">
            <summary>
            Invoked by the producer of this metacontent object. Signals another nested start.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Meta.MetaContent.End">
            <summary>
            Invoked by the producer if this metacontent objects. Signals a (nested) end. If the outer level
            has been reached, the "Done" property will be set to tue, and waiting threads will be woken up.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.Meta.MetaGraphicsState">
            <summary>
            The graphics state while drawing meta (fast) content.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Base.Graphics.Meta.MetaGraphicsState.Layers">
            <summary>
            The layers that are in effect while rendering (not generating) the metadata.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Base.Graphics.Meta.MetaGraphicsState.RenderingEnabled">
            <summary>
            If turned off, graphical operations will have no effect. The layer operations use this
            to (temporarily) turn off/on rendering.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.Meta.MetaOperation">
            <summary>
            Summary description for MetaOperation.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Base.Graphics.Meta.MetaOperation.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.Meta.StrokeOperation">
            <summary>
            Summary description for StrokeOperation.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Base.Graphics.MarkedContentStack">
            <summary>
            Summary description for MarkedContentStack.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.InvalidXhtmlException">
            <summary>
            Thrown when invalid XHTML is encountered.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.InvalidXhtmlException.#ctor(System.String)">
            <summary>
            Create a new InvalidXhtmlException.
            </summary>
            <param name="message">Description of the cause of this exception</param>
        </member>
        <member name="M:TallComponents.PDF.InvalidXhtmlException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new InvalidXhtmlException.
            </summary>
            <param name="message">Description of the cause of this exception</param>
            <param name="inner">The exception that caused this exception.</param>
        </member>
        <member name="T:TallComponents.PDF.UnsupportedImageException">
            <summary>
            Thrown when an image is encountered that is not supported.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.UnsupportedImageException.#ctor(System.String)">
            <summary>
            Construct a new UnsupportedImageFormatException with a message.
            </summary>
            <param name="message">A descriptive message for this exception</param>
        </member>
        <member name="M:TallComponents.PDF.UnsupportedImageException.#ctor(System.String,System.Exception)">
            <summary>
            Construct a new UnsupportedImageFormatException with a message and an inner exception.
            </summary>
            <param name="message">A descriptive message for this exception</param>
            <param name="innerEx">The exception that caused this exception.</param>
        </member>
        <member name="T:TallComponents.PDF.Border">
            <summary>
            Specifies the border for objects.
            </summary>
            <remarks>
            A border is a rectangle that can be applied to a table,
            row and cell. The appearance of a border is defined by the four pens with which
            the left, right, top en bottom edges are drawn and the brush with which the
            background is filled. The size and position of a border is determined by the enclosed content.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Border.#ctor">
            <summary>
            Initialize a new instance of the Border class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Border.#ctor(TallComponents.PDF.Colors.Color,System.Double)">
            <summary>
            Initialize a new instance of the Border class with the given color and width.
            </summary>
            <remarks>
            Create a new border with given pen color and fractional width.
            </remarks>
            <param name="color">Color of pen.</param>
            <param name="width">Width of pen.</param>
        </member>
        <member name="M:TallComponents.PDF.Border.#ctor(TallComponents.PDF.Brushes.Brush)">
            <summary>
            Initialize a new instance of the Border class with the given brush.
            </summary>
            <remarks>
            Create a new border with given background brush.
            </remarks>
            <param name="background">Background is painted with this brush.</param>
        </member>
        <member name="M:TallComponents.PDF.Border.#ctor(TallComponents.PDF.Colors.Color,System.Double,TallComponents.PDF.Brushes.Brush)">
            <summary>
            Initialize a new instance of the Border class with the given color, width and brush.
            </summary>
            <remarks>
            Create a new border with given pen color and fractional width and background brush.
            </remarks>
            <param name="color">Color of pen.</param>
            <param name="width">Fractional width of pen.</param>
            <param name="background">Background is painted with this brush.</param>
        </member>
        <member name="M:TallComponents.PDF.Border.#ctor(TallComponents.PDF.Pens.Pen,TallComponents.PDF.Brushes.Brush)">
            <summary>
            Initialize a new instance of the Border class with given pen and brush.
            </summary>
            <remarks>
            Create a new border with given pen and background brush.
            </remarks>
            <param name="pen">The pen that is used to draw the the edges. Must not be <see langword="null"/>.</param>
            <param name="background">Background is painted with this brush.</param>
        </member>
        <member name="M:TallComponents.PDF.Border.#ctor(TallComponents.PDF.Colors.Color,System.Double,TallComponents.PDF.Pens.DashPattern,TallComponents.PDF.Brushes.Brush)">
            <summary>
            Initialize a new instance of the Border class with given color, width, patern and brush.
            </summary>
            <remarks>
            Create a new border with given pen color, fractional width, pattern and background brush.
            </remarks>
            <param name="color">Color of pen.</param>
            <param name="width">Width of pen, must be a valid, non-negative number.</param>
            <param name="pattern">Pattern of pen.</param>
            <param name="background">Background is painted with this brush.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when width is negative or invalid (NaN or Infinity).</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when pattern is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Border.Left">
            <summary>
            Get or set the pen that is used to draw the left edge.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Border.Right">
            <summary>
            Get or set the pen that is used to draw the right edge.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Border.Top">
            <summary>
            Get or set the pen that is used to draw the top edge.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Border.Bottom">
            <summary>
            Get or set the pen that is used to draw the bottom edge.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Border.Background">
            <summary>
            Get or set the brush that is used to fill the background.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Border.CopyFrom(TallComponents.PDF.Border)">
            <summary>
            Copy the values for left, right, top and bottom and Background from another Border object.
            </summary>
            <param name="other">The object to copy values from.</param>
        </member>
        <member name="M:TallComponents.PDF.Border.Clone">
            <summary>
            Clones a Bordered.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Border.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Border
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Object">
            <summary>
            Base class of all objects, no public functionality is provided.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Spacing">
            <summary>
            Spacing is used to define Margin and Padding.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Spacing.#ctor">
            <summary>
            Initializes a new instance of the Spacing class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Spacing.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the Spacing class with the given spacing.
            </summary>
            <param name="val">The spacing in points to be assigned to all sides.</param>
        </member>
        <member name="M:TallComponents.PDF.Spacing.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Spacing class with the given spacing.
            </summary>
            <param name="top">The spacing in points to be assigned to the top.</param>
            <param name="left">The spacing in points to be assigned to the left.</param>
            <param name="right">The spacing in points to be assigned to the right.</param>
            <param name="bottom">The spacing in points to be assigned to the bottom.</param>
        </member>
        <member name="P:TallComponents.PDF.Spacing.Left">
            <summary>
            Spacing on the left side
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Spacing.Right">
            <summary>
            Spacing on the right side
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Spacing.Top">
            <summary>
            Spacing above.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Spacing.Bottom">
            <summary>
            Spacing below.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Spacing.op_Implicit(System.Double)~TallComponents.PDF.Spacing">
            <summary>
            Set the Left, Right, Top and Bottom values to the same value.
            </summary>
            <param name="val">The value to assign.</param>
            <returns>A new Spacing instance.</returns>
        </member>
        <member name="M:TallComponents.PDF.Spacing.op_Implicit(TallComponents.PDF.Unit)~TallComponents.PDF.Spacing">
            <summary>
            Set the Left, Right, Top and Bottom values to the same value.
            </summary>
            <param name="val">The value to assign.</param>
            <returns>A new Spacing instance.</returns>
        </member>
        <member name="M:TallComponents.PDF.Spacing.Clone">
            <summary>
            Clones a Spacing.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Spacing.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Spacing.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Spacing.CopyFrom(TallComponents.PDF.Spacing)">
            <summary>
            Copy the values for left, right, top and bottom from another Spacing object.
            </summary>
            <remarks>Using this method is preferred above assigning the object.</remarks>
            <param name="other">The object to copy values from.</param>
        </member>
        <member name="T:TallComponents.PDF.Metadata.CustomXmpSchema">
            <summary>
            CustomXmpSchema that reads and writes custom properties.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Metadata.CustomXmpSchema.#ctor(TallComponents.PDF.Base.Metadata.Xmp.XmpPacket,System.String,System.String)">
            <summary>
            Create a new Custom XMP schema
            </summary>
            <param name="packet">The XMP packet to use.</param>
            <param name="prefix">The prefix for this schema.</param>
            <param name="namespaceUri">The namespace URI for the schema.</param>
        </member>
        <member name="P:TallComponents.PDF.Metadata.CustomXmpSchema.Item(System.String)">
            <summary>
            Get or set a property in this schema.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Metadata.CustomXmpSchema.Clear">
            <summary>
            Remove all properties in this schema.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Metadata.CustomXmpSchema.Add(System.String,System.String)">
            <summary>
            Add a property to the schema.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="P:TallComponents.PDF.Metadata.CustomXmpSchema.Prefix">
            <summary>
            The prefix for this schema.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Metadata.CustomXmpSchema.NamespaceUri">
            <summary>
            The namespace URI for this schema.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Metadata.MetadataSchema">
            <summary>
            Base class for Metadata schemas.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Metadata.MetadataSchema.Item(System.String)">
            <summary>
            Get or set data by name.
            </summary>
            <param name="name">The name of the value.</param>
            <returns>The <see cref="T:TallComponents.PDF.Metadata.MetadataValue"/> associated with the given key, or <see langword="null"/> if not found.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when this <see cref="T:TallComponents.PDF.Metadata.MetadataSchema"/> has been removed from its <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection"/></exception>
        </member>
        <member name="M:TallComponents.PDF.Metadata.MetadataSchema.Add(System.String,System.String)">
            <summary>
            Add a simple value to the schema.
            </summary>
            <remarks>
            Currently only simple values are supported for XMP schemas. Collections such as Bag, Alt and Seq are not supported.
            </remarks>
            <param name="name">The name of this value.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when this <see cref="T:TallComponents.PDF.Metadata.MetadataSchema"/> has been removed from its <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection"/></exception>
            <exception cref="T:System.ArgumentException">Thrown when a value with the same name is already set.</exception>
        </member>
        <member name="P:TallComponents.PDF.Metadata.MetadataSchema.Names">
            <summary>
            The names of all values in this metadata schema.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when this <see cref="T:TallComponents.PDF.Metadata.MetadataSchema"/> has been removed from its <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection"/></exception>
        </member>
        <member name="P:TallComponents.PDF.Metadata.MetadataSchema.Prefix">
            <summary>
            The prefix associated to the namespace uri.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when this <see cref="T:TallComponents.PDF.Metadata.MetadataSchema"/> has been removed from its <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection"/></exception>
        </member>
        <member name="P:TallComponents.PDF.Metadata.MetadataSchema.NamespaceUri">
            <summary>
            The namespace URI.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when this <see cref="T:TallComponents.PDF.Metadata.MetadataSchema"/> has been removed from its <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection"/></exception>
        </member>
        <member name="M:TallComponents.PDF.Metadata.MetadataSchema.Clear">
            <summary>
            Clear all the values from this schema.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Metadata.MetadataSchemaCollection">
            <summary>
            The XMP Metadata Schema collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.#ctor">
            <summary>
            Create a new <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection">MetadataSchemaCollection</see>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.#ctor(TallComponents.PDF.Base.Metadata.Xmp.XmpPacket)">
            <summary>
            Create a new <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection">MetadataSchemaCollection</see>.
            </summary>
            <param name="packet">The XmpPacket to work on.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="packet"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.Add(System.String,System.String)">
            <summary>
            Create and add a new MetadataSchema to this collection.
            </summary>
            <param name="prefix">The prefix of the new schema.</param>
            <param name="namespaceUri">The namespace URI of the new schema.</param>
            <returns>The new schema.</returns>
            <remarks>
            <para>A schema must have a unique prefix.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.Contains(System.String)">
            <summary>
            Determine whether the <see cref="T:TallComponents.PDF.Metadata.MetadataSchema"/> with gicen prefix is in the <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection"/>.
            </summary>
            <param name="prefix">The <see cref="T:TallComponents.PDF.Metadata.MetadataSchema"/> to look for.</param>
            <returns>True if the prefix is found in this <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="prefix"/> does not accept <see langword="null"/> as a valid value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="prefix"/> is <see langword="null"/>.</exception>
            <example>
            C#
            <code>
            Document doc = new Document();
            doc.Metadata.Create( "tc", "http://www.tallcomponents.com/xmp/schema/v1.0/" );
            bool found = doc.Metadata.<b>Contains</b>( "tc" ); //found = true
            found = doc.Metadata.<b>Contains</b>( "anotherPrefix" ); //found = false
            </code>
            VB.NET
            <code>
            Dim doc as Document = new Document()
            doc.Metadata.Create( "tc", "http://www.tallcomponents.com/xmp/schema/v1.0/" )
            Dim found as Boolean
            found = doc.Metadata.<b>Contains</b>( "tc" ) 'found = True
            found = doc.Metadata.<b>Contains</b>( "anotherPrefix" ) 'found = False
            </code>
            </example>
        </member>
        <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.Remove(System.String)">
            <summary>
            Remove a <see cref="T:TallComponents.PDF.Metadata.MetadataSchema"/> from this <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection"/>.
            </summary>
            <remarks>
            The schema is remove from the <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection"/> and all properties are cleared.
            The <see cref="T:TallComponents.PDF.Metadata.MetadataSchema"/> is no longer valid and cannot be used anymore.
            </remarks>
            <param name="prefix">The prefix of the <see cref="T:TallComponents.PDF.Metadata.MetadataSchema"/> to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="prefix"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Metadata.MetadataSchemaCollection.Item(System.String)">
            <summary>
            Retrieve an <see cref="T:TallComponents.PDF.Metadata.MetadataSchema"/> by its prefix from the <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection"/>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Metadata.MetadataSchemaCollection.Count">
            <summary>
            Get the number of <see cref="T:TallComponents.PDF.Metadata.MetadataSchema"/>s actually contained in the <see cref="T:TallComponents.PDF.Metadata.MetadataSchemaCollection"/>
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.Clone">
            <summary>
            Clones a MetadataSchemaCollection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Metadata.MetadataSchemaCollection.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a MetadataSchemaCollection
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Metadata.MetadataString">
            <summary>
            A string value for a <see cref="T:TallComponents.PDF.Metadata.MetadataSchema">MetadataSchema</see>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Metadata.MetadataString.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Metadata.MetadataValue">
            <summary>
            Abstact base class for Metadata values
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Metadata.MetadataValue.Create(TallComponents.PDF.Base.Metadata.Rdf.RdfNode)">
            <summary>
            Factory method.
            </summary>
            <param name="rdfValue"></param>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.Metadata.MetadataValue.RdfValue">
            <summary>
            The underlaying RDF value.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Metadata.UnsupportedMetadataValue">
            <summary>
            A value for a <see cref="T:TallComponents.PDF.Metadata.MetadataSchema"/> that has an unupported type.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.PageLayout">
            <summary>
            The page layout of the document in the PDF viewer.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageLayout.SinglePage">
            <summary>
            Display one page at a time.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageLayout.OneColumn">
            <summary>
            Display pages in one column.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageLayout.TwoColumnLeft">
            <summary>
            Display pages in 2 columns; odd page left.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageLayout.TwoColumnRight">
            <summary>
            Display pages in 2 column; odd page right.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.PageMode">
            <summary>
            The page mode of the document in the PDF viewer.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageMode.None">
            <summary>
            Display none.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageMode.Outlines">
            <summary>
            Display outlines (also known as bookmarks).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageMode.Thumbnails">
            <summary>
            Display thumbnails.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageMode.FullScreen">
            <summary>
            Display document fullscreen.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.ViewerPreferences">
            <summary>
            Settings used to control the way the document is displayed in a PDF viewer.
            </summary>
            <remarks>
            If no viewer preferences are set, the user defaults will be used.
            <para>You can override the user defaults for a document by assigning a new instance
            of this class to the <see cref="P:TallComponents.PDF.Document.ViewerPreferences"/> property.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Navigation.ViewerPreferences.#ctor">
            <summary>
            Creates a new ViewerPreferences object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.HideToolbar">
            <summary>
            Hide toolbar.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.HideMenubar">
            <summary>
            Hide menubar.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.HideWindowUI">
            <summary>
            Hides everything except the document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.FitWindow">
            <summary>
            Fits the first page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.CenterWindow">
            <summary>
            Centers document window.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.DisplayDocTitle">
            <summary>
            Displays the document title in the caption bar.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.PageMode">
            <summary>
            Display none, outlines or thumbnails.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.PageLayout">
            <summary>
            How to display pages.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.ZoomFactor">
            <summary>
            The default zoom factor for this document (1 corresponds to 100%).
            </summary>
            <remarks>
            0 means that the current value is to be retained unchanged.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.ViewArea">
            <summary>
            The page boundary representing the area of the page to be displayed when viewing the document on the screen.
            </summary>
            <remarks>This entry is intended for prepress applications that manipulate page boundaries.
            Most consumer applications disregard it.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.ViewClip">
            <summary>
            The page boundary to which the contents of the page are to be clipped when viewing the document on the screen.
            </summary>
            <remarks>This entry is intended for prepress applications that manipulate page boundaries.
            Most consumer applications disregard it.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.PrintArea">
            <summary>
            The page boundary representing the area of the page to be rendered when printing the document.
            </summary>
            <remarks>This entry is intended for prepress applications that manipulate page boundaries.
            Most consumer applications disregard it.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.PrintClip">
            <summary>
            The page boundary to which the contents of the page are to be clipped when printing the document.
            </summary>
            <remarks>This entry is intended for prepress applications that manipulate page boundaries.
            Most consumer applications disregard it.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.Duplex">
            <summary>
            The paper handling option that shall be used when printing the file from the print dialog.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.PrintScaling">
            <summary>
            The page scaling option that shall be selected when a print dialog is displayed for this document.
            </summary>
            <remarks>Default value is AppDefault.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.PickTrayByPdfSize">
            <summary>
            A flag specifying whether the PDF page size shall be used to select the input paper tray.
            </summary>
            <remarks>
            This setting influences only the preset values used to populate the print dialog presented by a conforming reader.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.NumCopies">
            <summary>
            The number of copies that shall be printed when the print dialog is opened for this file.
            </summary>
            <remarks>
            Values outside this range shall be ignored. This property will store any integer specified,
            but Adobe Reader appears not to show values larger than 5 in its document properties
            panel.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.PrintPageRange">
            <summary>
            The page numbers used to initialize the print dialog box when the file is printed.
            </summary>
            <remarks><para>This value can be null.</para><para>If a range is specified outside
            the actual pages of the document that this method will store this range, but Adobe
            Reader may not show it in its document properties panel.</para>
            <para>The PDF reference manual
            erroneously states that the first page is denoted by 1. If you specify a range (0, 3) here, Adobe Reader will list
            it as (1 - 4) in its document properties panel.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.ReadDirection">
            <summary>
            The predominant reading order for the text in the document.
            </summary>
            <remarks>
            Default is LeftToRight.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ViewerPreferences.InitialPageIndex">
            <summary>
            The initial page that will be displayed in the PDF viewer. (zero-based, default = 0)
            </summary>
            <remarks>
            If the initial page index exceeds the number of pages in the document,
            the first page (index 0) will be displayed.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Navigation.ViewerPreferences.Clone">
            <summary>
            Clones a ViewerPreferences.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.ViewerPreferences.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a ViewerPreferences.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.GotoDestinationEventHandler">
            <summary>
            Represents the method that handles the GotoDestination event.
            </summary>
            <param name="e">The GotoDestination event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Navigation.InternalDestinationCollection">
            <summary>
            Named Destinations defined at document level. 
            </summary>
            <remarks>
            You cannot create an instance of this class. 
            Instead you retrieve an existing collection from the NamedDestinations
            property of the Document class.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.InternalDestinationCollection.Count">
            <summary>
            The number of destination names in this collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.InternalDestinationCollection.Names">
            <summary>
            The destination names in this document.
            </summary>
            <para>
            The names are case sensitive.
            </para>
        </member>
        <member name="P:TallComponents.PDF.Navigation.InternalDestinationCollection.Item(System.String)">
            <summary>
            Retrieve a Destination with a given name.
            </summary>
            <param name="name">The destination name.</param>
            <returns>An internal destination or null if the name cannot be found.</returns>
            <remarks>
            Setting an internal destination with an existing name, will override the existing item.
            <para>
            The name is case sensitive, you may use ASCII character only.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.InternalDestinationCollection.Item(TallComponents.PDF.Base.String)">
            <summary>
            Gets the <see cref="T:TallComponents.PDF.Navigation.InternalDestination"/> with the specified name.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.InternalDestinationCollection.Add(System.String,TallComponents.PDF.Navigation.InternalDestination)">
            <summary>
            Add a Destination with the given name.
            </summary>
            <param name="name">The name to use.</param>
            <param name="destination">The Destination to add.</param>
            <para>
            The name is case sensitive, you may use ASCII character only.
            </para>
        </member>
        <member name="M:TallComponents.PDF.Navigation.InternalDestinationCollection.Remove(System.String)">
            <summary>
            Removes the Destination object with the given name.
            </summary>
            <param name="name">The name to remove.</param>
            <remarks>
            Nothing happens when the name cannot be found.
            <para>
            The name is case sensitive.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Navigation.InternalDestinationCollection.Exists(System.String)">
            <summary>
            Check if the given name exists in the current collection.
            </summary>
            <param name="name">The destination name to check.</param>
            <returns>True if found, false otherwise</returns>
            <para>
            The name is case sensitive.
            </para>
        </member>
        <member name="M:TallComponents.PDF.Navigation.InternalDestinationCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.InternalDestinationCollection.Item(System.Int32)">
            <summary>
            The Destination associated with the given index.
            </summary>
            <param name="index">The zero-base index.</param>
            <returns>A destination object.</returns>
        </member>
        <member name="M:TallComponents.PDF.Navigation.InternalDestinationCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Navigation.InternalDestinationCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Navigation.InternalDestinationEnumerator">
            <summary>
            A custom enumerator to iterate over all items in the Internal Destination collection. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.InternalDestinationEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.InternalDestinationEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.Navigation.InternalDestinationEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the Destination collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.InternalDestinationEnumerator.Current">
            <summary>
            Gets the current element in the Destination collection.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.Bookmark">
            <summary>
            An item in the bookmark tree.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Navigation.Bookmark.PropertyChanged">
            <summary>
            Occurs when any property of the bookmark has changed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.Bookmark.#ctor">
            <summary>
            Create a new empty bookmark.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.Bookmark.#ctor(System.String)">
            <summary>
            Create a new empty bookmark, with a specified title
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.Bookmark.Title">
            <summary>
            Title of this bookmark.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.Bookmark.Italic">
            <summary>
            If set, display the bookmark italic.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.Bookmark.Bold">
            <summary>
            If set, display the bookmark bold.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.Bookmark.TextColor">
            <summary>
            The color for the title's text of this bookmark.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.Bookmark.Bookmarks">
            <summary>
            Children bookmarks.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.Bookmark.Parent">
            <summary>
            The parent bookmark. 
            </summary>
            <remarks>
            May be <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.Bookmark.Actions">
            <summary>
            The actions that are executed when this bookmark is activated.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.Bookmark.updateCount">
            <summary>
            Forces recomputation of the count property of this bookmark, and all its
            parents.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.BookmarkAddedEventArgs">
            <summary>
            An instance of this class is passed with the BookmarkAdded event of BookmarkCollection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.BookmarkAddedEventArgs.Bookmark">
            <summary>
            The bookmark that has been added.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.BookmarkAddedEventArgs.Index">
            <summary>
            The index of the bookmark that has been added.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.BookmarkCollection">
            <summary>
            A collection of child bookmarks or the root bookmarks.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Navigation.BookmarkCollection.BookmarkAdded">
            <summary>
            Raised after a bookmark has been added.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Navigation.BookmarkCollection.BookmarkRemoved">
            <summary>
            Raised after a bookmark has been removed.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Navigation.BookmarkCollection.Cleared">
            <summary>
            Raised after the collection has been cleared.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.#ctor">
            <summary>
            Create a new empty collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.Clear">
            <summary>
            Clear this collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.BookmarkCollection.Count">
            <summary>
            Number of bookmarks in this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.Navigation.BookmarkCollection.Item(System.Int32)">
            <summary>
            Get the bookmark at the specified index.
            </summary>
            <remarks>
            null is returned when a non existing index is specified.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.IndexOf(TallComponents.PDF.Navigation.Bookmark)">
            <summary>
            Returns the index of the specified bookmark in the collection.
            </summary>
            <param name="bookmark">The bookmark to locate in this collection.</param>
            <returns>The zero-based index of the item found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.Contains(TallComponents.PDF.Navigation.Bookmark)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Navigation.Bookmark">Bookmark</see> is in the <see cref="T:TallComponents.PDF.Navigation.BookmarkCollection">BookmarkCollection</see>.
            </summary>
            <param name="bookmark">The <see cref="T:TallComponents.PDF.Navigation.Bookmark"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Navigation.Bookmark"/> is found in this <see cref="T:TallComponents.PDF.Navigation.BookmarkCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="bookmark"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="bookmark"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.Add(TallComponents.PDF.Navigation.Bookmark)">
            <summary>
            Add an existing bookmark to the end of the collection.
            </summary>
            <param name="bookmark">Add this bookmark.</param>
        </member>
        <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.Remove(TallComponents.PDF.Navigation.Bookmark)">
            <summary>
            Remove a bookmark from this collection.
            </summary>
            <param name="bookmark">Remove this bookmark.</param>
            <returns>true if removing the bookmark succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.AddRange(TallComponents.PDF.Navigation.Bookmark[])">
            <summary>
            Adds the elements of a Bookmark array to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="bookmarks">The array of Bookmarks whose elements should be added to 
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="bookmarks"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.Insert(System.Int32)">
            <summary>
            Insert a new bookmark at the specified index.
            </summary>
            <param name="index">The index of the new bookmark.</param>
            <returns>The newly added bookmark.</returns>
        </member>
        <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.Insert(System.Int32,TallComponents.PDF.Navigation.Bookmark)">
            <summary>
            Insert an existing bookmark at the specified index.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.BookmarkCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a bookmark at the specified index.
            </summary>
            <param name="index">The index of the bookmark to remove.</param>
            <remarks>Removing a bookmark at a non-existing index is silently ignored.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.BookmarkCollection.Open">
            <summary>
            Indicates whether the bookmark collection is open (i.e. expanded).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.BookmarkCollection.VisibleCount">
            <summary>
            Returns the number of visible items in this collection, for this level, and all
            levels below it.
            </summary>
            <remarks>
            <para>If the collection is closed, this property will return 0.</para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Navigation.BookmarkAddedEventHandler">
            <summary>
            Specifies the signature of the method that handles the BookmarkAdded event of the Bookmark class.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.BookmarkRemovedEventArgs">
            <summary>
            An instance of this class is passed with the BookmarkRemoved event of BookmarkCollection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.BookmarkRemovedEventArgs.Index">
            <summary>
            The index of the bookmark that has been removed.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.BookmarkRemovedEventHandler">
            <summary>
            Specifies the signature of the method that handles the BookmarkRemoved event of the Bookmark class.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.PageIndexDestination">
            <summary>
            Describes a location inside this PDF document. 
            </summary>
            <remarks>
            Allows to specify the pagenumber directly. This allows having references in 
            event driven generation mode.
            <para>NOTE: By setting an invalid page (e.g.: page 99 in a 3 page document)
            this will result in a broken link!</para>
            <para>
            When extracting information from an existing document, this type will never be returned.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Navigation.PageIndexDestination.#ctor">
            <summary>
            Create a new (Internal) Page Index  Destination.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.PageIndexDestination.#ctor(System.Int32)">
            <summary>
            Create a new (Internal) Page Index Destination.
            </summary>
            <param name="pageIndex">The zero-based page index.</param>
            <remarks>
            WindowBehavior.UserPreference will be used.
            PageDisplay.FitEntire will be used. 
            <para>NOTE: There is no check that the page given is valid (existing)!</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.PageIndexDestination.PageIndex">
            <summary>
            The pageIndex this destination points to.
            </summary>
            <remarks>
            There is no check that the page given is valid (existing)!
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Navigation.NamedDestination">
            <summary>
            The named destination describe a location in a PDF document, based on a name.
            </summary>
            <remarks>
            See Document.NamedDestinations collection (InternalDestinationCollection) for the internal 
            destination this name resolves.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Navigation.NamedDestination.#ctor">
            <summary>
            Create a new named destination, without specifying a name.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.NamedDestination.#ctor(System.String)">
            <summary>
            Create a new named destination, with specifying a name.
            </summary>
            <param name="name">The name this named destination will initially get.</param>
        </member>
        <member name="P:TallComponents.PDF.Navigation.NamedDestination.Name">
            <summary>
            The name for this named destination.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.ExplicitDestination">
            <summary>
            Base class for classes that describe a location in a PDF document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.ExplicitDestination.#ctor">
            <summary>
            Create a new Destination.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ExplicitDestination.Left">
            <summary>
            The horizontal position (measured from the left in points) of the page that is displayed at the left edge of the page window.
            </summary>
            <remarks>
            double.NaN is used for: n/a or 'use the current value', this depends on the <see cref="P:TallComponents.PDF.Navigation.ExplicitDestination.PageDisplay"/> value.
            <para>
            Setting this value is not allowed for all <see cref="P:TallComponents.PDF.Navigation.ExplicitDestination.PageDisplay"/> values, see <see cref="P:TallComponents.PDF.Navigation.ExplicitDestination.PageDisplay"/> enum for details.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ExplicitDestination.Right">
            <summary>
            The horizontal position (measured from the left in points) of the page that is displayed at the right edge of the page window.
            </summary>
            <remarks>
            double.NaN is used for: n/a or 'use the current value', this depends on the <see cref="P:TallComponents.PDF.Navigation.ExplicitDestination.PageDisplay"/> value.
            <para>
            Setting this value is not allowed for all PageDisplay values, see <see cref="P:TallComponents.PDF.Navigation.ExplicitDestination.PageDisplay"/> enum for details.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ExplicitDestination.Top">
            <summary>
            The vertical position (measured from the bottom in points) of the page that is displayed at the top edge of the page window.
            </summary>
            <remarks>
            double.NaN is used for: n/a or 'use the current value', this depends on the <see cref="P:TallComponents.PDF.Navigation.ExplicitDestination.PageDisplay"/> value.
            <para>
            Setting this value is not allowed for all PageDisplay values, see <see cref="P:TallComponents.PDF.Navigation.ExplicitDestination.PageDisplay"/> enum for details.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ExplicitDestination.Bottom">
            <summary>
            The vertical position (measured from the bottom in points) of the page that is displayed at the bottom edge of the page window.
            </summary>
            <remarks>
            double.NaN is used for: n/a or 'use the current value', this depends on the <see cref="P:TallComponents.PDF.Navigation.ExplicitDestination.PageDisplay"/> value.
            <para>
            Setting this value is not allowed for all PageDisplay values, see <see cref="P:TallComponents.PDF.Navigation.ExplicitDestination.PageDisplay"/> enum for details.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ExplicitDestination.ZoomFactor">
            <summary>
            The zoom factor to use when displaying the page. 1 means actual size; 2 means magnify twice.
            </summary>
            <remarks>
            double.NaN is used for: n/a or 'use the current value', this depends on the <see cref="P:TallComponents.PDF.Navigation.ExplicitDestination.PageDisplay"/> value.
            <para>
            Setting this value is not allowed for all PageDisplay values, see <see cref="P:TallComponents.PDF.Navigation.ExplicitDestination.PageDisplay"/> enum for details.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.ExplicitDestination.PageDisplay">
            <summary>
            Specifies how the page is displayed after the destination is resolved.
            </summary>
            <remarks>
            Default = PageDisplay.PositionZoom;
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Navigation.IDestinationResolver">
            <summary>
            This interface is implemented by classes that resolve a Base.Object to a Destination.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.IDestinationResolver.ResolveInternal(TallComponents.PDF.Base.Object)">
            <summary>
            Resolve an internal destination (Named destinations are resolved).
            </summary>
            <param name="destinationObject">The Base.Object tot resolve.</param>
            <returns>An InternalDestination.</returns>
        </member>
        <member name="M:TallComponents.PDF.Navigation.IDestinationResolver.ResolveNamedOrInternal(TallComponents.PDF.Base.Object)">
            <summary>
            Resolve a named or internal destination.
            </summary>
            <param name="destinationObject">The Base.Object tot resolve.</param>
            <returns>A Destination.</returns>
        </member>
        <member name="M:TallComponents.PDF.Navigation.IDestinationResolver.ResolveRemote(TallComponents.PDF.Base.Object)">
            <summary>
            Resolve a remote destination.
            </summary>
            <param name="destinationObject">The Base.Object tot resolve.</param>
            <returns>A RemoteDestination.</returns>
        </member>
        <member name="T:TallComponents.PDF.Navigation.RemoteDestination">
            <summary>
            Describes a location inside an other PDF document. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.RemoteDestination.#ctor">
            <summary>
            Create a new Remote Destination.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.RemoteDestination.#ctor(System.String,System.Int32)">
            <summary>
            Create a new Remote Destination.
            </summary>
            <param name="path">The uniform resource locator (url) for this remote destination.</param>
            <param name="pageIndex">The zero-based index.</param>
            <remarks>
            WindowBehavior.UserPreference will be used.
            PageDisplay.FitEntire will be used.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Navigation.RemoteDestination.#ctor(System.String,System.Int32,TallComponents.PDF.Navigation.WindowBehavior)">
            <summary>
            Create a new Remote Destination.
            </summary>
            <param name="path">The uniform resource locator (url) for this remote destination.</param>
            <param name="pageIndex">The zero-based index.</param>
            <param name="windowBehavior">Whether to open the destination in a new windows, current one or specified by the user preferences.</param>
            <remarks>
            PageDisplay.FitEntire will be used.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Navigation.RemoteDestination.Path">
            <summary>
            The uniform resource locator (url) for this remote destination.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.RemoteDestination.PageIndex">
            <summary>
            The pageIndex this destination points to.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Navigation.RemoteDestination.WindowBehavior">
            <summary>
            Whether to open the destination in a new windows, current one or specified by the user preferences.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.InternalDestination">
            <summary>
            Describes a location inside a PDF document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.InternalDestination.#ctor">
            <summary>
            Create a new internal destination.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Navigation.InternalDestination.#ctor(TallComponents.PDF.Page)">
            <summary>
            Create a new internal destination, based on a page.
            </summary>
            <param name="page">The page to point to.</param>
        </member>
        <member name="M:TallComponents.PDF.Navigation.InternalDestination.#ctor(TallComponents.PDF.Navigation.RemoteDestination,TallComponents.PDF.Document)">
            <summary>
            An resolved internal destination based on a remote destination and a document
            </summary>
            <param name="remoteDestination">The remote destination.</param>
            <param name="document">The document to resolve.</param>
        </member>
        <member name="P:TallComponents.PDF.Navigation.InternalDestination.Page">
            <summary>
            The page this destination points to.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.Destination">
            <summary>
            Base class for classes that describe a location in a PDF document.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.DestinationResolver">
            <summary>
            This class can be used to resolve a Base.Object to a Destination.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.PageDisplay">
            <summary>
            Different ways to specifiy how the page is displayed in the viewer.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageDisplay.PositionZoom">
            <summary>
            The page is displayed with specified zoom and specified position.
            <para>
            The top and left positions and the zoom are specified by the Top, Left and Zoom properties of ExplicitDestination.
            </para>
            <para>
            The Right and Bottom properties of ExplicitDestination may not be set.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageDisplay.FitEntire">
            <summary>
            Fit the entire page both horizontally and vertically.
            </summary>
            <para>
            The Left, Right, Top, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageDisplay.FitHorizontally">
            <summary>
            Fit the page horizontally.
            <para>
            The top position is specified by the Top property of ExplicitDestination.
            </para>
            <para>
            The Left, Right, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageDisplay.FitVertically">
            <summary>
            Fit the page vertically.
            <para>
            The left position is specified by the Left property of ExplicitDestination.
            </para>
            <para>
            The Right, Top, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageDisplay.FitRectangle">
            <summary>
            Fit the specified rectangle. 
            <para>
            The rectangle is specified by the Left, Right, Top and Bottom properties of ExplicitDestination.
            </para>
            <para>
            The Zoom property of ExplicitDestination may not be set.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageDisplay.FitBoundingBox">
            <summary>
            Fit the bounding box of the page contents both horizontally and vertically.
            <para>
            The Left, Right, Top, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageDisplay.FitBoundingBoxHorizontally">
            <summary>
            Fit the bounding box of the page contents horizontally.
            <para>
            The top position is specified by the Top property of ExplicitDestination.
            </para>
            <para>
            The Left, Right, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.PageDisplay.FitBoundingBoxVertically">
            <summary>
            Fit the bounding box of the page contents vertically.
            <para>
            The left position is specified by the Left property of ExplicitDestination.
            </para>
            <para>
            The Right, Top, Bottom and Zoom properties of ExplicitDestination may not be set.
            </para>
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Navigation.WindowBehavior">
            <summary>
             Whether to open the destination in a new windows, current one or specified by the user preferences.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.WindowBehavior.NewWindow">
            <summary>
            Open in a new window.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.WindowBehavior.CurrentWindow">
            <summary>
            Open in the current window.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Navigation.WindowBehavior.UserPreference">
            <summary>
            Use the current user preference.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Pens.DashCollection">
            <summary>
            A dash collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashCollection.#ctor">
            <summary>
            Create an empty <see cref="T:TallComponents.PDF.Pens.DashCollection"/>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashCollection.#ctor(System.Double[])">
            <summary>
            Creates <see cref="T:TallComponents.PDF.Pens.DashCollection"/> with the provided pattern.
            </summary>
            <param name="pattern">The pattern used to initialize this <see cref="T:TallComponents.PDF.Pens.DashCollection"/></param>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashCollection.op_Implicit(System.Double[])~TallComponents.PDF.Pens.DashCollection">
            <summary>
            Provides implicit conversion from double[].
            </summary>
            <param name="pattern">The pattern that will be implicitly casted.</param>
            <returns>A DashCollection that has the same values as the provided double array.</returns>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashCollection.op_Implicit(TallComponents.PDF.Pens.DashCollection)~System.Double[]">
            <summary>
            Provides implicit conversion to double[].
            </summary>
            <param name="dashes">The dash collection that will be implicitly casted.</param>
            <returns>A double array that has the same values as the provided DashCollection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashCollection.Add(System.Double)">
            <summary>
            Adds an <see cref="T:System.Double">Dash</see> to the end of the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>.
            </summary>
            <param name="dash">The <see cref="T:System.Double">dash</see> to be addded to the end of the <see cref="T:TallComponents.PDF.Pens.DashCollection"/>.</param>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashCollection.Remove(System.Double)">
            <summary>
            Removes an <see cref="T:System.Double">dash</see> from this <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>.
            </summary>
            <param name="dash">The <see cref="T:System.Double">dash</see> to remove.</param>
            <returns>true if removing the <see cref="T:System.Double">dash</see> succeeded/</returns>
            <remarks>
            Note that this will remove the first <see cref="T:System.Double">dash</see> which is tha same as the provided value.
            We recommends to use RemoveAt(index).
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashCollection.AddRange(System.Double[])">
            <summary>
            Adds the entries in an array of <see cref="T:System.Double">dashes</see> to the end of the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>.
            </summary>
            <param name="dashes">The array of <see cref="T:System.Double">dashes</see> to be added to the end of the <see cref="T:TallComponents.PDF.Pens.DashCollection"/>.</param>
            <remarks>
            <para>
            <see cref="T:TallComponents.PDF.Pens.DashCollection"/> does not accept a <see langword="null"/> as a valid value. 
            </para>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A given <paramref name="dashes"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">(At least) one of the entries in the given <paramref name="dashes"/> is invalid.</exception>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashCollection.Clear">
            <summary>
            Removes all dashes from the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashCollection.Contains(System.Double)">
            <summary>
            Determine whether an <see cref="T:System.Double">dash</see> is in the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>.
            </summary>
            <param name="dash">The <see cref="T:System.Double">dash</see> to verify.</param>
            <returns>True if the <see cref="T:System.Double">dash</see> is found in this <see cref="T:TallComponents.PDF.Pens.DashCollection"/>, false otherwise.</returns>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashCollection.IndexOf(System.Double)">
            <summary>
            Searches for the specified <see cref="T:System.Double">dash</see> in the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>.
            </summary>
            <param name="dash">The <see cref="T:System.Double">dash</see> to locate in the <see cref="T:TallComponents.PDF.Pens.DashCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:System.Double">dash</see> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashCollection.Insert(System.Int32,System.Double)">
            <summary>
            Insert a <see cref="T:System.Double">dash</see> on a specific place in this <see cref="T:TallComponents.PDF.Pens.DashCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:System.Double">dash</see> should be inserted.</param>
            <param name="dash">The <see cref="T:System.Double">dash</see> to be insert.</param>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashCollection.InsertRange(System.Int32,System.Double[])">
            <summary>
            Insert the entries in an array of <see cref="T:System.Double">dashes</see> to the specific locations in the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>.
            </summary>
            <param name="index">The zero based start index for the inserted <see cref="T:System.Double">dashes</see>.</param>
            <param name="dashes">The <see cref="T:System.Double">dashes</see> to be interted in the <see cref="T:TallComponents.PDF.Pens.DashCollection"/>.</param>
            <remarks>
            <para>
            <see cref="T:System.Double">Dashes</see> does not accept a <see langword="null"/> as a valid value. 
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A given <paramref name="dashes"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">(At least) one of the entries in the given <paramref name="dashes"/> is invalid.</exception>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a <see cref="T:System.Double">dash</see> from the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see> at the specified index.
            </summary>
            <param name="index">The zero-based index from the <see cref="T:System.Double">dash</see> to be removed.</param>
        </member>
        <member name="P:TallComponents.PDF.Pens.DashCollection.Item(System.Int32)">
            <summary>
            Get an <see cref="T:System.Double">dash</see> by zero-based index from the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Pens.DashCollection.Count">
            <summary>
            Get the number of <see cref="T:System.Double">dashes</see> actually contained in the <see cref="T:TallComponents.PDF.Pens.DashCollection">DashCollection</see>
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Pens.DashCollection.Pattern">
            <summary>
            Needed for the implicit cast this collection provides.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Pens.DashPattern">
            <summary>
            A pattern for a pen (e.g. solid, dotted, dashed, etc.).
            </summary>
            <remarks>
            A DashPattern is an array of integers that specify alternating lengths of ink
            followed by no-ink. The array is applied repeatedly to draw the full length of
            the path to which the pattern is applied.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Pens.DashPattern.Solid">
            <summary>
            A solid pattern.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashPattern.#ctor(System.Double,System.Double[])">
            <summary>
            Create a custom pattern with given phase and pattern.
            </summary>
            <param name="phase">The start phase.</param>
            <param name="pattern">The pattern of dashes.</param>
        </member>
        <member name="P:TallComponents.PDF.Pens.DashPattern.Dashes">
            <summary>
            The pattern of dashes.
            </summary>
            <remarks>
            Should be all non zero and non negative values.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Pens.DashPattern.Phase">
            <summary>
            The phase of the pattern.
            </summary>
            <remarks>
            The phase determines the distance within the pattern at which the line starts drawing.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashPattern.Read(System.Xml.XmlReader)">
            <summary>
            Reads a dash pattern from XML.
            </summary>
            <param name="reader">The reader to read from.</param>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashPattern.Parse(System.String)">
            <summary>
            Create a new DashPattern from a string description of alternating ink lengths..
            </summary>
            <remarks>
            <para>This method is provided to enable <see cref="T:TallComponents.PDF.Pens.DashPattern"/>s to be specified in XML.</para>
            <para>The string must be formatted as a list of comma separated positive integers.
            Each value is a length of alternating ink or whitespace.</para>
            <para>The phase defaults to 0.</para>
            </remarks>
            <param name="pattern">A comma separated list of positive integers.</param>
            <returns>A new dash pattern.</returns>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashPattern.Equals(System.Object)">
            <summary>
            Compare two DashPatterns.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashPattern.Clone">
            <summary>
            Clones a DashPattern.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashPattern.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a DashPattern.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashPattern.isEqual(System.Double[],System.Double[])">
            <summary>
            Compare two sets of dashes.
            </summary>
            <param name="dashes1"></param>
            <param name="dashes2"></param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:TallComponents.PDF.Pens.DashPattern.GetHashCode">
            <summary>
            Returns base.GetHashCode().
            </summary>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Pens.LineCapStyle">
            <summary>
            Different styles for line caps (end-points).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Pens.LineCapStyle.Butt">
            <summary>
            Flat end. Ends exactly at end point.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Pens.LineCapStyle.Round">
            <summary>
            Rounded end. Center lies exactly at end point.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Pens.LineCapStyle.ProjectingSquare">
            <summary>
            Flat end. The end is drawn half the width of the pen beyond the end point.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Pens.LineJoinStyle">
            <summary>
            Different styles for line joints.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Pens.LineJoinStyle.Miter">
            <summary>
            The outer edges of the joining segments are extended until they meet.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Pens.LineJoinStyle.Round">
            <summary>
            A circle is drawn around the point where the centers of the segments meet.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Pens.LineJoinStyle.Bevel">
            <summary>
            The two segments are finished with butt caps.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Pens.Pen">
            <summary>
            A pen defines the characteristics of a line such as
            color and pattern (solid, dashed, etc.).
            </summary>
            <remarks>
            Lines, curves and borders are drawn using a pen. A pen defines how line ends are
            connected (<see cref="P:TallComponents.PDF.Pens.Pen.JoinStyle"/>) and how open ends are drawn (<see cref="P:TallComponents.PDF.Pens.Pen.CapStyle"/>).
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Pens.Pen.#ctor">
            <summary>
            Create a solid black pen that has a width of 1 user space unit.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Pens.Pen.#ctor(TallComponents.PDF.Colors.Color)">
            <summary>
            Create a solid pen with given color that has a width of 1 user space unit.
            </summary>
            <param name="color">Color of this pen.</param>
        </member>
        <member name="M:TallComponents.PDF.Pens.Pen.#ctor(TallComponents.PDF.Colors.Color,System.Double)">
            <summary>
            Create a solid pen with given color and fractional width.
            </summary>
            <param name="color">Color of this pen.</param>
            <param name="width">Width of this pen.</param>
        </member>
        <member name="M:TallComponents.PDF.Pens.Pen.#ctor(TallComponents.PDF.Colors.Color,System.Double,TallComponents.PDF.Pens.DashPattern)">
            <summary>
            Create a solid pen with given color, fractional width and <see cref="T:TallComponents.PDF.Pens.DashPattern">pattern</see>.
            </summary>
            <param name="color">Color of this pen.</param>
            <param name="width">Width of this pen.</param>
            <param name="pattern">Pattern of this pen.</param>
        </member>
        <member name="P:TallComponents.PDF.Pens.Pen.Width">
            <summary>
            Width of this pen.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when trying to assign a negative or invalid number (e.g. NaN or Infinity).
            </exception>
            <remarks>
            Setting the pen width to zero (0) a hairline is drawn.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Pens.Pen.Color">
            <summary>
            Color of this pen.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Pens.Pen.Pattern">
            <summary>
            Pattern of this pen.
            </summary>
            <remarks>
            The pattern is an array of integers that specify alternating lengths of ink followed by no-ink.
            Please see <see cref="T:TallComponents.PDF.Pens.DashPattern"/> for more information.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Pens.Pen.CapStyle">
            <summary>
            How caps (end-points) are drawn.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Pens.Pen.JoinStyle">
            <summary>
            How joints are drawn.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Pens.Pen.MiterLimit">
            <summary>
            The Miter Limit imposes a maximum on the ratio of the miter length to the line width.
            When the limit is exceeded, the join is converted from a miter to a bevel. (default = 10.0)
            </summary>
            <remarks>
            Meaningfull when JoinStyle is LineJoinStyle.Miter only.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Pens.Pen.Equals(System.Object)">
            <summary>
            Compare two Pens.
            </summary>
            <param name="obj"></param>
            <returns>True if the pens are equal.</returns>
        </member>
        <member name="M:TallComponents.PDF.Pens.Pen.Clone">
            <summary>
            Clones a Pen.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Pens.Pen.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Pen.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Pens.Pen.GetHashCode">
            <summary>
            Returns base.GetHashCode().
            </summary>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Printing.Duplex">
            <summary>
            The duplex setting print dialog is displayed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Printing.Duplex.Simplex">
            <summary>
            Print single-sided.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Printing.Duplex.DuplexFlipShortEdge">
            <summary>
            Duplex and flip on the short edge of the sheet.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Printing.Duplex.DuplexFlipLongEdge">
            <summary>
            Duplex and flip on the long edge of the sheet.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Printing.Duplex.Unspecified">
            <summary>
            Do not specify a duplex setting. 
            </summary>
            <remarks>
            It appears that the presence of this setting has unwanted side effects. E.g. if Duplex is set
            to Simplex, checking the 'print on both sides' option in the print dialog of the Adobe PDF reader
            is ignored. By setting Duplex to 'Unspecified', the corresponding entry will be absent in the 
            viewer preferences dictionary.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Printing.PrintScaling">
            <summary>
            The print scaling option when a print dialog is displayed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Printing.PrintScaling.None">
            <summary>
            No scaling.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Printing.PrintScaling.AppDefault">
            <summary>
            Use the current print scaling of the application.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Security.EncryptionLevel">
            <summary>
            This enum specifies the available encryption levels.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Security.EncryptionLevel.RC4_40bit">
            <summary>
            Encrypt this document with RC4 40-bit. 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Security.EncryptionLevel.RC4_128bit">
            <summary>
            Encrypt this document with RC4 128-bit.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Security.EncryptionLevel.AES_128bit">
            <summary>
            Encrypt this document with AES v2 128-bit. (default)
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Security.EncryptionLevel.AES_256bit">
            <summary>
            Encrypt this document with AES v3 256-bit.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Security.PasswordSecurity">
            <summary>
            This class encapsulates all security settings of a PDF document.
            You secure a document by assigning a new instance of this class to the 
            Security property of the Document class.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Security.PasswordSecurity.#ctor">
            <summary>
            Creates a new password security object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Security.PasswordSecurity.UserPassword">
            <summary>
            User password. You may set this string to "" to allow viewing by anyone but to 
            restrict privileges such as printing.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Security.PasswordSecurity.OwnerPassword">
            <summary>
            Owner password. The owner has all privilages, including changing the user password.
            </summary>
            <remarks>
            The owner password is required. Setting this to "" (an empty string) is valid but 
            will allow anybody to change the security settings on the document.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Security.PasswordSecurity.EncryptionLevel">
            <summary>
            This encryption level used to encrypt this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Security.PasswordSecurity.StandardSecurityHandler">
            <summary>
            Use an existing SecurityHandler.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Security.Security">
            <summary>
            This base class encapsulates security settings of a PDF document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Security.Security.#ctor">
            <summary>
            Creates a new Security object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Security.Security.Print">
            <summary>
            Allow printing.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Security.Security.Change">
            <summary>
            Allow changing the document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Security.Security.CopyExtract">
            <summary>
            Allow content copying or extraction.
            </summary>
            <remarks>
            When CopyExtract is false content can be selected but cannot be copied to the clipboard.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Security.Security.AuthorCommentsFormFields">
            <summary>
            Allow authoring comments and form fields.
            </summary>
            <remarks>
            Meaningfull if Change = false only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Security.Security.FormFillSign">
            <summary>
            Allow form field fill-in or signing.
            </summary>
            <remarks>
            Meaningfull if Change = false and AuthorCommentsFormFields = false only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Security.Security.ExtractAccessibilityContents">
            <summary>
            Enable content accessibility.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Security.Security.Assembly">
            <summary>
            Allow document assemble (insert, rotate, or delete pages and bookmarks or thumbnail images).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Security.Security.PrintHighQuality">
            <summary>
            Allow printing at high quality.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Security.Security.Clone">
            <summary>
            Clones a Security.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Security.Security.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a Security.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Transforms.IdentityTransform">
            <summary>
            The identity transform. This class cannot be instanciated. 
            Instead you retrieve an existing IndentityTransform object from the static Identity property of the Transform class. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.IdentityTransform.#ctor">
            <summary>
            This class cannot be instanciated. 
            Instead you retrieve an existing IndentityTransform object from the static Identity property of the Transform class. 
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Transforms.MatrixOrder">
            <summary>
            Specifies the order for matrix transform operations.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Transforms.MatrixOrder.Append">
            <summary>
            The new operation is applied after the old operation.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Transforms.MatrixOrder.Prepend">
            <summary>
            The new operation is applied before the old operation.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Transforms.MatrixTransform">
            <summary>
            A 2D geometric transform that is defined by a 3-by-3 affine matrix.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.MatrixTransform.#ctor">
            <summary>
            Create a new MatrixTransform.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.MatrixTransform.#ctor(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Create a new MatrixTransform.
            </summary>
            <param name="matrix">Create a transform from this matrix.</param>
            <remarks>Caller continues to own the matrix and should dispose it when done.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Transforms.MatrixTransform.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new MatrixTransform based on the provided matrix entries.
            </summary>
            <param name="a">The first element</param>
            <param name="b">The second element</param>
            <param name="c">The third element</param>
            <param name="d">The fouth element</param>
            <param name="e">The fifth element</param>
            <param name="f">The sixth element</param>
        </member>
        <member name="M:TallComponents.PDF.Transforms.MatrixTransform.#ctor(TallComponents.PDF.Transforms.Transform)">
            <summary>
            Create a new MarixTransform from an existing transform.
            </summary>
            <param name="transform">A transform.</param>
        </member>
        <member name="P:TallComponents.PDF.Transforms.MatrixTransform.Inverse">
            <summary>
            Delivers the inverse transform.
            </summary>
            <remarks>This will not modify the current transform.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Transforms.MatrixTransform.Translate(System.Double,System.Double)">
            <summary>
            Translates over (x,y).
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:TallComponents.PDF.Transforms.MatrixTransform.Translate(System.Double,System.Double,TallComponents.PDF.Transforms.MatrixOrder)">
            <summary>
            Translates over (x,y) and in the order specified in the order parameter.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Transforms.MatrixTransform.Scale(System.Double,System.Double)">
            <summary>
            Scales in the x and y direction.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:TallComponents.PDF.Transforms.MatrixTransform.Scale(System.Double,System.Double,TallComponents.PDF.Transforms.MatrixOrder)">
            <summary>
            Scales in the x and y direction and in the order specified in the order parameter.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Transforms.MatrixTransform.Rotate(System.Double)">
            <summary>
            Rotates the transform the given amount of degrees.
            </summary>
            <param name="degrees">The degrees.</param>
            <remarks>The direction of the rotation depends on the coordinate system.
            If the origin is at the top left corner - with the y-axis going down -, the rotation
            will be clockwise. This is the case for interactors (and WinForms/WPF). If the
            origin is at the bottom left corner - with the y-axis going up -, the rotation
            will be counter-clockwise. This is the case for PDF shapes.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Transforms.MatrixTransform.Rotate(System.Double,TallComponents.PDF.Transforms.MatrixOrder)">
            <summary>
            Rotates the transform the given amount of degrees and in the order specified in the order parameter.
            </summary>
            <param name="degrees">The degrees.</param>
            <param name="order">The order.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Transforms.MatrixTransform.Shear(System.Double,System.Double,TallComponents.PDF.Transforms.MatrixOrder)">
            <summary>
            Applies the specified shear vector to this Matrix in the specified order.
            </summary>
            <param name="shx">The horizontal shear factor.</param>
            <param name="shy">The vertical shear factor.</param>
            <param name="order">The order. Default is Append.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Transforms.MatrixTransform.Append(TallComponents.PDF.Transforms.Transform)">
            <summary>
            Appends a transform.
            </summary>
            <param name="transformation"></param>
        </member>
        <member name="M:TallComponents.PDF.Transforms.MatrixTransform.Prepend(TallComponents.PDF.Transforms.Transform)">
            <summary>
            Prepends a transformation to this one.
            </summary>
            <param name="transformation"></param>
        </member>
        <member name="P:TallComponents.PDF.Transforms.MatrixTransform.ScaleX">
            <summary>
            Gets the value of the first row and first column of this Matrix structure.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Transforms.MatrixTransform.ScaleY">
            <summary>
            Gets the value of the second row and second column of this Matrix structure.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Transforms.MatrixTransform.ShearX">
            <summary>
            Gets the value of the first row and second column of this Matrix structure.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Transforms.MatrixTransform.ShearY">
            <summary>
            Gets the value of the second row and first column of this Matrix structure.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Transforms.MatrixTransform.OffsetX">
            <summary>
            Gets the value of the third row and first column of this Matrix structure.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Transforms.MatrixTransform.OffsetY">
            <summary>
            Gets the value of the third row and second column of this Matrix structure.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Transforms.RotateTransform">
            <summary>
            A 2D geometric transform that applies a clockwise rotation.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.RotateTransform.#ctor">
            <summary>
            Create a new RotateTransform with angle 0 and rotation offset (0,0).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.RotateTransform.#ctor(System.Double)">
            <summary>
            Create a new RotateTransform with given angle and rotation offset (0, 0).
            </summary>
            <param name="angle">Clockwise rotation in degrees.</param>
        </member>
        <member name="M:TallComponents.PDF.Transforms.RotateTransform.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a new RotateTransform with given rotation and ration offset (0,0).
            </summary>
            <param name="angle">Clockwise angle in degrees.</param>
            <param name="rotationOffsetX">X-coordinate of the rotation center, relative to the origin of the shape.</param>
            <param name="rotationOffsetY">Y-coordinate of the rotation center, relative to the origin of the shape.</param>
        </member>
        <member name="P:TallComponents.PDF.Transforms.RotateTransform.Angle">
            <summary>
            Clockwise angle in degrees around the origin of the shape.
            Default is 0.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Transforms.RotateTransform.RotationOffsetX">
            <summary>
            Get or set the x-coordinate of the rotation center, relative to the origin of the shape.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Transforms.RotateTransform.RotationOffsetY">
            <summary>
            Get or set the y-coordinate of the rotation center, relative to the origin of the shape.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Transforms.ScaleTransform">
            <summary>
            A 2D geometric transform that applies a horizontal and vertical scale.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.ScaleTransform.#ctor">
            <summary>
            Create a new ScaleTransform.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.ScaleTransform.#ctor(System.Double,System.Double)">
            <summary>
            Create a new ScaleTransform.
            </summary>
            <param name="sx">Scale along the x-axis.</param>
            <param name="sy">Scale along the y-axis.</param>
        </member>
        <member name="P:TallComponents.PDF.Transforms.ScaleTransform.ScaleX">
            <summary>
            Scale along the x-axis.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Transforms.ScaleTransform.ScaleY">
            <summary>
            Scale along the y-axis.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Transforms.SkewTransform">
            <summary>
            A 2D geometric transform that applies a horizontal or vertical skew.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.SkewTransform.#ctor">
            <summary>
            Create a new SkewTransform.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.SkewTransform.#ctor(System.Double,System.Double)">
            <summary>
            Create a new SkewTransform.
            </summary>
            <param name="anglex">Skew angle along the x-axis.</param>
            <param name="angley">Skew angle along the y-axis.</param>
        </member>
        <member name="P:TallComponents.PDF.Transforms.SkewTransform.AngleX">
            <summary>
            Skew angle in degrees along the x-axis.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Transforms.SkewTransform.AngleY">
            <summary>
            Skew angle in degrees along the y-axis.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Transforms.Transform">
            <summary>
            A 2D geometric transform that can be used to transform ContentShape objects and Brushes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.Transform.CreateGdiMatrix">
            <summary>
            Creates a new System.Drawing.Drawing2D.Matrix from the current Transform.
            </summary>
            <remarks>
            The caller should dispose the returned Matrix when done.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Transforms.Transform.Identity">
            <summary>
            The identity transform.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Transforms.Transform.AsMatrixTransform">
            <summary>
            Returns Transform as MatrixTransform
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Transforms.TransformCollection">
            <summary>
            A collection of transforms that can be applied as a single transform.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.TransformCollection.#ctor">
            <summary>
            Create a new TransformCollection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.TransformCollection.Add(TallComponents.PDF.Transforms.Transform)">
            <summary>
            Add a new transform.
            </summary>
            <param name="transform">Add this transform.</param>
        </member>
        <member name="M:TallComponents.PDF.Transforms.TransformCollection.Remove(TallComponents.PDF.Transforms.Transform)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Transforms.Transform">Transform</see> from this <see cref="T:TallComponents.PDF.Transforms.TransformCollection">TransformCollection</see>.
            </summary>
            <param name="transform">The transform to remove.</param>
            <returns>true if removing the transform succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Transforms.TransformCollection.AddRange(TallComponents.PDF.Transforms.Transform[])">
            <summary>
            Adds the entries in an array of <see cref="T:TallComponents.PDF.Transforms.Transform">transforms</see> to the end of the <see cref="T:TallComponents.PDF.Transforms.TransformCollection">TransformCollection</see>.
            </summary>
            <param name="transforms">The array of <see cref="T:TallComponents.PDF.Transforms.Transform">transforms</see> to be added to the end of the <see cref="T:TallComponents.PDF.Transforms.TransformCollection"/>.</param>
            <remarks>
            <see cref="T:TallComponents.PDF.Transforms.TransformCollection"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">A given <paramref name="transforms"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Transforms.TransformCollection.Insert(System.Int32,TallComponents.PDF.Transforms.Transform)">
            <summary>
            Inserts a transform into the TransformCollection at the specified index.
            </summary>
            <param name="index">At this index.</param>
            <param name="transform">Add this transform.</param>
        </member>
        <member name="M:TallComponents.PDF.Transforms.TransformCollection.Clear">
            <summary>
            Removes all transforms from the <see cref="T:TallComponents.PDF.Transforms.TransformCollection">TransformCollection</see>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.TransformCollection.IndexOf(TallComponents.PDF.Transforms.Transform)">
            <summary>
            Returns the index of the specified transform.
            </summary>
            <param name="transform">The transform to locate in this collection.</param>
            <returns>The zero-based index of the transform found in the collection; otherwise, -1.</returns>
        </member>
        <member name="M:TallComponents.PDF.Transforms.TransformCollection.Contains(TallComponents.PDF.Transforms.Transform)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Transforms.Transform">Transform</see> is in the <see cref="T:TallComponents.PDF.Transforms.TransformCollection">TransformCollection</see>.
            </summary>
            <param name="transform">The <see cref="T:TallComponents.PDF.Transforms.Transform"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Transforms.Transform"/> is found in this <see cref="T:TallComponents.PDF.Transforms.TransformCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="transform"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="transform"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Transforms.TransformCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Transforms.Transform">Transform</see> from the <see cref="T:TallComponents.PDF.Transforms.TransformCollection">TransformCollection</see> at the specified index.
            </summary>
            <param name="index">The zero-based index from the <see cref="T:TallComponents.PDF.Transforms.Transform"/> to be removed.</param>
        </member>
        <member name="P:TallComponents.PDF.Transforms.TransformCollection.Item(System.Int32)">
            <summary>
            Get an <see cref="T:TallComponents.PDF.Transforms.Transform">Transform</see> by zero-based index from the <see cref="T:TallComponents.PDF.Transforms.TransformCollection">TransformCollection</see>. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Transforms.TransformCollection.Count">
            <summary>
            Get the number of <see cref="T:TallComponents.PDF.Transforms.Transform">Transform</see>s actually contained in the <see cref="T:TallComponents.PDF.Transforms.TransformCollection">TransformCollection</see>
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.TransformCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Transforms.TransformCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Transforms.TranslateTransform">
            <summary>
            A 2D geometric transform that applies a translation.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.TranslateTransform.#ctor">
            <summary>
            Create a new TranslateTransform.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Transforms.TranslateTransform.#ctor(System.Double,System.Double)">
            <summary>
            Create a new TranslateTransform.
            </summary>
            <param name="x">Translation along the x-axis.</param>
            <param name="y">Translation along the y-axis.</param>
        </member>
        <member name="P:TallComponents.PDF.Transforms.TranslateTransform.X">
            <summary>
            Translation along the x-axis.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Transforms.TranslateTransform.Y">
            <summary>
            Translation along the y-axis.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.DocumentInfoProperties">
            <summary>
            Stores a set of document custom properties.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.DocumentInfoProperties.Add(System.String,System.String)">
            <summary>
            Adds a custom property name and property value.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="T:TallComponents.PDF.DocumentInfoProperty">
            <summary>
            Represents a DocumentInfo property with its value.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.IReadOnlyStream">
            <summary>
            
            </summary>
        </member>
        <member name="M:TallComponents.PDF.IReadOnlyStream.ReadByte(System.Byte@)">
            <summary>
            Read the next byte from the stream.
            </summary>
            <param name="result">The resulting byte.</param>
            <returns>A Boolean that indicates succes.</returns>
        </member>
        <member name="T:TallComponents.PDF.LengthyJobMonitorCollection">
            <summary>
            A collection of length job monitors that implements the ILenghtyJobMonitor
            interface itself. Use this to have a process check multiple job monitors.
            It will only return Cancelled = true if all contained monitors
            have been cancelled.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.LengthyJobMonitorCollection.#ctor">
            <summary>
            ctr
            </summary>
        </member>
        <member name="M:TallComponents.PDF.LengthyJobMonitorCollection.#ctor(TallComponents.PDF.ILengthyJobMonitor)">
            <summary>
            ctr
            </summary>
            <param name="monitor"></param>
        </member>
        <member name="M:TallComponents.PDF.LengthyJobMonitorCollection.Add(TallComponents.PDF.ILengthyJobMonitor)">
            <summary>
            Add a monitor
            </summary>
        </member>
        <member name="P:TallComponents.PDF.LengthyJobMonitorCollection.Cancelled">
            <summary>
            Returns whether all jobs in the collection are cancelled.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.NameValuePairCollection`1">
            <summary>
            Collection of pairs Name and Value.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
        </member>
        <member name="P:TallComponents.PDF.NameValuePairCollection`1.Item(System.String)">
            <summary>
            Gets of sets the value of a property with a specific name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.NameValuePairCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.NameValuePairCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.NameValuePairCollection`1.Add(System.String,`0)">
            <summary>
            Adds a custom property name and property value.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="value">The value of the property.</param>
        </member>
        <member name="M:TallComponents.PDF.NameValuePairCollection`1.Clear">
            <summary>
            Removes all custom properties from the collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.NameValuePairCollection`1.Contains(System.String)">
            <summary>
            Determines whether the collection contatins a property with specific name.
            </summary>
            <param name="name">The property name.</param>
            <returns></returns>
        </member>
        <member name="P:TallComponents.PDF.NameValuePairCollection`1.Count">
            <summary>
            Gets the number of properties.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.NameValuePairCollection`1.Remove(System.String)">
            <summary>
            Removes the custom property with the provided name.
            </summary>
            <param name="name">The name of the property.</param>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.NameValuePair`1">
            <summary>
            Represents a name value pair.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
        </member>
        <member name="P:TallComponents.PDF.NameValuePair`1.Name">
            <summary>
            The name of the property. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.NameValuePair`1.Value">
            <summary>
            The value of the property.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.NameValuePair`1.ToString">
            <summary>
            Returns this instance of System.String.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.NumberingStyle.AlphaNumber(System.Int32)">
            <summary>
            Return the alpha representation of a number. (lowercase)
            </summary>
        </member>
        <member name="M:TallComponents.PDF.NumberingStyle.RomanNumber(System.Int32)">
            <summary>
            Return the roman representation of a number. (lowercase)
            </summary>
            <remarks>Valid for numbers from 1 to 3999.</remarks>
        </member>
        <member name="T:TallComponents.PDF.DocumentInfo">
            <summary>
            Document Info for the document like Author, Title and Subject.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DocumentInfo.CustomProperties">
            <summary>
            A collection of custom properties.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DocumentInfo.Author">
            <summary>
            The person who authored this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DocumentInfo.Title">
            <summary>
            Title of this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DocumentInfo.Subject">
            <summary>
            Subject of this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DocumentInfo.Keywords">
            <summary>
            Keywords of this document.
            </summary>
            <remarks>
            Semicolons can be used to seperate multiple keywords.  
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.DocumentInfo.Creator">
            <summary>
            The application that created this document before it was converted to PDF (this is your application).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.DocumentInfo.Producer">
            <summary>
            The component or application that created this document (this component after it is written).
            </summary>
            <remarks>
            <para>
            You can read the existing producer if was an existing document.
            </para>
            <para>
            This property is readonly.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.DocumentInfo.CreationDate">
            <summary>
            The date this PDF was originally created.
            </summary>
            <remarks>
            This property is readonly.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.DocumentInfo.LastModifiedDate">
            <summary>
            The date this PDF was last modified.
            </summary>
            <remarks>
            This property is readonly.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.GetWebCredentialsEventArgs">
            <summary>
            Class containing data for the GetWebCredentials event.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.GetWebCredentialsEventArgs.Url">
            <summary>
            The url to get the credentials for.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.GetWebCredentialsEventArgs.Credentials">
            <summary>
            The credentials for the url.
            </summary>
            <remarks>
            This value can be updated to set the credentials.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.GetWebCredentialsEventHandler">
            <summary>
            Represents the method that handles the GetWebCredentials event.
            </summary>
            <remarks>Set the credentials in the arguments to perform authentication.
            To authenticate using the user running the application or the impersonated
            user (on ASP.NET) supply <i>System.Net.CredentialCache.DefaultCredentials</i>.</remarks>
            <param name="sender">The sender.</param>
            <param name="e">The GetWebCredentials event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.IndexRange">
            <summary>
            A range of indexes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.IndexRange.#ctor(System.Int32)">
            <summary>
            Creates a new, zero-based range that consists of a single index.
            </summary>
            <param name="n">The zero-based index.</param>
        </member>
        <member name="M:TallComponents.PDF.IndexRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new, zero-based range.
            </summary>
            <param name="from">The start index of the range.</param>
            <param name="to">The end index of the range (inclusive)</param>
        </member>
        <member name="P:TallComponents.PDF.IndexRange.From">
            <summary>
            The start index of the range.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.IndexRange.To">
            <summary>
            The end index of the range (inclusive).
            </summary>
        </member>
        <member name="T:TallComponents.PDF.IndexRangeCollection">
            <summary>
            A collection (sequence) of index ranges.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.IndexRangeCollection.GetEnumerator">
            <summary>
            Get a PageRange enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.IndexRangeCollection.Add(TallComponents.PDF.IndexRange)">
            <summary>
            Add a PageRange to the collection.
            </summary>
            <param name="item">The page range.</param>
        </member>
        <member name="M:TallComponents.PDF.IndexRangeCollection.Remove(TallComponents.PDF.IndexRange)">
            <summary>
            Remove a PageRange from the collection.
            </summary>
            <param name="item">The page range.</param>
            <returns>True if sucessful/</returns>
        </member>
        <member name="M:TallComponents.PDF.IndexRangeCollection.AddRange(TallComponents.PDF.IndexRange[])">
            <summary>
            Add a collection of PageRange items.
            </summary>
            <param name="items">The PageRange items.</param>
        </member>
        <member name="M:TallComponents.PDF.IndexRangeCollection.Insert(System.Int32,TallComponents.PDF.IndexRange)">
            <summary>
            Insert a PageRange at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The PageRange item.</param>
        </member>
        <member name="M:TallComponents.PDF.IndexRangeCollection.Clear">
            <summary>
            Remove all PageRange elements from the collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.IndexRangeCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the PageRange at the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:TallComponents.PDF.IndexRangeCollection.Count">
            <summary>
            The number of PageRange items in the collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.IndexRangeCollection.Contains(TallComponents.PDF.IndexRange)">
            <summary>
            Returns true if the collection contains the specified item.
            </summary>
            <param name="item">The PageRange item.</param>
            <returns>True if the collection contains the specified item.</returns>
        </member>
        <member name="M:TallComponents.PDF.IndexRangeCollection.IndexOf(TallComponents.PDF.IndexRange)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="item">The PageRange item.</param>
            <returns>The index of the specified item, or - 1 if it does not exist in this collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.IndexRangeCollection.Item(System.Int32)">
            <summary>
            Returns the PageRange at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The PageRange at the specified index.</returns>
        </member>
        <member name="T:TallComponents.PDF.PageSize">
            <summary>
            Encapsulates the width and height of a page and provides standard page sizes. 
            </summary>
            <remarks>
            <example>
            Specify a custom page size in XML:
            &lt;section&gt;
            &lt;!-- A4 Landscape --&gt;
              &lt;pagesize width="297mm" height="210mm" /&gt;
            &lt;!-- Section content goes here --&gt;
            &lt;/section&gt;
            </example>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.PageSize.#ctor">
            <summary>
            Create a new page size with default size (Letter).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.PageSize.#ctor(System.Double,System.Double)">
            <summary>
            Create a new page size with given width and height both in in points.
            </summary>
            <param name="width">Width in points.</param>
            <param name="height">Height in points.</param>
        </member>
        <member name="P:TallComponents.PDF.PageSize.Letter">
            <summary>
            8.5 x 11 inch
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PageSize.Tabloid">
            <summary>
            11 x 17 inch
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PageSize.Ledger">
            <summary>
            17 x 11 inch
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PageSize.Legal">
            <summary>
            8.5 x 14 inch
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PageSize.Statement">
            <summary>
            5.5 x 8.5 inch
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PageSize.Executive">
            <summary>
            7.25 x 10.5 inch
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PageSize.Folio">
            <summary>
            8.5 x 13 inch
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PageSize.A3">
            <summary>
            297 x 420 mm
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PageSize.A4">
            <summary>
            210 x 297 mm
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PageSize.A5">
            <summary>
            148.5 X 210 mm
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PageSize.A6">
            <summary>
            105 X 148.5 mm
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PageSize.B5">
            <summary>
            182 x 257 mm
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PageSize.Width">
            <summary>
            Width in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PageSize.Height">
            <summary>
            Height in points.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.PropertyChangedEventArgs">
            <summary>
            Class containing data for PropertyChanged events.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PropertyChangedEventArgs.Name">
            <summary>
            Name of the propery that has changed.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.PropertyChangedEventHandler">
            <summary>
            Represents the method that handles PropertyChanged events.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The PropertyChanged event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.ReadOnlyBitStream">
            <summary>
            
            </summary>
        </member>
        <member name="M:TallComponents.PDF.ReadOnlyBitStream.ReadBits(System.Int32,System.UInt32@)">
            <summary>
            Reads n bits from the stream.
            </summary>
            <param name="n">The number of bit to read. Maximum is 32.</param>
            <param name="result">The bits read.</param>
            <returns>A Boolean that indicates succes.</returns>
        </member>
        <member name="M:TallComponents.PDF.ReadOnlyBitStream.ReadBits(System.Int32,System.UInt32[])">
            <summary>
            Reads n bits into each element of the argument array.
            </summary>
            <param name="n">The number of bits to store into each array element.</param>
            <param name="bitArray">The array that will hold the bits.</param>
            <returns>A boolean that indicates succes.</returns>
            <remarks>Each array element will hold n consecutive bits in the stream.</remarks>
        </member>
        <member name="F:TallComponents.PDF.ReadOnlyBitStream._stream">
            <summary>
            Underlying stream.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.ReadOnlyBitStream.bitBuffer">
            <summary>
            Small buffer of bits already read from the stream.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.ReadOnlyBitStream.bitsAvailable">
            <summary>
            Number of bits in the buffer.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.ReadOnlyMemoryStream">
            <summary>
            
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Rectangle">
            <summary>
            A rectangle represents an area on the page.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Rectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new rectangle.
            </summary>
            <param name="left">The left position in points.</param>
            <param name="bottom">The bottom position in points.</param>
            <param name="width">The rectangle width in points.</param>
            <param name="height">The rectangle height in points.</param>
        </member>
        <member name="P:TallComponents.PDF.Rectangle.Left">
            <summary>
            The left position in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Rectangle.Bottom">
            <summary>
            The bottom position in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Rectangle.Width">
            <summary>
            The rectangle width in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Rectangle.Height">
            <summary>
            The rectangle height in points.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Rectangle.Top">
            <summary>
            The top position in points.
            </summary>
            <remarks>
            This property is read-only, set the height to adjust.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Rectangle.Right">
            <summary>
            The right position in points.
            </summary>
            <remarks>
            This property is read-only, set the width to adjust.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Rectangle.ToString">
            <summary>
            Return a string in format '[' Left Bottom Width Height ']'.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Unit">
            <summary>
            Unit is used to convert a wide variety of units to points, which is the
            unit used in PDF.
            </summary>
            <remarks>
            A point in PDF is exactly 1/72 inch. This is also known as a PostScript point.
            This class converts all units to PostScript points.
            </remarks>
            <example>
            <para>C#</para>
              <code>
                 myTable.PreferredWidth = Unit.Parse("50mm");
              </code>
              <code>
                 myFragment.FontSize = Unit.Parse("0.5in");
              </code>
            <para>VB.NET</para>
              <code>
                 myTable.PreferredWidth = Unit.Parse("50mm")
              </code>
              <code>
                 myFragment.FontSize = Unit.Parse("0.5in")
              </code>
            </example>
        </member>
        <member name="P:TallComponents.PDF.Unit.Value">
            <summary>
            The value (specified in the unit from the Unit property) 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Unit.Type">
            <summary>
            The unit type in which the Value is given.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Unit.#ctor(System.Double)">
            <summary>
            Create a Unit from a value. The value is assumed to be in Points.
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:TallComponents.PDF.Unit.#ctor(System.Double,TallComponents.PDF.UnitType)">
            <summary>
            Create a Unit from a value and a UnitType
            </summary>
            <param name="val">The value of the Unit object expressed in the unit specified by type.</param>
            <param name="type">The unit of val, for example Inch.</param>
        </member>
        <member name="P:TallComponents.PDF.Unit.IsRelative">
            <summary>
            This Unit is a relative value. True if this Unit is a percentage.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Unit.Points">
            <summary>
            Return the value of this Unit in points.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Unit.op_Equality(TallComponents.PDF.Unit,TallComponents.PDF.Unit)">
            <summary>
            Compares two Unit objects for equality.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Unit.op_Inequality(TallComponents.PDF.Unit,TallComponents.PDF.Unit)">
            <summary>
            Compares two Unit objects for inequality.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Unit.Equals(System.Object)">
            <summary>
            Determines whether two Object instances are equal.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Unit.GetHashCode">
            <summary>
            Calculates a hash for this type.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Unit.Parse(System.String,System.Double)">
            <summary>
            Create a unit from a string.
            </summary>
            <remarks>
              <list type="table">
                 <listheader>
                    <term>Unit</term>
                    <description>Description</description>
                 </listheader>
                 <item>
                    <term>pt</term>
                    <description>Point, 1/72 Inch</description>
                 </item>
                 <item>
                    <term>pica</term>
                    <description>Pica, 1/12 Point</description>
                 </item>
                 <item>
                    <term>px</term>
                    <description>Pixel, assumes a resolution of 72dpi.</description>
                 </item>
                 <item>
                    <term>m</term>
                    <description>Meter</description>
                 </item>
                 <item>
                    <term>cm</term>
                    <description>Centimeter, 2.54cm is 1 Inch</description>
                 </item>
                 <item>
                    <term>mm</term>
                    <description>Millimeter</description>
                 </item>
                 <item>
                    <term>um</term>
                    <description>Micrometer</description>
                 </item>      
                 <item>
                    <term>in</term>
                    <description>Inch</description>
                 </item>      
                 <item>
                    <term>ft</term>
                    <description>Foot, 12 inch is 1 foot</description>
                 </item>      
                 <item>
                    <term>yd</term>
                    <description>Yard, 36 inch is 1 yard</description>
                 </item>      
                 <item>
                    <term>%</term>
                    <description>Percentage. Result will be calculated relative to parameter <paramref name="relativeBase"/></description>
                 </item>   
              </list>
            </remarks>
            <param name="unitString">The unitstring to parse</param>
            <param name="relativeBase">The base value for relative sizes.</param>
            <returns>The resulting parsed value.</returns>
        </member>
        <member name="M:TallComponents.PDF.Unit.Parse(System.String)">
            <summary>
            Create a unit from a string.
            </summary>
            <remarks>
              <list type="table">
                 <listheader>
                    <term>Unit</term>
                    <description>Description</description>
                 </listheader>
                 <item>
                    <term>pt</term>
                    <description>Point, 1/72 Inch</description>
                 </item>
                 <item>
                    <term>pica</term>
                    <description>Pica, 1/12 Point</description>
                 </item>
                 <item>
                    <term>px</term>
                    <description>Pixel, assumes a resolution of 72dpi.</description>
                 </item>
                 <item>
                    <term>m</term>
                    <description>Meter</description>
                 </item>
                 <item>
                    <term>cm</term>
                    <description>Centimeter, 2.54cm is 1 Inch</description>
                 </item>
                 <item>
                    <term>mm</term>
                    <description>Millimeter</description>
                 </item>
                 <item>
                    <term>um</term>
                    <description>Micrometer</description>
                 </item>      
                 <item>
                    <term>in</term>
                    <description>Inch</description>
                 </item>      
                 <item>
                    <term>ft</term>
                    <description>Foot, 12 inch is 1 foot</description>
                 </item>      
                 <item>
                    <term>yd</term>
                    <description>Yard, 36 inch is 1 yard</description>
                 </item>      
                 <item>
                    <term>%</term>
                    <description>Percentage. Values of this type are converted into a fraction. (e.g. 50% is 0.5 )</description>
                 </item>   
              </list>
            </remarks>
            <param name="unitString"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Unit.FromPixels(System.Int32,System.Double)">
            <summary>
            Create a unit from pixels and a resolution. Useful for
            working with images.
            </summary>
            <remarks>
            Default resolution for screen display is normally 72dpi, though 96dpi is used by GDI+.
            </remarks>
            <param name="pixels">Length in pixels</param>
            <param name="dpi">Resolution in dpi (Dots Per Inch)</param>
            <returns></returns>
            <example>
              <code>
                 ImageShape image = new ImageShape( "image.jpg" );
                 image.KeepAspectRatio = true;
                 // Calculate width at resolution of 300dpi
                 image.Width = Unit.FromPixels( bitmap.Width, 300 );
              </code>
             </example>
        </member>
        <member name="M:TallComponents.PDF.Unit.ToPoints(System.String)">
            <summary>
            Convert a unit string to points
            </summary>
            <param name="unitString">A unit string.</param>
            <returns>The value in points</returns>
        </member>
        <member name="M:TallComponents.PDF.Unit.ToString">
            <summary>
            Returns the value of the Unit as a formatted string in points.
            </summary>
            <returns></returns>
            <example>
              <code>
                 Unit.Parse("1 in").ToString()
              </code>
              Returns the string "72pt".
            </example>
        </member>
        <member name="M:TallComponents.PDF.Unit.op_Implicit(TallComponents.PDF.Unit)~System.Double">
            <summary>
            Implicit conversion to double. The value is expressed in points.
            </summary>
            <param name="unit">Instance to convert.</param>
            <returns>Value of the unit in points.</returns>
        </member>
        <member name="M:TallComponents.PDF.Unit.op_Implicit(System.Double)~TallComponents.PDF.Unit">
            <summary>
            Implicit conversion from double. This allows you to assign a double 
            to any variable or property of type Unit without constructors or casting.
            </summary>
            <param name="val">The value in points</param>
            <returns>A Unit with the value val and UnitType Points</returns>
        </member>
        <member name="M:TallComponents.PDF.Unit.op_Implicit(System.String)~TallComponents.PDF.Unit">
            <summary>
            Implicit conversion from string. This allows you to assign a sized string 
            to any variable or property of type Unit without constructors or casting.
            </summary>
            <param name="val">The value in a format that can be parsed</param>
            <returns>A Unit with the value val and UnitType found.</returns>
        </member>
        <member name="T:TallComponents.PDF.UnitType">
            <summary>
            Known units handled by the <see cref="T:TallComponents.PDF.Unit">Unit</see> class.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.UnitType.Micrometer">
            <summary>
            Unit of length. 1/1000.0000 meter.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.UnitType.Millimeter">
            <summary>
            Unit of length. 1/1000 meter.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.UnitType.Centimeter">
            <summary>
            Unit of length. 1/100 meter.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.UnitType.Meter">
            <summary>
            Unit of length.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.UnitType.Pica">
            <summary>
            Unit of length. 1/12 point
            </summary>
        </member>
        <member name="F:TallComponents.PDF.UnitType.Point">
            <summary>
            Unit of length. 1/72 inch. Point is the base unit used in PDF documents.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.UnitType.Pixel">
            <summary>
            Unit of length. Usually 1/96 inch.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.UnitType.Inch">
            <summary>
            Unit of length. 1 inch is 2.54 cm.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.UnitType.Foot">
            <summary>
            Unit of length. 12 inch is 1 foot.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.UnitType.Yard">
            <summary>
            Unit of length. 36 inch is 1 yard.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.UnitType.Percentage">
            <summary>
            Relative unit, represented as a fraction. 100% is 1.0, 50% is 0.5.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Actions.Action">
            <summary>
            Abstract base class of all action classes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.Action.System#ICloneable#Clone">
            <summary>
            Clone this action
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.Action.Clone">
            <summary>
            Clone this action
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.Action.Execute(TallComponents.PDF.Actions.ActionHandler,TallComponents.PDF.Actions.ActionContext)">
            <summary>
            Excute this action.
            </summary>
            <param name="handler">The handler used to execute.</param>
            <param name="context">The context for this action.</param>
        </member>
        <member name="M:TallComponents.PDF.Actions.Action.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
            <summary>
            Accept this action.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Actions.ActionCollection">
            <summary>
            An action collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.#ctor">
            <summary>
            Create a new <see cref="T:TallComponents.PDF.Actions.ActionCollection"/>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.#ctor(System.Boolean)">
            <summary>
            /// Creates an empty <see cref="T:TallComponents.PDF.Actions.ActionCollection"/>.
            </summary>
            <param name="readOnly">Specify if the collection is read-only or editable.</param>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.Add(TallComponents.PDF.Actions.Action)">
            <summary>
            Adds an <see cref="T:TallComponents.PDF.Actions.Action">Action</see> to the end of the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>.
            </summary>
            <param name="action">The <see cref="T:TallComponents.PDF.Actions.Action"/> to be addded to the end of the <see cref="T:TallComponents.PDF.Actions.ActionCollection"/>.</param>
            <returns>
            The <see cref="T:TallComponents.PDF.Actions.ActionCollection"/> index at which the <see cref="T:TallComponents.PDF.Actions.Action"/> has been added.
            </returns>
            <remarks>
            <para>
            <see cref="T:TallComponents.PDF.Actions.ActionCollection"/> does not accept a <see langword="null"/> as a valid value. 
            </para>
            <para>
            <see cref="T:TallComponents.PDF.Actions.ActionCollection"/> does not accept duplicate elements.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="action"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The given <paramref name="action"/> is already in this <see cref="T:TallComponents.PDF.Actions.ActionCollection"/>. (Duplicate <paramref name="action"/>)</exception>
            <example>
            C#
            <code> 
            ActionCollection actions = new ActionCollection();
            actions.<b>Add</b>( new GoToAction( page ) );
            </code>
            VB.NET
            <code>
            Dim actions as ActionCollection = new ActionCollection()
            actions.<b>Add</b>( new GoToAction( page ) )
            </code>
            </example>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.Remove(TallComponents.PDF.Actions.Action)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Actions.Action">Action</see> from this <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>.
            </summary>
            <param name="action">The action to remove.</param>
            <returns>true if removing the action succeeded/</returns>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.AddRange(TallComponents.PDF.Actions.Action[])">
            <summary>
            Adds the entries in an array of <see cref="T:TallComponents.PDF.Actions.Action">actions</see> to the end of the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>.
            </summary>
            <param name="actions">The array of <see cref="T:TallComponents.PDF.Actions.Action">actions</see> to be added to the end of the <see cref="T:TallComponents.PDF.Actions.ActionCollection"/>.</param>
            <remarks>
            <para>
            <see cref="T:TallComponents.PDF.Actions.ActionCollection"/> does not accept a <see langword="null"/> as a valid value. 
            </para>
            <para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            <para><see cref="T:TallComponents.PDF.Actions.ActionCollection"/> does not accept duplicate elements.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A given <paramref name="actions"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">(At least) one of the entries in the given <paramref name="actions"/> is already in this <see cref="T:TallComponents.PDF.Actions.ActionCollection"/>. (Duplicate <see cref="T:TallComponents.PDF.Actions.Action"/>)</exception>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.Clear">
            <summary>
            Removes all actions from the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>.
            </summary>
            <example>
            C#
            <code> 
            ActionCollection actions = new ActionCollection();
            actions.Add( new GoToAction( page ) );
            actions.<b>Clear()</b>;
            </code>
            VB.NET
            <code>
            Dim actions as ActionCollection = new ActionCollection()
            actions.Add( new GoToAction( page ) )
            actions.<b>Clear()</b>
            </code>
            </example>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.Contains(TallComponents.PDF.Actions.Action)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Actions.Action">Action</see> is in the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>.
            </summary>
            <param name="action">The <see cref="T:TallComponents.PDF.Actions.Action"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Actions.Action"/> is found in this <see cref="T:TallComponents.PDF.Actions.ActionCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="action"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="action"/> is <see langword="null"/>.</exception>
            <example>
            C#
            <code> 
            GoToAction goToAction = new GoToAction( page );
            UriAction uriAction = new UriAction( "http://www.tallcomponents.com" );
            ActionCollection actions = new ActionCollection();
            actions.Add( goToAction );
            bool found = actions.<b>Contains</b>( goToAction ); //found = true
            found = actions.<b>Contains</b>( uriAction ); //found = false
            </code>
            VB.NET
            <code>
            Dim goToAction1 as GoToAction = new GoToAction( page )
            Dim uriAction1 as UriAction = new UriAction( "http://www.tallcomponents.com" )
            Dim actions as ActionCollection = new ActionCollection()
            actions.Add( goToAction1 )
            Dim found as Boolean
            found = actions.<b>Contains</b>( goToAction1 ) 'found = True
            found = actions.<b>Contains</b>( uriAction1 ) 'found = False
            </code>
            </example>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.IndexOf(TallComponents.PDF.Actions.Action)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Actions.Action">Action</see> in the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>.
            </summary>
            <param name="action">The <see cref="T:TallComponents.PDF.Actions.Action"/> to locate in the <see cref="T:TallComponents.PDF.Actions.ActionCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Actions.Action"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.Insert(System.Int32,TallComponents.PDF.Actions.Action)">
            <summary>
            Insert an <see cref="T:TallComponents.PDF.Actions.Action"/> on a specific place in this <see cref="T:TallComponents.PDF.Actions.ActionCollection"/>.
            </summary>
            <param name="index">The zero-based index at which the <see cref="T:TallComponents.PDF.Actions.Action"/> should be inserted.</param>
            <param name="action">The <see cref="T:TallComponents.PDF.Actions.Action"/> to be insert.</param>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.InsertRange(System.Int32,TallComponents.PDF.Actions.Action[])">
            <summary>
            Insert the entries in an array of <see cref="T:TallComponents.PDF.Actions.Action">Actions</see> to the specific locations in the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>.
            </summary>
            <param name="index">The zero based start index for the inserted actions.</param>
            <param name="actions">The <see cref="T:TallComponents.PDF.Actions.Action">actions</see> to be interted in the <see cref="T:TallComponents.PDF.Actions.ActionCollection"/>.</param>
            <remarks>
            <para>
            <see cref="T:TallComponents.PDF.Actions.Action">Actions</see> does not accept a <see langword="null"/> as a valid value. 
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A given <paramref name="actions"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">(At least) one of the entries in the given <paramref name="actions"/> is already in this <see cref="T:TallComponents.PDF.Actions.ActionCollection"/>. (Duplicate <paramref name="actions"/>)</exception>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an <see cref="T:TallComponents.PDF.Actions.Action">Action</see> from the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see> at the specified index.
            </summary>
            <param name="index">The zero-based index from the <see cref="T:TallComponents.PDF.Actions.Action"/> to be removed.</param>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.RemoveRange(TallComponents.PDF.Actions.Action[])">
            <summary>
            Removes multiple actions from the collection.
            </summary>
            <param name="actions">The actions to remove</param>
        </member>
        <member name="P:TallComponents.PDF.Actions.ActionCollection.Item(System.Int32)">
            <summary>
            Get an <see cref="T:TallComponents.PDF.Actions.Action">Action</see> by zero-based index from the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Actions.ActionCollection.Count">
            <summary>
            Get the number of <see cref="T:TallComponents.PDF.Actions.Action">Action</see>s actually contained in the <see cref="T:TallComponents.PDF.Actions.ActionCollection">ActionCollection</see>
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Actions.ActionCollection.IsReadOnly">
            <summary>
            Get a value indicating whether this collection is read-only.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.Execute(TallComponents.PDF.Actions.ActionHandler,TallComponents.PDF.Actions.ActionContext)">
            <summary>
            Excute all actions in this collection (in the order the collection contains the actions).
            </summary>
            <param name="handler">The handler used to execute.</param>
            <param name="context">The context for this action.</param>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionCollection.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
            <summary>
            Accept all actions in this collection (in the order the collection contains the actions).
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Actions.ActionContext">
            <summary>
            This class provide the context for an  action while executing.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionContext.#ctor(TallComponents.PDF.Document)">
            <summary>
            Create a new action context.
            </summary>
            <param name="document">The document in which the actions live.</param>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionContext.#ctor(TallComponents.PDF.Document,TallComponents.PDF.Actions.ActionReason,TallComponents.PDF.Object)">
            <summary>
            Create a new action context for a particular target.
            </summary>
            <param name="document">The document.</param>
            <param name="reason">The action reason.</param>
            <param name="target">The target object, i.e. the object that "triggered" this action.</param>
            <remarks>This constructor will set the source to the same object as the target. Strictly
            speaking, the source is the object that triggered the action, and the target is the
            object that the action applies to. These are usually the same. For calculations this
            may be different: the source is the object that triggered the calculation, the target is
            the object that is being calculated (although I doubt that we currently support this properly).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Actions.ActionContext.Document">
            <summary>
            The document in which the actions lives.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Actions.ActionContext.Source">
            <summary>
            The source object that triggered the action.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Actions.ActionContext.Target">
            <summary>
            The target object that triggered the action.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Actions.ActionContext.Reason">
            <summary>
            The reason this action is executed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Actions.ActionContext.Result">
            <summary>
            Check the result.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Actions.ActionHandler">
            <summary>
            A derived instance of ActionHandler is passed to Action.Execute(...). This method
            calls one of the below ActionHandler methods according to the type of action.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.GoToInternalDestination(TallComponents.PDF.Navigation.InternalDestination,TallComponents.PDF.Actions.ActionContext)">
            <summary>
             Go to internal destination.
            </summary>
            <param name="destination">The internal destination to jump to.</param>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.GoToRemoteDestination(TallComponents.PDF.Navigation.RemoteDestination,TallComponents.PDF.Actions.ActionContext)">
            <summary>
            Go to remote destination.
            </summary>
            <param name="destination">The remote destination to jump to.</param>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.GoToUri(System.String,System.Boolean,TallComponents.PDF.Actions.ActionContext)">
            <summary>
            Go to Uri
            </summary>
            <param name="uri">Go to this Uri.</param>
            <param name="isMap">If set, pass the mouse coordinates (x,y) to the Uri like this: http://www.tallcomponents.com?100,200.</param>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.GoToNextPage(TallComponents.PDF.Actions.ActionContext)">
            <summary>
            Go to the next page.
            </summary>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.GoToPreviousPage(TallComponents.PDF.Actions.ActionContext)">
            <summary>
            Go to the prev page.
            </summary>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.GoToFirstPage(TallComponents.PDF.Actions.ActionContext)">
            <summary>
            Go to the first page.
            </summary>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.GoToLastPage(TallComponents.PDF.Actions.ActionContext)">
            <summary>
            Go to the last page.
            </summary>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.ExecuteNamedAction(System.String,TallComponents.PDF.Actions.ActionContext)">
            <summary>
            Execute the non-standard named action.
            </summary>
            <param name="name">The (PDF)name of the non-standard named action.</param>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.HideAnnotations(TallComponents.PDF.Annotations.Annotation[],TallComponents.PDF.Actions.ActionContext)">
            <summary>
            Hide the annotations
            </summary>
            <param name="annotations">The annotation array to hide.</param>
            <remarks>
            The annotations in the array are Equal to the ones retrieved for a page.
            </remarks>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.ShowAnnotations(TallComponents.PDF.Annotations.Annotation[],TallComponents.PDF.Actions.ActionContext)">
            <summary>
            Show the annotations
            </summary>
            <param name="annotations">The annotation array to show.</param>
            <remarks>
            The annotations in the array are Equal to the ones retrieved for a page.
            </remarks>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.SubmitFields(System.String,TallComponents.PDF.Forms.Fields.Field[],TallComponents.PDF.Actions.SubmitFormat,TallComponents.PDF.Actions.HttpMethod,System.Boolean,System.Boolean,TallComponents.PDF.Actions.ActionContext)">
            <summary>
            SubmitFields Form action
            </summary>
            <param name="url">The url used to submit to.</param>
            <param name="fields">The fields to submit.</param>
            <param name="submitFormat">The submit format specifies what to submit to the server.</param>
            <param name="httpMethod">The http method specifies how to submit to the server.
            <remarks>
            This property is meaningfull for SubmitFormat: Pdf and Html
            </remarks>
            </param>
            <param name="includeEmptyFields">
            Fields without a value should be submitted also.
            <remarks>
            This property has no meaning for SubmitFormat: Pdf 
            </remarks>
            </param>
            <param name="convertDatesToStandardFormat">
            When submitting all fields which contains a date are converted to a predefined format, 
            otherwise the value is submitted as-is (aka how the user entered the data).
            <remarks>
            <para>This property has no meaning for SubmitFormat: Pdf.</para>
            <para>The predefined format: 'D:yyyymmdd' (without the quotes)</para>
            </remarks>
            </param>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.ResetFields(TallComponents.PDF.Forms.Fields.Field[],TallComponents.PDF.Actions.ActionContext)">
            <summary>
            ResetFields Form action
            </summary>
            <param name="fields">The fields to reset.</param>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.ImportData(System.String,TallComponents.PDF.Actions.ActionContext)">
            <summary>
            ImportData action
            </summary>
            <param name="fdf">The path of the FDF file to import.</param>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.RunJavaScript(TallComponents.PDF.JavaScript.JavaScript,TallComponents.PDF.Actions.ActionContext)">
            <summary>
            JavaScript action.
            </summary>
            <param name="javaScript">The JavaScript to execute.</param>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.Launch(System.String,TallComponents.PDF.Navigation.WindowBehavior,TallComponents.PDF.Actions.ActionContext)">
            <summary>
            Launch action.
            </summary>
            <param name="path">The path to launch.</param>
            <param name="windowBehavior">The windows behavior to use.</param>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.Unknown(System.String,TallComponents.PDF.Actions.ActionContext)">
            <summary>
            Unknown action.
            </summary>
            <param name="name">The (PDF)name for the action.</param>
            <param name="context">The context in which this action is executed.</param>
            <remarks>
            <paramref name="context"/> can be <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.Visit(TallComponents.PDF.Actions.GoToAction,System.Object)">
            <summary>
            Visit this action.
            </summary>
            <param name="action">The action.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            The default Visit operation cannot be overriden in any derived ActionHandler.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.Visit(TallComponents.PDF.Actions.UriAction,System.Object)">
            <summary>
            Visit this action.
            </summary>
            <param name="action">The action.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            The default Visit operation cannot be overriden in any derived ActionHandler.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.Visit(TallComponents.PDF.Actions.LaunchAction,System.Object)">
            <summary>
            Visit this action.
            </summary>
            <param name="action">The action.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            The default Visit operation cannot be overriden in any derived ActionHandler.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.Visit(TallComponents.PDF.Actions.HideAction,System.Object)">
            <summary>
            Visit this action.
            </summary>
            <param name="action">The action.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            The default Visit operation cannot be overriden in any derived ActionHandler.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.Visit(TallComponents.PDF.Actions.JavaScriptAction,System.Object)">
            <summary>
            Visit this action.
            </summary>
            <param name="action">The action.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            The default Visit operation cannot be overriden in any derived ActionHandler.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.Visit(TallComponents.PDF.Actions.ResetFormAction,System.Object)">
            <summary>
            Visit this action.
            </summary>
            <param name="action">The action.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            The default Visit operation cannot be overriden in any derived ActionHandler.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.Visit(TallComponents.PDF.Actions.SubmitFormAction,System.Object)">
            <summary>
            Visit this action.
            </summary>
            <param name="action">The action.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            The default Visit operation cannot be overriden in any derived ActionHandler.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.Visit(TallComponents.PDF.Actions.NamedAction,System.Object)">
            <summary>
            Visit this action.
            </summary>
            <param name="action">The action.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            The default Visit operation cannot be overriden in any derived ActionHandler.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.Visit(TallComponents.PDF.Actions.ImportDataAction,System.Object)">
            <summary>
            Visit this action.
            </summary>
            <param name="action">The action.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            The default Visit operation cannot be overriden in any derived ActionHandler.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionHandler.Visit(TallComponents.PDF.Actions.UnknownAction,System.Object)">
            <summary>
            Visit this action.
            </summary>
            <param name="action">The action.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            The default Visit operation cannot be overriden in any derived ActionHandler.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Actions.ActionReason">
            <summary>
            The reason this action is executed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.Undefined">
            <summary>
            Undefined action.
            </summary>
            <remarks>The action reason was not specified.</remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.KeyStroke">
            <summary>
            KeyStroke action.
            </summary>
            <remarks>
            Can be used in combination with: ValueField
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.Validate">
            <summary>
            Validate action.
            </summary>
            <remarks>
            Can be used in combination with: ValueField
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.Format">
            <summary>
            Format action.
            </summary>
            <remarks>
            Can be used in combination with: ValueField
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.Calculate">
            <summary>
            Calculate action.
            </summary>
            <remarks>
            Can be used in combination with: ValueField
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.MouseUpAnnotation">
            <summary>
            Mouse up action.
            </summary>
            <remarks>
            Can be used in combination with: Annotation, Bookmark
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.MouseUpBookmark">
            <summary>
            Mouse up action.
            </summary>
            <remarks>
            Can be used in combination with: Annotation, Bookmark
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.MouseDown">
            <summary>
            Mouse down action.
            </summary>
            <remarks>
            Can be used in combination with: Annotation
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.MouseEnter">
            <summary>
            Mouse enter action.
            </summary>
            <remarks>
            Can be used in combination with: Annotation
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.MouseExit">
            <summary>
            Mouse exit action.
            </summary>
            <remarks>
            Can be used in combination with: Annotation
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.GotFocus">
             <summary>
             Got focus action.
             </summary>
             <remarks>
             <para>Can be used in combination with: Widget</para>
             <para>Also called 'on focus'.</para>
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.LostFocus">
             <summary>
             Lost focus action.
             </summary>
             <remarks>
             <para>Can be used in combination with: Widget</para>
             <para>Also called 'on blur'.</para>
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.BeforePrint">
             <summary>
             Before Print action.
             </summary>
             <remarks>
             <para>Can be used in combination with: Document</para>
             <para>Also called 'will print'.</para>
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.AfterPrint">
             <summary>
             After Print action.
             </summary>
             <remarks>
             <para>Can be used in combination with: Document</para>
             <para>Also called 'did print'.</para>
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.BeforeSave">
             <summary>
             Before Save action.
             </summary>
             <remarks>
             <para>Can be used in combination with: Document</para>
             <para>Also called 'will save'.</para>
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.AfterSave">
             <summary>
             After Save action.
             </summary>
             <remarks>
             <para>Can be used in combination with: Document</para>
             <para>Also called 'did save'.</para>
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.OpenDocument">
            <summary>
            Open action.
            </summary>
            <remarks>
            Can be used in combination with: Document, Page
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.OpenPage">
            <summary>
            Open action.
            </summary>
            <remarks>
            Can be used in combination with: Document, Page
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.ActionReason.Close">
            <summary>
            Close action.
            </summary>
            <remarks>
            Can be used in combination with: Page
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Actions.ActionVisitor">
            <summary>
            A derived instance of ActionVisitor is passed to Action.Accept(...). This method
            calls one of the below ActionVisitor methods according to the type of action.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.Action,System.Object)">
            <summary>
            Visit an action.
            </summary>
            <param name="annotation">The vistor must handle an action.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            <see langword="null"/> is returned when not implementing this functionality.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.GoToAction,System.Object)">
            <summary>
            Visit a GoToAction.
            </summary>
            <param name="action">The vistor must handle a GoToAction.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the action overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.HideAction,System.Object)">
            <summary>
            Visit a HideAction.
            </summary>
            <param name="action">The vistor must handle a HideAction.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the action overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.JavaScriptAction,System.Object)">
            <summary>
            Visit a JavaScriptAction.
            </summary>
            <param name="action">The vistor must handle a JavaScriptAction.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the action overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.FormAction,System.Object)">
            <summary>
            Visit a FormAction.
            </summary>
            <param name="action">The vistor must handle a FormAction.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the action overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.ResetFormAction,System.Object)">
            <summary>
            Visit a ResetFormAction.
            </summary>
            <param name="action">The vistor must handle a ResetFormAction.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the form-action overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.SubmitFormAction,System.Object)">
            <summary>
            Visit a SubmitFormAction.
            </summary>
            <param name="action">The vistor must handle a SubmitFormAction.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the form-action overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.UnknownAction,System.Object)">
            <summary>
            Visit an UnknownAction.
            </summary>
            <param name="action">The vistor must handle an UnknownAction.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the action overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.UriAction,System.Object)">
            <summary>
            Visit an UriAction.
            </summary>
            <param name="action">The vistor must handle an UriAction.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the action overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.NamedAction,System.Object)">
            <summary>
            Visit a NamedAction.
            </summary>
            <param name="action">The vistor must handle a NamedAction.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the action overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.LaunchAction,System.Object)">
            <summary>
            Visit a LaunchAction.
            </summary>
            <param name="action">The vistor must handle a LaunchAction.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the action overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionVisitor.Visit(TallComponents.PDF.Actions.ImportDataAction,System.Object)">
            <summary>
            Visit an ImportDataAction.
            </summary>
            <param name="action">The vistor must handle an ImportDataAction.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the action overload.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Actions.ActionResolver">
            <summary>
            This interface is used to get instances to other resolvers.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionResolver.GetDestinationResolver">
            <summary>
            Returns a Destination Resolver
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionResolver.GetAnnotationResolver">
            <summary>
            Returns a Annotations Resolver
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.ActionResolver.GetFieldResolver">
            <summary>
            Returns a Field Resolver
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Actions.ImportDataAction">
            <summary>
            The ImportData action imports field values from a file.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.ImportDataAction.#ctor">
            <summary>
            Create a new ImportData action.
            </summary>
            <remarks>
            By default the path of the FDF file will be "".
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.ImportDataAction.#ctor(System.String)">
            <summary>
            Create a new ImportData action.
            </summary>
            <param name="path">The path of the FDF file to import.</param>
        </member>
        <member name="P:TallComponents.PDF.Actions.ImportDataAction.Path">
            <summary>
            The path of the FDF file to import.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.ImportDataAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned ImportData action.</returns>
        </member>
        <member name="M:TallComponents.PDF.Actions.ImportDataAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
            <summary>
            Accept this action.
            </summary>
            <param name="visitor">The vistor used to Accept this action.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Actions.LaunchAction">
            <summary>
            A LaunchAction starts an external Application.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.LaunchAction.#ctor">
            <summary>
            Creates a new LaunchAction that starts an external Application.
            </summary>
            <remarks>
            By default the fileName will be ''.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.LaunchAction.#ctor(System.String)">
            <summary>
            Creates a new LaunchAction that starts an external Application.
            </summary>
            <param name="path">The complete path of the application to launch.</param>
        </member>
        <member name="P:TallComponents.PDF.Actions.LaunchAction.Path">
            <summary>
            The complete path of the application to launch.
            </summary>
            <remarks>
            You cannot set this property to <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Actions.LaunchAction.WindowBehavior">
            <summary>
            Whether to open the destination in a new windows, current one or specified by the user preferences.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.LaunchAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned named action.</returns>
        </member>
        <member name="M:TallComponents.PDF.Actions.LaunchAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
            <summary>
            Accept this action.
            </summary>
            <param name="visitor">The vistor used to Accept this action.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Actions.SubmitFormat">
            <summary>
            The submit format specifies what to submit to the server.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Actions.SubmitFormat.Pdf">
            <summary>
            Complete PDF document.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Actions.SubmitFormat.Html">
            <summary>
            HTML form format.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Actions.SubmitFormat.Xfdf">
            <summary>
            XML Forms Data Format.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Actions.SubmitFormat.Fdf">
            <summary>
            Forms Data Format (saved as .fdf file).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Actions.SubmitFormat.Xdp">
            <summary>
            XML Data Package.
            <para>
            Note: This value is supported in XFA documents only.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Actions.SubmitFormat.Xml">
            <summary>
            eXtensible Markup Language.
            <para>
            Note: This value is supported in XFA documents only.
            </para>
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Actions.HttpMethod">
            <summary>
            The http method specifies how to submit to the server.
            </summary>
            <remarks>
            This property is meaningfull for SubmitFormat: Pdf and Html
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.Actions.HttpMethod.Post">
            <summary>
            Use Http post request.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Actions.HttpMethod.Get">
            <summary>
            Use Http get.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Actions.NamedAction">
            <summary>
            A Named action executes an action predefined by the viewer application.
            </summary>
            <remarks>
            Well known (standard) names are: NextPage, PrevPage, FirstPage and LastPage.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.NamedAction.#ctor">
            <summary>
            Create a new Named action.
            </summary>
            <remarks>
            By default the Name will be 'NoName'.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.NamedAction.#ctor(System.String)">
            <summary>
            Create a new Named action.
            </summary>
            <param name="name">The name for the action to be performed by this named action.</param>
        </member>
        <member name="P:TallComponents.PDF.Actions.NamedAction.Name">
            <summary>
            The name for the action to be performed by this named action.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.NamedAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned named action.</returns>
        </member>
        <member name="M:TallComponents.PDF.Actions.NamedAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
            <summary>
            Accept this action.
            </summary>
            <param name="visitor">The vistor used to Accept this action.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Actions.FormAction">
            <summary>
            The form action is the base class for several form related actions.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Actions.FormAction.Fields">
            <summary>
            The fields used in this form action.
            </summary>
            <remarks>
            <para>This property has no meaning for the SubmitFormAction when the SubmitFormat is Pdf.</para>
            <para>The property returns <see langword="null"/> if AllFields is true.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Actions.FormAction.AllFields">
            <summary>
            All fields in the document.
            </summary>
            <remarks>
            If true the Fields collection property returns <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.FormAction.FieldsArray(TallComponents.PDF.Actions.ActionContext)">
            <summary>
            The fields used in this form action as array (Note that the AllFields bool is already resolved).
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Actions.GoToAction">
            <summary>
             The go-to action moves the actual view to a destination in the current document.
            </summary>
            <remarks>
            Instructs the PDF reader application to jump to a different position, determined by the <see cref="P:TallComponents.PDF.Actions.GoToAction.Destination"/>.
            <seealso cref="T:TallComponents.PDF.Navigation.InternalDestination"/><seealso cref="T:TallComponents.PDF.Navigation.RemoteDestination"/>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.GoToAction.#ctor">
            <summary>
            Create a new GoTo action.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.GoToAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned go-to action.</returns>
            <remarks>
            The cloned goto-action will point to the same Destination.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.GoToAction.#ctor(TallComponents.PDF.Page)">
            <summary>
            Create a new GoTo action based on a page
            </summary>
            <param name="page">The page point to.</param>
            <remarks>
            The page will be embedded in an internal destination, with PageDisplay set to FitEntire.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.GoToAction.#ctor(System.String,System.Int32)">
            <summary>
            Create a new GoTo action that jumps to the specified document.
            </summary>
            <remarks>
            Uses a <see cref="T:TallComponents.PDF.Navigation.RemoteDestination"/> to jump to another file. Note that the fileSpecification must be 
            a path to a file, not a URI.
            </remarks>
            <param name="fileSpecification">The name of the file.</param>
            <param name="pageIndex">The 0-based index of the page.</param>
        </member>
        <member name="M:TallComponents.PDF.Actions.GoToAction.#ctor(TallComponents.PDF.Navigation.Destination)">
            <summary>
            Create a new go-to action based on a Destination
            </summary>
            <param name="destination">The destination</param>
        </member>
        <member name="P:TallComponents.PDF.Actions.GoToAction.Destination">
            <summary>
            The destination this go-to action points to.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.GoToAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
            <summary>
            Accept this action.
            </summary>
            <param name="visitor">The vistor used to Accept this action.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Actions.HideAction">
            <summary>
            The hide action sets or clears the annotation's Hidden flag.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.HideAction.#ctor">
            <summary>
            Creates a new hide action.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Actions.HideAction.Show">
            <summary>
            Specify if the annotations should be shown (true) of hidden (false).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Actions.HideAction.Annotations">
            <summary>
            The annotations which must be showns or hidden, depending of the Show boolean.
            </summary>
            <remarks>
            <para>Note that the widget annotations located in the Fields can or cannot be available in this collection.</para>
            <para>Adding 1 or more annotations in this collection makes the PDF incompatible with Adobe Acrobat Standard or Professional designer mode.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Actions.HideAction.Fields">
            <summary>
            The fields which must be showns or hidden, depending of the Show boolean.
            </summary>
            <remarks>
            <para>Note that the widget annotations located in this collection can or cannot be available in the Annotations.</para>
            <para>Adding more than 1 field in this collection makes the PDF incompatible with Adobe Acrobat Standard or Professional designer mode.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.HideAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned hide action.</returns>
        </member>
        <member name="M:TallComponents.PDF.Actions.HideAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
            <summary>
            Accept this action.
            </summary>
            <param name="visitor">The vistor used to Accept this action.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Actions.IActionResolver">
            <summary>
            This interface is used to get instances to other resolvers.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.IActionResolver.GetDestinationResolver">
            <summary>
            Returns a Destination Resolver
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.IActionResolver.GetAnnotationResolver">
            <summary>
            Returns a Annotations Resolver
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.IActionResolver.GetFieldResolver">
            <summary>
            Returns a Field Resolver
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Actions.JavaScriptAction">
            <summary>
            A JavaScript action executes javascript.
            </summary>
            <remarks>
            This class does not exectute the JavaScript directly, it depends on the context (location) whare it lives and the 
            ScriptBehavior specified on the document.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.JavaScriptAction.#ctor">
            <summary>
            Create a new JavaScript action.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.JavaScriptAction.#ctor(TallComponents.PDF.JavaScript.JavaScript)">
            <summary>
            Create a new JavaScript action.
            </summary>
            <param name="javaScript">The JavaScript to embed.</param>
        </member>
        <member name="M:TallComponents.PDF.Actions.JavaScriptAction.#ctor(System.String)">
            <summary>
            Create a new JavaScript action.
            </summary>
            <param name="javaScriptCode">The JavaScript code to embed.</param>
        </member>
        <member name="P:TallComponents.PDF.Actions.JavaScriptAction.JavaScript">
            <summary>
            The java script code in this java script action.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.JavaScriptAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned JavaScript action.</returns>
            <remarks>
            The cloned javascript-action will point to a cloned JavaScript object.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.JavaScriptAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
            <summary>
            Accept this action.
            </summary>
            <param name="visitor">The vistor used to Accept this action.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Actions.ResetFormAction">
            <summary>
            The reset form action resets the fields to there default value.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.ResetFormAction.#ctor">
            <summary>
            Create a new reset form action.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.ResetFormAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned reset form action.</returns>
        </member>
        <member name="M:TallComponents.PDF.Actions.ResetFormAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
            <summary>
            Accept this action.
            </summary>
            <param name="visitor">The vistor used to Accept this action.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Actions.SubmitFormAction">
            <summary>
            The submit form action send form data (containing field values) to a URL in a specified format.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.SubmitFormAction.#ctor">
            <summary>
            Create a new submit form action.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Actions.SubmitFormAction.Url">
            <summary>
            The uniform resource locator (url) for this submit form action.
            </summary>
            <remarks>
            You cannot set this property to <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Actions.SubmitFormAction.SubmitFormat">
            <summary>
            The submit format specifies what to submit to the server.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Actions.SubmitFormAction.HttpMethod">
            <summary>
            The http method specifies how to submit to the server.
            </summary>
            <remarks>
            This property is meaningfull for SubmitFormat: Pdf and Html
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Actions.SubmitFormAction.IncludeEmptyFields">
            <summary>
            Fields without a value should be submitted also.
            </summary>
            <remarks>
            This property has no meaning for SubmitFormat: Pdf 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Actions.SubmitFormAction.ConvertDatesToStandardFormat">
            <summary>
            When submitting all fields which contains a date are converted to a predefined format, 
            otherwise the value is submitted as-is (aka how the user entered the data).
            </summary>
            <remarks>
            <para>This property has no meaning for SubmitFormat: Pdf.</para>
            <para>The predefined format: 'D:yyyymmdd' (without the quotes)</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.SubmitFormAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned submit form action.</returns>
        </member>
        <member name="M:TallComponents.PDF.Actions.SubmitFormAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
            <summary>
            Accept this action.
            </summary>
            <param name="visitor">The vistor used to Accept this action.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Actions.UnknownAction">
            <summary>
            Unknown action. This action will be created if the action is unknown or different from the supported types.
            </summary>
            <remarks>
            You cannot instanciate this class.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Actions.UnknownAction.Name">
            <summary>
            The name for this unknown action.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.UnknownAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned unknown action.</returns>
        </member>
        <member name="M:TallComponents.PDF.Actions.UnknownAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
            <summary>
            Accept this action.
            </summary>
            <param name="visitor">The vistor used to Accept this action.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Actions.UriAction">
            <summary>
            A UriAction starts an external web site from its URL.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.UriAction.#ctor">
            <summary>
            Creates a new UriAction that starts an external web site from its URL. Initial URL is empty.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Actions.UriAction.#ctor(System.String)">
            <summary>
            Creates a new UriAction that starts an external web site from the given URL.
            </summary>
            <param name="uri">The uniform resource identifier (uri) for this Uri action.</param>
        </member>
        <member name="M:TallComponents.PDF.Actions.UriAction.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new UriAction that starts an external web site from the given URL.
            </summary>
            <param name="uri">The uniform resource identifier (uri) for this Uri action.</param>
            <param name="isMap">A flag specifying whether to track the mouse position when the Uri is resolved.</param>
        </member>
        <member name="P:TallComponents.PDF.Actions.UriAction.Uri">
            <summary>
            The uniform resource identifier (uri) for this Uri action.
            </summary>
            <remarks>
            You cannot set this property to <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Actions.UriAction.IsMap">
            <summary>
            A flag specifying whether to track the mouse position when the Uri is resolved.
            </summary>
            <remarks>
            This entry  applies only to actions triggered by the user's clicking annotation; 
            it is ignored for actions associated with a bookmark or with a document's open action.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Actions.UriAction.Clone">
            <summary>
            Clone this action.
            </summary>
            <returns>The cloned uri action.</returns>
        </member>
        <member name="M:TallComponents.PDF.Actions.UriAction.Accept(TallComponents.PDF.Actions.ActionVisitor,System.Object)">
            <summary>
            Accept this action.
            </summary>
            <param name="visitor">The vistor used to Accept this action.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.AnnotationsUsageRights">
            <summary>
            Annotation-related usage rights.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.AnnotationsUsageRights.None">
            <summary>
            None of the usage rights are enabled.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.AnnotationsUsageRights.Unknown">
            <summary>
            The usage rights are unknown (the rights are saved by an unknown version)
            </summary>
        </member>
        <member name="F:TallComponents.PDF.AnnotationsUsageRights.Create">
            <summary>
            Permits to create annotations.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.AnnotationsUsageRights.Delete">
            <summary>
            Permits to delete annotations.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.AnnotationsUsageRights.Modify">
            <summary>
            Permits to modify annotations.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.AnnotationsUsageRights.Copy">
            <summary>
            Permits to copy annotations.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.AnnotationsUsageRights.Import">
            <summary>
            Permits to import annotations.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.AnnotationsUsageRights.Export">
            <summary>
            Permits to export annotations.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.AnnotationsUsageRights.Online">
            <summary>
            Permits online commenting.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.AnnotationsUsageRights.SummaryView">
            <summary>
            Permits a summery of the markup annotations.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.DropDownListFieldValidateValueEventArgs">
            <summary>
            Class containing data for the ValidateValue event for drop-down lists.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.DropDownListFieldValidateValueEventArgs.FieldValue">
            <summary>
            For comboboxes, the event value is the display
            value, while the field stores the corresponding export value.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.XfaInfo">
            <summary>
            This class contains additional XFA specific information for this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaInfo.DataBinding">
            <summary>
            Returns the type of DataBinding this XFA fields use. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaInfo.DataBindingPath">
            <summary>
            Returns the data binding path this XFA field use.
            </summary>
            <remarks>Usefull when DataBinding = XfaDataBinding.DataRef only, otherwise null/nothing will be returned.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaInfo.DisplayPattern">
            <summary>
            The display pattern accociated with this field.
            </summary>
            <remarks>
            Returns null if not defined or not applicable.
            <para>XFA: format picture clause.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaInfo.ValidationPattern">
            <summary>
            The validation pattern accociated with this field.
            </summary>
            <remarks>
            Returns null if not defined or not applicable.
            <para>XFA: validate picture clause.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaInfo.DataSomExpression">
            <summary>
            The data som expression for this field.
            </summary>
            <remarks>
            In the exported xdp file the data are stored under this key.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaInfo.DataPattern">
            <summary>
            The data pattern accociated with this field.
            </summary>
            <remarks>
            Returns null if not defined or not applicable.
            <para>XFA: bind picture clause.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaInfo.EditPattern">
            <summary>
            The edit pattern accociated with this field.
            </summary>
            <remarks>
            Returns null if not defined or not applicable.
            <para>XFA: ui picture clause.</para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.XfaDataBinding">
            <summary>
            The data binding used in the XFA section of this field.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaDataBinding.None">
            <summary>
            No data binding is used for this field. Getting a value is unspecified. Setting an value has no effect.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaDataBinding.Normal">
            <summary>
            The normal (Once) databinding is used. Getting and Setting a value is supported, if XfaInfo.HasDataConnections is false, otherwise unspecified.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaDataBinding.DataRef">
            <summary>
            The data binding uses a data reference. Getting a value is unspecified. Setting a value will be ignored.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaDataBinding.Global">
            <summary>
            The global data binding is used for this field. Getting a value is unspecified. Setting a value will be ignored.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaDataBinding.Unknown">
            <summary>
            This Xfa field has an unknown data binding. Getting a value is unspecified. Setting a value will be ignored.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.XfaFieldType">
            <summary>
            The field type found in the XFA section 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaFieldType.Barcode">
            <summary>
            A barcode.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaFieldType.Button">
            <summary>
            A push button.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaFieldType.CheckBox">
            <summary>
            A two-state check box.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaFieldType.RadioButton">
            <summary>
            A two-state button that represents a selection.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaFieldType.ListBox">
            <summary>
            A list of options from which one or more can be selected.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaFieldType.DropDownList">
            <summary>
            A drop-down list of options from which one can be selected or a new option can be entered.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaFieldType.DateTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaFieldType.Image">
            <summary>
            
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaFieldType.Numeric">
            <summary>
            
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaFieldType.Signature">
            <summary>
            A signature, e.g. to state agreement.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaFieldType.Text">
            <summary>
            A single or multiline text box.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaFieldType.Password">
            <summary>
            A password text box.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.XfaBarcodeType">
            <summary>
            The bar code pattern 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaBarcodeType.Code2Of5Interleaved">
            <summary>
            Code 2 of 5 Interleaved, as defined in ANSI/AIM BC2-1995, USS Interleaved 2-of-5.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaBarcodeType.Code39">
            <summary>
            Code39 (also known as code 3 of 9), as defined in ANSI/AIM BC1-1995, USS Code39.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaBarcodeType.Code128">
            <summary>
            Code 128, as defined in ANSI/AIM BC4-1995, ISS Code 128 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.XfaBarcodeType.Unknown">
            <summary>
            A barcode type not known to this component.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.RichTextHelper">
            <summary>
            A Rich Text helper class for the TextField. 
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.PdfFieldType">
            <summary>
            All field types.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.PdfFieldType.TextBox">
            <summary>
            A single or multiline text box.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.PdfFieldType.PushButton">
            <summary>
            A push button.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.PdfFieldType.CheckBox">
            <summary>
            A two-state check box.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.PdfFieldType.RadioButton">
            <summary>
            A two-state button that represents a selection.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.PdfFieldType.ListBox">
            <summary>
            A list of options from which one or more can be selected.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.PdfFieldType.ComboBox">
            <summary>
            A drop-down list of options from which one can be selected or a new option can be entered.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.PdfFieldType.Signature">
            <summary>
            A signature, e.g. to state agreement.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.PdfFieldType.Unknown">
            <summary>
            A field not know to this component.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.Barcodes.OneDimensionalBarcodeField">
            <summary>
            A OneDimensionalBarcode PDF form field is the base class for all 1D barcodes. 
            </summary>
            <remarks>
            You cannot create an instance of this class. 
            <para>This field type has no meaning in classic PDF documents.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Barcodes.OneDimensionalBarcodeField.DataLength">
            <summary>
            The expected maximum number of characters
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.Barcodes.BarcodeField">
            <summary>
            A barcode PDF form field is the base class for all barcodes.
            </summary>
            <remarks>
            You cannot create an instance of this class. 
            <para>This field type has no meaning in classic PDF documents.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Barcodes.BarcodeField.defaultValue">
            <summary>
            The default value asociated with this field.
            </summary> 
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Barcodes.BarcodeField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Barcodes.BarcodeField.TextLocation">
            <summary>
            The used text location for this barcode
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.Barcodes.Code128BarcodeField">
            <summary>
            A Code128 Barcode PDF form field.
            </summary>
            <remarks>
            You cannot create an instance of this class. 
            <para>This field type has no meaning in classic PDF documents.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.Barcodes.Code128BarcodeField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.Barcodes.Code2of5InterleavedBarcodeField">
            <summary>
            A Interleave 2 of 5 Barcode PDF form field. 
            </summary>
            <remarks>
            You cannot create an instance of this class. 
            <para>This field type has no meaning in classic PDF documents.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Barcodes.Code2of5InterleavedBarcodeField.Checksum">
            <summary>
            specifies if this  barcode includes a checksum.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Barcodes.Code2of5InterleavedBarcodeField.WideNarrowRatio">
            <summary>
            Specifies the wide narrow ratio for this barcode 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.Barcodes.Code2of5InterleavedBarcodeField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.Barcodes.Code3of9BarcodeField">
            <summary>
            A Code39 Barcode PDF form field.  
            </summary>
            <remarks>
            You cannot create an instance of this class. 
            <para>This field type has no meaning in classic PDF documents.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Barcodes.Code3of9BarcodeField.Checksum">
            <summary>
            specifies if this  barcode includes a checksum.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Barcodes.Code3of9BarcodeField.WideNarrowRatio">
            <summary>
            Specifies the wide narrow ratio for this barcode 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.Barcodes.Code3of9BarcodeField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.Barcodes.UnknownBarcodeField">
            <summary>
            An unknown bar code PDF form field. 
            </summary>
            <remarks>
            You cannot create an instance of this class. 
            <para>This field type has no meaning in classic PDF documents.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.Barcodes.UnknownBarcodeField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.CalculateActionChangedEventHandler">
            <summary>
            Represents the method that handles the ValueField.CalculateActionChanged event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.ValueFieldSequenceChangedEventArgs">
            <summary>
            Class containing data for the ValueFieldSequence.Changed event.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueFieldSequenceChangedEventArgs.Added">
            <summary>
            The ValueField that has been added.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueFieldSequenceChangedEventArgs.Removed">
            <summary>
            The ValueField that has been removed.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.ValueFieldSequenceChangedEventHandler">
            <summary>
            Represents the method that handles the ValueFieldSequence.Changed event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The value field sequence changed event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.ValueFieldSequence">
            <summary>
            A Sequence (ordered collection) of value fields.
            </summary>
            <remarks>
            This sequence is non-creatable and can be obtained through the CalculationOrder property of Document. 
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Forms.Fields.ValueFieldSequence.Changed">
            <summary>
            Fired when this sequence has changed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueFieldSequence.Item(System.Int32)">
            <summary>
            Retrieve a value field by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueFieldSequence.Count">
            <summary>
            Number of value fields in this sequence.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ValueFieldSequence.Contains(TallComponents.PDF.Forms.Fields.ValueField)">
            <summary>
            Check if the value field exists in this sequence.
            </summary>
            <returns>True is the sequence contains the value field, false otherwise.</returns>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ValueFieldSequence.IndexOf(TallComponents.PDF.Forms.Fields.ValueField)">
            <summary>
            Returns the index of the given value field in this sequence.
            </summary>
            <param name="valueField">The value field.</param>
            <returns>The index in the sequence or -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ValueFieldSequence.Move(System.Int32,System.Int32)">
            <summary>
            Moves an existing value field to an other position.
            </summary>
            <param name="fromIndex">The zero-based index from the value field to move.</param>
            <param name="toIndex">The zero-based index for the new position.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ValueFieldSequence.add(TallComponents.PDF.Forms.Fields.ValueField)">
            <summary>
            Add a value field to the end of this sequence.
            </summary>
            <param name="valueField">The field to add.</param>
            <remarks>
            When the ValueField is already added, the existing index is returned.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ValueFieldSequence.remove(TallComponents.PDF.Forms.Fields.ValueField)">
            <summary>
            Removes a value field from this sequence.
            </summary>
            <param name="valueField">The field to remove.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ValueFieldSequence.subscribe(TallComponents.PDF.Forms.Fields.ValueField)">
            <summary>
            subscribes a value field to the CalcutateAction Changed event.
            </summary>
            <param name="valueField">The field to subscribe.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ValueFieldSequence.unsubscribe(TallComponents.PDF.Forms.Fields.ValueField)">
            <summary>
            unsubscribes a value field to the CalcutateAction Changed event.
            </summary>
            <param name="valueField">The field to unsubscribe.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ValueFieldSequence.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ValueFieldSequence.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection">
            <summary>
            Collection of form options. Associated with a RadioButtonField.
            </summary>
            <remarks>
            This collection is automatically maintained when adding or removing
            widgets to the field.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection.Item(System.Int32)">
            <summary>
            Retrieve a radio button option by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection.Count">
            <summary>
            Number of options.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection.Contains(TallComponents.PDF.Forms.Fields.RadioButtonOption)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOption">RadioButtonOption</see> is in the <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection">RadioButtonOptionCollection</see>.
            </summary>
            <param name="radioButtonOption">The <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOption"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOption"/> is found in this <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="radioButtonOption"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="radioButtonOption"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection.IndexOf(TallComponents.PDF.Forms.Fields.RadioButtonOption)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOption">RadioButtonOption</see> in the <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection">RadioButtonOptionCollection</see>.
            </summary>
            <param name="radioButtonOption">The <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOption"/> to locate in the <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Forms.Fields.RadioButtonOption"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonOptionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.ListOptionCollection">
            <summary>
            Collection of form options. Associated with a DropDownListField and ListBoxField.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ListOptionCollection.Item(System.Int32)">
            <summary>
            Retrieve a list option by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ListOptionCollection.Count">
            <summary>
            Number of options.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.Clear">
            <summary>
            Removes all options from the collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a list option at the specified zero-based index.
            </summary>
            <param name="index">Zero-based index.</param>
            <remarks>
            An index-out-of-range is silently ignored.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.Insert(System.Int32,TallComponents.PDF.Forms.Fields.ListOption)">
            <summary>
            Insert an option at the specified zero-based index.
            </summary>
            <param name="index">Zero-based index.</param>
            <param name="option">Insert this option.</param>
            <remarks>
            An index-out-of-range is silently ignored.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.Add(TallComponents.PDF.Forms.Fields.ListOption)">
            <summary>
            Add an option to the end of the collection.
            </summary>
            <param name="option">The option to add.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.Remove(TallComponents.PDF.Forms.Fields.ListOption)">
            <summary>
            Remove a list option from this collection.
            </summary>
            <param name="listOption">Remove this list option.</param>
            <returns>true if removing the listOption succeeded.</returns>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.AddRange(TallComponents.PDF.Forms.Fields.ListOption[])">
            <summary>
            Adds the elements of a ListOption array to the end of this collection.
            </summary>
            <remarks><para>Note: When an exception occurs the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)</para>
            </remarks>
            <param name="listOptions">The array of ListOptions whose elements should be added to 
            the end of the collection.</param>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="listOptions"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.Contains(TallComponents.PDF.Forms.Fields.ListOption)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Forms.Fields.ListOption">ListOption</see> is in the <see cref="T:TallComponents.PDF.Forms.Fields.ListOptionCollection">ListOptionCollection</see>.
            </summary>
            <param name="listOption">The <see cref="T:TallComponents.PDF.Forms.Fields.ListOption"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Forms.Fields.ListOption"/> is found in this <see cref="T:TallComponents.PDF.Forms.Fields.ListOptionCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="listOption"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="listOption"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.IndexOf(TallComponents.PDF.Forms.Fields.ListOption)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Forms.Fields.ListOption">ListOption</see> in the <see cref="T:TallComponents.PDF.Forms.Fields.ListOptionCollection">ListOptionCollection</see>.
            </summary>
            <param name="listOption">The <see cref="T:TallComponents.PDF.Forms.Fields.ListOption"/> to locate in the <see cref="T:TallComponents.PDF.Forms.Fields.ListOptionCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Forms.Fields.ListOption"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ListOptionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.FieldCollection">
            <summary>
            Collection of form fields.
            </summary>
            <remarks>
            This collection is non-creatable and can be obtained through the Fields property of Document and FormAction. 
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Forms.Fields.FieldCollection.Changed">
            <summary>
            Fired when this collection has changed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.FieldCollection.Item(System.Int32)">
            <summary>
            Retrieve a field by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.FieldCollection.Item(System.String)">
            <summary>
            Retrieve a field by the fully qualified name.
            </summary>
            <remarks>
            Returns the field with the fully qualified name if found, otherwise  <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.FieldCollection.Count">
            <summary>
            Number of fields in this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldCollection.Contains(System.String)">
            <summary>
            Check if the fully qualified name exists in this collection
            </summary>
            <returns>True is the collection contains the fully qualified name, false otherwise.</returns>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.FieldCollection.FullNames">
            <summary>
            Returns all fully qualified names in this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldCollection.Add(TallComponents.PDF.Forms.Fields.Field)">
            <summary>
            Add a field to this collection.
            </summary>
            <param name="field">The field to add.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldCollection.Remove(System.String)">
            <summary>
            Removes a field from this collection.
            </summary>
            <param name="fullName">The full name from the field to remove.</param>
            <remarks>Removing a field at a non-existing full name is silently ignored.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldCollection.Remove(TallComponents.PDF.Forms.Fields.Field)">
            <summary>
            Removes a field from this collection.
            </summary>
            <param name="field">The field to remove.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldCollection.Clear">
            <summary>
            Removes all fields from this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.FieldsChangedEventArgs">
            <summary>
            Class containing data for the FieldCollection.Changed event.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.FieldsChangedEventArgs.Added">
            <summary>
            Fields that have been added.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.FieldsChangedEventArgs.Removed">
            <summary>
            Fields that have been removed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.FieldsChangedEventArgs.Changed">
            <summary>
            Fields that has been changed (e.g. in dynamic xfa, the field name can be changed)
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.FieldsChangedEventHandler">
            <summary>
            Represents the method that handles the FieldCollection.Changed event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The fields changed event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.FullNameChangeEventArgs">
            <summary>
            Class containing data for the FullNameChangeRequest and FullNameChangeRequestCommit event.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.FullNameChangeEventHandler">
            <summary>
            Represents the method that handles the FullNameChangeRequest and FullNameChangeRequestCommit event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The full name change event arguments.</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.OptionCollection.Item(System.Int32)">
            <summary>
            Retrieve an option by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.OptionCollection.Count">
            <summary>
            Number of options.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.OptionCollection.Clear">
            <summary>
            Removes all options from the collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.OptionCollection.RemoveAt(System.Int32)">
            <summary>
            Remove an option at the specified zero-based index.
            </summary>
            <param name="index">Zero-based index.</param>
            <remarks>
            An index-out-of-range is silently ignored.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.OptionCollection.Insert(System.Int32,TallComponents.PDF.Forms.Fields.Option)">
            <summary>
            Insert an option at the specified zero-based index.
            </summary>
            <param name="index">Zero-based index.</param>
            <param name="option">Insert this option.</param>
            <remarks>
            An index-out-of-range is silently ignored.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.OptionCollection.Add(TallComponents.PDF.Forms.Fields.Option)">
            <summary>
            Add an option to the end of the collection.
            </summary>
            <param name="option">The option to add.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.OptionCollection.Contains(TallComponents.PDF.Forms.Fields.Option)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Forms.Fields.Option">Option</see> is in the <see cref="T:TallComponents.PDF.Forms.Fields.OptionCollection">OptionCollection</see>.
            </summary>
            <param name="option">The <see cref="T:TallComponents.PDF.Forms.Fields.Option"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Forms.Fields.Option"/> is found in this <see cref="T:TallComponents.PDF.Forms.Fields.OptionCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="option"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="option"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.OptionCollection.IndexOf(TallComponents.PDF.Forms.Fields.Option)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Forms.Fields.Option">Option</see> in the <see cref="T:TallComponents.PDF.Forms.Fields.OptionCollection">OptionCollection</see>.
            </summary>
            <param name="option">The <see cref="T:TallComponents.PDF.Forms.Fields.Option"/> to locate in the <see cref="T:TallComponents.PDF.Forms.Fields.OptionCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Forms.Fields.Option"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.OptionCollection.GetEnumerator">
            <summary>
            Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.PdfFieldCollection">
            <summary>
            Collection of form fields. Associated with a document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfFieldCollection.Item(System.Int32)">
            <summary>
            Retrieve a field by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfFieldCollection.Count">
            <summary>
            Number of fields.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.PushButtonField">
            <summary>
            A push button PDF form field.  
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.PushButtonField.#ctor(System.String)">
            <summary>
            Create a new Push Button field. 
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.PushButtonField.#ctor(TallComponents.PDF.Forms.Fields.Field)">
            <summary>
            Create a new field, based on an existing field (used for cloning).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.PushButtonField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.StaticFieldCollection">
            <summary>
            Collection of form fields. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.StaticFieldCollection.#ctor(TallComponents.PDF.Base.Object,TallComponents.PDF.Forms.Fields.IFieldResolver)">
            <summary>
            Creates a new field collection, based on the given object.
            </summary>
            <param name="obj">The object with contains the base information for this collection.</param>
            <param name="fieldResolver">Needed to resolve existing field.</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.StaticFieldCollection.Item(System.Int32)">
            <summary>
            Retrieve a field by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.StaticFieldCollection.Item(System.String)">
            <summary>
            Retrieve a field by the fully qualified name.
            </summary>
            <remarks>
            Returns the field with the fully qualified name if found, otherwise  <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.StaticFieldCollection.Count">
            <summary>
            Number of fields.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.StaticFieldCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.StaticFieldCollection.Add(TallComponents.PDF.Forms.Fields.Field)">
            <summary>
            Add a field to this collection.
            </summary>
            <param name="field">The field to add.</param>
            <remarks>
            This method is not supported for XFA documents.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.StaticFieldCollection.Remove(TallComponents.PDF.Forms.Fields.Field)">
            <summary>
            Removes a field from this collection.
            </summary>
            <param name="field">The field to remove.</param>
            <remarks>
            This method is not supported for XFA documents.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.StaticFieldCollection.Clear">
            <summary>
            Removes all fields from this collection.
            </summary>
            <remarks>
            This method is not supported for XFA documents.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.StaticFieldCollection.isNameAvailable(System.String)">
            <summary>
            returns null is available otherwise the message why not.
            </summary>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.ValueChangedEventHandler">
            <summary>
            Represents the method that handles the ValueChanged event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The value changed event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.FormatValueEventHandler">
            <summary>
            Represents the method that handles the FormatValue event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The format value event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.ValidateValueEventHandler">
            <summary>
            Represents the method that handles the ValidateValue event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The validate value event arguments.</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.FieldResolver">
            <summary>
            An annotation tresolver is used to resolve a Base.Object to an existing (derived)annotation.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.FieldVisitor">
            <summary>
            A derived instance of FieldVisitor is passed to Field.Accept(...). This method
            calls one of the below FieldVisitor methods according to the type of field.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.Field,System.Object)">
            <summary>
            Visit a field.
            </summary>
            <param name="field">The vistor must handle a field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            <see langword="null"/> is returned when not implementing this functionality.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.ValueField,System.Object)">
            <summary>
            Visit a value field.
            </summary>
            <param name="field">The vistor must handle a value field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.PushButtonField,System.Object)">
            <summary>
            Visit a push button field.
            </summary>
            <param name="field">The vistor must handle a push button field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.CheckBoxField,System.Object)">
            <summary>
            Visit a check box field.
            </summary>
            <param name="field">The vistor must handle a check box field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.DropDownListField,System.Object)">
            <summary>
            Visit a dropdown list field.
            </summary>
            <param name="field">The vistor must handle a dropdown list field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.ListBoxField,System.Object)">
            <summary>
            Visit a listbox field.
            </summary>
            <param name="field">The vistor must handle a listbox field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.PasswordField,System.Object)">
            <summary>
            Visit a password field.
            </summary>
            <param name="field">The vistor must handle a password field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.RadioButtonField,System.Object)">
            <summary>
            Visit a radiobutton field.
            </summary>
            <param name="field">The vistor must handle a radiobutton field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.SignatureField,System.Object)">
            <summary>
            Visit a signature field.
            </summary>
            <param name="field">The vistor must handle a signature field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.TextField,System.Object)">
            <summary>
            Visit a text field.
            </summary>
            <param name="field">The vistor must handle a text field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.UnknownField,System.Object)">
            <summary>
            Visit a unknown field.
            </summary>
            <param name="field">The vistor must handle a unknown field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.NumericField,System.Object)">
            <summary>
            Visit a numeric field.
            </summary>
            <param name="field">The vistor must handle a numeric field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.ImageField,System.Object)">
            <summary>
            Visit a image field.
            </summary>
            <param name="field">The vistor must handle a image field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.DateTimeField,System.Object)">
            <summary>
            Visit a date/time field.
            </summary>
            <param name="field">The vistor must handle a date/time field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.Barcodes.BarcodeField,System.Object)">
            <summary>
            Visit a barcode field.
            </summary>
            <param name="field">The vistor must handle a barcode field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the value field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.Barcodes.Code128BarcodeField,System.Object)">
            <summary>
            Visit a code 128 barcode field.
            </summary>
            <param name="field">The vistor must handle a code 128 barcode field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the barcode field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.Barcodes.Code2of5InterleavedBarcodeField,System.Object)">
            <summary>
            Visit a code 2 of 5 interleaved barcode field.
            </summary>
            <param name="field">The vistor must handle a code 2 of 5 interleaved barcode field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the barcode field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.Barcodes.Code3of9BarcodeField,System.Object)">
            <summary>
            Visit a code 3 of 9 barcode field.
            </summary>
            <param name="field">The vistor must handle a code 3 of 9 barcode field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the barcode field overload.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.FieldVisitor.Visit(TallComponents.PDF.Forms.Fields.Barcodes.UnknownBarcodeField,System.Object)">
            <summary>
            Visit a unknown barcode field.
            </summary>
            <param name="field">The vistor must handle a unknown barcode field.</param>
            <param name="argument">The additional argument passed to the Accept method (can be <see langword="null"/>).</param>
            <remarks>
            Not implementing this functionality calls the barcode field overload.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.CheckBoxField">
            <summary>
            A check box PDF form field. 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.CheckBoxField.#ctor(System.String)">
            <summary>
            Create a new Check box field.
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.CheckBoxField.OnValue">
            <summary>
            The value for the field when it's in On state
            </summary>
            <remarks>
            Default value is 'Yes'.
            <para>Setting the OnValue value is supported for Classic PDF document only.</para>
            <para>Note that the Value will be changed also if the checkbox is currently checked.</para>
            <para>You may not set this value to 'Off'</para>
            <para>There must be at least 1 widget connected to this fields, otherwise a NotSupportedException will be raised.</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.CheckBoxField.OffValue">
            <summary>
            The value for the field when it's in Off state
            </summary>
            <remarks>
            For classic PDF documents this value must be 'Off'.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.CheckBoxField.NeutralValue">
            <summary>
            The value for the field when it's in Neutral state (meaningful when HasNeutralState = true only)
            </summary>
            <remarks>
            For classic PDF documents setting this value is ignored.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.CheckBoxField.HasNeutralState">
            <summary>
            Whether the checkbox has a neutral state
            </summary>
            <remarks>
            For classic PDF documents this setting is always 'false'.
            Setting this value for non XFA documents has no meaning.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.CheckBoxField.CheckBoxValue">
            <summary>
            The strong typed value for this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.CheckBoxField.CheckBoxDefaultValue">
            <summary>
            The default value for this field
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.CheckBoxField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.CheckBoxField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.CheckBoxField.AppearanceProviderValue">
            <summary>
            This property will be used if a AppearanceProvide draws it's visuals.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.CheckState">
            <summary>
            The states for the check box.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.CheckState.On">
            <summary>
            The checkbox is checked.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.CheckState.Off">
            <summary>
            The checkbox in unchecked.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.CheckState.Neutral">
            <summary>
            The checkbox is neutral.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.CheckState.Unknown">
            <summary>
            The checkbox value is not one of the three accepted values. Note: You cannot set properties to this value.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.DateTimeFormat">
            <summary>
            The data format the date time field use.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.DateTimeFormat.Date">
            <summary>
            Date only.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.DateTimeFormat.Time">
            <summary>
            Time only.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.DateTimeFormat.DateAndTime">
            <summary>
            Both Date and Time.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.FormatValueEventArgs">
            <summary>
            Class containing data for the FormatValue event.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.FormatValueEventArgs.Value">
            <summary>
            The value that needs to be updated for formatting.
            </summary>
            <remarks>
            This value can be updated to reflect the format operation.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.IFieldResolver">
            <summary>
            An field resolver is used to resolve a Base.Object to an existing (derived)field.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.ImageSizing">
            <summary>
            The mapping between the image size and the widget (field) size.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.ImageSizing.Stretch">
            <summary>
            Stretch the image to perfecly fit (the aspect ratio will be ignored).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.ImageSizing.Scale">
            <summary>
            Fit the image with respecting the aspect ratio.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.ImageSizing.Actual">
            <summary>
            Use the actual image size (note that this can result in clipped or overflowed images).
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.NumberFormat">
            <summary>
            The data format the number field use.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.NumberFormat.Float">
            <summary>
            float, any number.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.NumberFormat.Decimal">
            <summary>
            Decimal is like the float, but the number of digits before and after the the decimal point can be specified.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.NumberFormat.Integer">
            <summary>
            Only non-fractal numbers are allowed.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.DateTimeField">
            <summary>
            A date time PDF form field. You cannot create an instance of this class. 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            <para>This field type has no meaning in classic PDF documents. </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.DateTimeField.Format">
            <summary>
            The data format 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.DateTimeField.DateTimeValue">
            <summary>
            The strongtyped value for this field
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.DateTimeField.DateTimeDefaultValue">
            <summary>
            The default value asociated with this field.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.DateTimeField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.DateTimeField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.DropDownListField">
            <summary>
            A drop down list PDF form field (also known as combo box). 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.DropDownListField.#ctor(System.String)">
            <summary>
            Create a new drop down list field (also known as combobox).
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.DropDownListField.Options">
            <summary>
            Contains all options from which a choice can be made. An option has both 
            a displayed name and an exported name, often they are the same.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.DropDownListField.AllowTextEntry">
            <summary>
            Whether text can be entered, if false the value of one of the available Options must be entered 
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.DropDownListField.SpellCheckAllowed">
            <summary>
            Specifies whether spell-checking is allowed on this field.
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only. Please note that
            setting this value to true will not cause the text to be spell-checked. It just marks
            the field as eligible for spell-checking.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.DropDownListField.CommitOnSelectionChange">
            <summary>
            Controls the moment that the selected value is committed to the field.
            If true, the field value is updated at the moment that a user changes
            the selection. If false, the value is updated when the field looses
            focus.
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.DropDownListField.DropDownListValue">
            <summary>
            The strong types Value
            </summary>
            <remarks>
            If no option is selected <see langword="null"/> is returned.
            If AllowCustomTextEntry is enabled and a custom entry is entered, <see langword="null"/> 
            is returned, please use the .Value property to get the custom value.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.DropDownListField.DropDownListDefaultValue">
            <summary>
            The default value for this field
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.DropDownListField.CustomDefaultValue">
            <summary>
            The default value for this field
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.DropDownListField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.DropDownListField.getPublicValue(System.String)">
            <summary>
            Convert the passed pdf value (= on value) to the field value
            (= export value).
            </summary>
            <param name="pdfValue">A pdf (on) value.</param>
            <returns>The coresponding export value. See remarks below.</returns>
            <remarks>No matter whether we have an XFA document or a classic one,
            the field value is always the export value, and the stored value
            (the V entry) is always the "on" value.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.DropDownListField.getPdfValue(System.String)">
            <summary>
            Convert the passed field value (= export value) to the value as
            stored in the pdf file.
            </summary>
            <param name="exportValue">A field (export) value.</param>
            <returns>The coresponding pdf value. See remarks below.</returns>
            <remarks>No matter whether we have an XFA document or a classic one,
            we the field value is always the export value, and the stored value
            (the V entry) is always the "on" value.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.DropDownListField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.Field">
            <summary>
            The base class for any PDF form field. 
            </summary>
            <remarks>
            You retrieve an existing field from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Forms.Fields.Field.PropertyChanged">
            <summary>
            Occurs when any property of the field has changed.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Forms.Fields.Field.FullNameChangeRequest">
            <summary>
            Fired when this field will change it's name.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Forms.Fields.Field.FullNameChangeCommit">
            <summary>
            Fired when this field has changed it's name.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.Field.#ctor(TallComponents.PDF.Forms.Fields.Field)">
            <summary>
            Create a field, based on an existing field (used for cloning).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Field.FullName">
            <summary>
            The fully qualified name for this field.
            </summary>
            <remarks>
            <para>Setting this property will only work if it is a classic PDF document (No Xfa document). For Xfa documents
            the returned field name is determined dynamically, as there can be fields with names
            name[0]..name[n] in Xfa. Removing one or more of such fields will result in renaming
            the remaining fields. This is currently only possible by setting the widget persistency to
            Flatten or Remove.</para>
            <para>Note: Setting this property is NOT thread safe.</para>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Field.ToolTip">
            <summary>
            The name of the field as used in the user interface. 
            </summary>
            <remarks>
            May be <see langword="null"/>.
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Field.Widgets">
            <summary>
            The asociated widgets for this field.
            </summary>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Field.ReadOnly">
            <summary>
            Read-only state of this field.
            </summary>
            <remarks>
            Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Field.RequiredMode">
            <summary>
            The required mode for this field.
            </summary>
            <remarks>
            Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Field.Export">
            <summary>
            This field is included when the form is exported or submitted.
            </summary>
            <remarks>
            Default = true.
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Field.MappingName">
            <summary>
            Used when exporting data from the document.
            </summary>
            <remarks>
            If <see langword="null"/>, the FullName is used.
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Field.XfaInfo">
            <summary>
            Additional XFA specific information for this field.
            </summary>
            <remarks>
            Returns null for non-xfa / classic documents.
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.Field.firePropertyChanged(System.String)">
            <summary>
            Fire the PropertyChanged event.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.Field.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The visitor to accept.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Field.InternalDefinition">
            <summary>
            The InternalDefinition specified if the field is found in PDF objects and/or in the XFA template
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Field.XfaField">
            <summary>
            The corresponding Xfa field
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Field.PdfField">
            <summary>
            The corresponding PDF field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Field.FirstLineIndentation">
            <summary>
            First line indentation - defined in XFA template
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Field.FixedLineHeight">
            <summary>
            Fixed line height - defined in XFA template
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.ImageField">
            <summary>
            An image PDF form field. You cannot create an instance of this class.
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            <para>This field type has no meaning in classic PDF documents. </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ImageField.EmbedImageData">
            <summary>
            Specifies if the image data is embedded or if a URI is stored.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ImageField.Sizing">
            <summary>
            The mapping between the image size and the field size.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ImageField.ImageValue">
            <summary>
            The strongtyped value for this field (the setter can be used if EmbedImageData = true only)
            </summary>
            <remarks>
            The Value setter can be used when EmbedImageData = false.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ImageField.ImageDefaultValue">
            <summary>
            The default value asociated with this field. (the setter can be used if EmbedImageData = true only)
            </summary>
            <remarks>
            The DefaultPathValue setter can be used when EmbedImageData = false.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ImageField.DefaultPathValue">
            <summary>
            The default value asociated with this field. (valid if EmbedImageData = false only)
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ImageField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ImageField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.ListBoxField">
            <summary>
            A list box PDF form field.
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ListBoxField.#ctor(System.String)">
            <summary>
            Create a new List box field.
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ListBoxField.MultiSelect">
            <summary>
            More than one of the option items may be selected simultaneously. 
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ListBoxField.CommitOnSelectionChange">
            <summary>
            Controls the moment that the selected value is committed to the field.
            If true, the field value is updated at the moment that a user changes
            the selection. If false, the value is updated when the field looses
            focus.
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ListBoxField.Options">
            <summary>
            Contains all options from which a choice can be made. An option has both 
            a displayed name and an exported name, often they are the same.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ListBoxField.ListBoxValue">
            <summary>
            The strong types Value
            </summary>
            <remarks>
            If no option is selected an empty array is returned.
            <para>
            Setting multi options is supported in classic PDF documents only.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ListBoxField.ListBoxDefaultValue">
            <summary>
            The default value for this field.
            </summary>
            <remarks>
            If no default option is selected an empty array is returned.
            <para>
            Notice: Multiple selection is not supported, so at max 1 item will be returned / may be set.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ListBoxField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ListBoxField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.ListOption">
            <summary>
            A PDF form field option. 
            </summary>
            <remarks> 
            List options are returned by the Options property of the ListBoxField or DropDownListField class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ListOption.#ctor(System.String)">
            <summary>
            Creates a new List option.
            </summary>
            <param name="name">Both the ExportName and the DisplayName.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ListOption.#ctor(System.String,System.String)">
            <summary>
            Creates a new List option.
            </summary>
            <param name="exportName">Name as exported.</param>
            <param name="displayName">Name as displayed.</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ListOption.DisplayName">
            <summary>
            Name as displayed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ListOption.ToString">
            <summary>
            Returns a String that represents the current ListOption.
            </summary>
            <returns>A String that represents the current ListOption.</returns>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.NumericField">
            <summary>
            A Numeric PDF form field. You cannot create an instance of this class. 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.NumericField.Format">
            <summary>
            The data format 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.NumericField.NumericValue">
            <summary>
            The strongtyped value for this field
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.NumericField.NumericDefaultValue">
            <summary>
            The default value asociated with this field.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.NumericField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.NumericField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.Option">
            <summary>
            A PDF form field option. This base class is used for both ListOption and RadioButtonOption.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Option.ExportName">
            <summary>
            Name as exported. (assign this string to the field's  Value) 
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.PasswordField">
            <summary>
            A Password PDF form field.
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.PasswordField.#ctor(System.String)">
            <summary>
            Create a new password field.
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.PasswordField.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new password field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PasswordField.DisplayCharacter">
            <summary>
            The Character (or string) used to hide the password
            </summary>
            <remarks>
            Classic PDF document used '*' by default and setting this property has no effect.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PasswordField.MaxLength">
            <summary>
            The maximum characters that may be entered into this password field.
            </summary>
            <remarks>
            -1 means not restricted.
            <para>
            Setting this property is supported in classic PDF documents only.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.PasswordField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PasswordField.FormattedValue">
            <summary>
            The Formatted Value. 
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.PdfField">
            <summary>
            A PDF form field. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.PdfField.#ctor(TallComponents.PDF.Base.Forms.TerminalField,System.String)">
            <summary>
            Create a new PdfField
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.PdfField.#ctor(TallComponents.PDF.Base.DocumentStructure.Document,TallComponents.PDF.Base.Forms.TerminalField,System.String)">
            <summary>
            Create an existing PdfField
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.FullName">
            <summary>
            Fully qualified name of this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.PartialName">
            <summary>
            Partial name of this field.
            </summary>
            <remarks>
            The partial name is the right part after the last dot (.) if any of the fully qualified name, otherwise the full name.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.AlternativeName">
            <summary>
            The name of the field as used in the user interface.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.MappingName">
            <summary>
            Used when exporting data from the document.
            </summary>
            <remarks>
            If <see langword="null"/>, the FullName is used.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.PdfWidgets">
            <summary>
            Contains all widgets from this field. An widget is the visual representation from this field.
            One field can have multiple representations placed on the same or different pages.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.Options">
            <summary>
            Contains all options from which a choice can be made. An option has both 
            a displayed name and an exported name, often they are the same.
            Only meaningful if type is ListBox, ComboBox, Checkbox or RadioButton.
            Assign the Name property of an option to the Value property of this field to select a state.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.FieldType">
            <summary>
            Type of field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.Value">
            <summary>
            The current or new value of this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.DefaultValue">
            <summary>
            The current or new default value of this field.
            </summary>
            <remarks>
            Note that rich-text field should be formatted without formatting.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.Values">
            <summary>
            The current or new values of this field.
            (meaningful only for list box, with MultiSelect enabled).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.ReadOnly">
            <summary>
            Read-only state of this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.Required">
            <summary>
            Field is required.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.NoExport">
            <summary>
            This field is not included when the form is submitted.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.DoNotSpellCheck">
            <summary>
            This field is not spell checked.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.Multiline">
            <summary>
            Text is multiline (meaningful only for text box).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.DoNotScroll">
            <summary>
            Long text must not be scrolled (meaningful only for text box).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.RichText">
            <summary>
            Text is rich text (meaningful only for text box).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.Password">
            <summary>
            Text represents a password (meaningful only for text box).
            If set, input is echoed as special characters such as asterisks or bullets.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.EditableCombo">
            <summary>
            A new text can be entered in the combo box.
            (meaningful only for combo box).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.MultiSelect">
            <summary>
            More than one of the option items may be selected simultaneously
            (meaningful only for list box).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.CommitOnSelChange">
            <summary>
            The field value gets committed when the selection changes
            (meaningful only for list boxes and combo boxes)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.Comb">
            <summary>
            Meaningful only if the MaxLength entry is present in the text field
            If set, the field is automatically divided into as many equally
            spaced positions, or combs, as the value of MaxLen, and the text is laid out
            into those combs.
            </summary>
            <remarks>
            Applicable for text-field only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.PdfField.MaxLength">
            <summary>
            The maximum length of the field's text, in characters (meaningful only for text box).
            </summary>
            <remarks>
            Returns -1 for unlimited (not specified).
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.RadioButtonField">
            <summary>
            A radio button PDF form field. 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonField.#ctor(System.String)">
            <summary>
            Create a new Radio Button field.
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonField.Options">
            <summary>
            Contains all options from which a choice can be made. An option has both 
            an exported name and a reference to the associated widget.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonField.RadioButtonValue">
            <summary>
            The value for this field.
            </summary>
            <remarks>
            Returns <see langword="null"/> if no Option is selected.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonField.RadioButtonDefaultValue">
            <summary>
            The default value for this field.
            </summary>
            <remarks>
            Returns <see langword="null"/> if no Option is selected.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonField.getPublicValue(System.String)">
            <summary>
            Convert the passed pdf value (= on value) to the field value
            (= export value).
            </summary>
            <param name="pdfValue">A pdf (on) value.</param>
            <returns>The coresponding export value. See remarks below.</returns>
            <remarks>No matter whether we have an XFA document or a classic one,
            the field value is always the export value, and the stored value
            (the V entry) is always the "on" value.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonField.getPdfValue(System.String)">
            <summary>
            Convert the passed field value (= export value) to the value as
            stored in the pdf file.
            </summary>
            <param name="exportValue">A field (export) value.</param>
            <returns>The coresponding pdf value. See remarks below.</returns>
            <remarks>No matter whether we have an XFA document or a classic one,
            we the field value is always the export value, and the stored value
            (the V entry) is always the "on" value.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonField.CanBeDeselected">
            <summary>
            Whether this field can be deselected. (like the CheckBox field)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonField.AppearanceProviderValue">
            <summary>
            This property will be used if a AppearanceProvide draws it's visuals.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.RadioButtonOption">
            <summary>
            A PDF form field option. 
            Radio button options are returned by the Options property of the RadioButtonField class.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonOption.ExportName">
            <summary>
            Name as exported. (assign this string to the field's  Value) 
            </summary>
            <remarks>
            Setting this value is supported for classic document only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.RadioButtonOption.Widget">
            <summary>
            The associated radio button widget for this option.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.RadioButtonOption.ToString">
            <summary>
            Returns a System.String that represents the current RadioButtonOption.
            </summary>
            <returns>A System.String that represents the current RadioButtonOption.</returns>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.RequiredMode">
            <summary>
            The required mode for a field.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.RequiredMode.Optional">
            <summary>
            This field is optional.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.RequiredMode.Recommended">
            <summary>
            This field is recommended. Note: This setting cannot be used in classic PDF documents.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.RequiredMode.Required">
            <summary>
            This field is required.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.LockAction">
            <summary>
            Indicates the set of fields that should be locked.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.LockAction.All">
            <summary>
            All fields in the document
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.LockAction.Include">
            <summary>
            All fields specified in the FieldNames array
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.LockAction.Exclude">
            <summary>
            All fields except those specified in the FieldNames array
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.LockPermission">
            <summary>
            Indicates the access permissions granted for this document.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.LockPermission.P1">
            <summary>
            No changes to the document are permitted; any change to the document invalidates the signature.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.LockPermission.P2">
            <summary>
            Permitted changes are filling in forms, instantiating page templates, and signing; other changes invalidate the signature.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Forms.Fields.LockPermission.P3">
            <summary>
            Permitted changes are the same as for 2, as well as annotation creation, deletion, and modification; other changes invalidate the signature.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.Lock">
            <summary>
            Specifies a set of form fields to be locked when this signature field is signed
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.Lock.#ctor">
            <summary>
            Creates a default instance of the Lock object
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Lock.Action">
            <summary>
            Indicates the set of fields that should be locked.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Lock.Permission">
            <summary>
            The access permissions granted for this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.Lock.FieldNames">
            <summary>
            A set of field names in accordance with the Action field
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.SignatureField">
            <summary>
            A signature PDF form field. 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.SignatureField.#ctor(System.String)">
            <summary>
            Create a new Signature field.
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="E:TallComponents.PDF.Forms.Fields.SignatureField.SignatureChanged">
            <summary>
            Fired after the signature has changed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.SignatureHandler">
            <summary>
            The Signature handler which sign this field.
            </summary>
            <remarks>
            If <see langword="null"/> the signature field will be added for further prossessing.
            You may specify one field with a signature handler only (will be checked at write-time). 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.Location">
            <summary>
            The CPU host name or physical location of signing. 
            </summary>
            <remarks>
            Will be updated in the document if a SignatureHandler is specified only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.Reason">
            <summary>
            The reason for the signing, such as 'I Agree...'.
            </summary>
            <remarks>
            Will be updated in the document if a SignatureHandler is specified only.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.ContactInfo">
             <summary>
             Information provided by the signer to enable a recipient to contact the signer to verify the signature;
             for example, a phone number.
             </summary>
             <remarks>
            Will be updated in the document if a SignatureHandler is specified only.
             </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.IsSigned">
            <summary>
            Returns if this field has a signature attached. The signature can be valid or not.
            </summary>
            <remarks>
            This boolean checks if it's an empty signarure field or not.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.SignedUpdate">
            <summary>
            The update in which this signature field is signed.
            </summary>
            <remarks>
            This property will only return a value if <see cref="P:TallComponents.PDF.Forms.Fields.SignatureField.IsSigned"/> is true. If not, <see langword="null"/> is returned.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.Certificates">
            <summary>
            The signing certificate and its chain certificates.
            </summary>
            <remarks>
            This property will only return a value if <see cref="P:TallComponents.PDF.Forms.Fields.SignatureField.IsSigned"/> is true. If not, <see langword="null"/> is returned.
            </remarks>
            <exception cref="T:TallComponents.PDF.PdfException">Thrown if an invalid signature field is encountered.</exception>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.SignatureField.Clear">
            <summary>
            Clear the signature for this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.DocumentModifiedAfterSigning">
            <summary>
            Returns if the document is modified after the signature was added, meaning that an update is append to this document.
            </summary>
            <remarks>
            The signature can be valid or not. Some updates are actually allowed, there should be a semantic check as well
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.SignedDate">
            <summary>
            The date the signature is applied to the document.
            </summary>
            <remarks>
            Returns DateTime.MinValue if the date is unknown (e.g. <see cref="P:TallComponents.PDF.Forms.Fields.SignatureField.IsSigned"/> is false, or no date is available).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.SignatureField.SignedName">
            <summary>
            The name which signed this document.
            </summary>
            <remarks>
            This property will only return a value if <see cref="P:TallComponents.PDF.Forms.Fields.SignatureField.IsSigned"/> is true. If not, <see langword="null"/> is returned.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.SignatureField.Verify">
            <summary>
            Checks if the Signature field is valid (verified), based on a standard signature handler.
            </summary>
            <returns>
            Returns if this signature field is valid or not, with the default signature handler factory.
            </returns>
            <remarks>
            False is returned if the signature is not signed.
            Note that the document can be modified after signing, meaning that an update is append to this document.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.SignatureField.Verify(TallComponents.PDF.DigitalSignatures.ISignatureHandlerFactory)">
            <summary>
            Checks if the Signature field is valid (verified), based on the supplied factory.
            </summary>
            <param name="handlerFactory">The factory used to retrieve the correct signature handler.</param>
            <returns>
            Returns if this signature field is valid or not.
            </returns>
            <remarks>
            False is returned if the signature is not signed.
            Note that the document can be modified after signing, meaning that an update is append to this document.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.SignatureField.Verify(TallComponents.PDF.DigitalSignatures.SignatureHandler)">
            <summary>
            Checks if the Signature field is valid.
            </summary>
            <param name="signatureHandler">The signature handler used to verify the signature.</param>
            <returns>
            Returns if this signature field is valid or not.
            </returns>
            <remarks>
            False is returned if the signature is not signed.
            Note that the document can be modified after signing, meaning that an update is append to this document.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.SignatureField.getCertificatesFromSignature(TallComponents.PDF.Base.DigitalSignatures.Signature)">
            <summary>
            Ectracts certificates from the Cert property of a signature dictionary.
            </summary>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.SignatureField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.TextField">
            <summary>
            A text PDF form field. 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.TextField.#ctor(System.String)">
            <summary>
            Create a new Text field.
            </summary>
            <param name="fullName">The fully qualified name for this field.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.TextField.#ctor(TallComponents.PDF.Forms.Fields.ValueField)">
            <summary>
            Create a field, based on an existing field (used for cloning).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.TextField.defaultValue">
            <summary>
            The default value asociated with this field.
            </summary>
            <remarks>
            In classic PDF documents rich text fields will store the default value as 
            non rich text. You should however set and get rich-text strings.
            One exception is that the empty string will be returned and excepted as well.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.TextField.RichText">
            <summary>
            Specifies whether the text may include styling (also known as rich text)
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.TextField.Multiline">
            <summary>
            Specifies whether the text span multiple lines
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.TextField.DoNotScroll">
            <summary>
            Specifies whether long text must be scrolled.
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.TextField.SpellCheckAllowed">
            <summary>
            Specifies whether spell-checking is allowed on this field.
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only. Please note that
            setting this value to true will not cause the text to be spell-checked. It just marks
            the field as eligible for spell-checking.
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.TextField.Comb">
            <summary>
            If set, the field is automatically divided into as many equally
            spaced positions, or combs, as the value of MaxLength, and the text is laid out
            into those combs.
            </summary>
            <remarks>
            This property is meaningful only if MaxLength != -1 (meaning not resticted).
            <para>
            Setting this property is supported in classic PDF documents only.
            </para>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.TextField.FileSelect">
            <summary>
            Specifies whether this text field is used to enter a pathname of a file.
            </summary>
            <remarks>
            Setting this property is supported in classic PDF documents only.
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.TextField.MaxLength">
            <summary>
            The maximum characters that may be entered into this text field.
            </summary>
            <remarks>
            -1 means not restricted.
            <para>
            Setting this property is supported in classic PDF documents only.
            </para>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.TextField.FormattedValue">
            <summary>
            The Formatted Value. 
            </summary>
            <remarks>
            for XFA documents the Picture-Clause will be executed.
            For classic document the FormatAction (JavaScript code) is executed (depending on document.ScriptBehavior setting).
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.TextField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.TextField.XfaDefaultValue">
            <summary>
            The default value found in XFA.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.UnknownField">
            <summary>
            An unknown PDF form field. You cannot create an instance of this class. 
            </summary>
            <remarks>
            You retrieve the existing fields from the Fields property of the Document class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.UnknownField.Accept(TallComponents.PDF.Forms.Fields.FieldVisitor,System.Object)">
            <summary>
            Accept this field.
            </summary>
            <param name="visitor">The vistor used to Accept this field.</param>
            <param name="argument">An additional argument passed to the Visit method (may be <see langword="null"/>).</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.ValidateValueEventArgs">
            <summary>
            Class containing data for the ValidateValue event
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValidateValueEventArgs.Value">
            <summary>
            The value that needs to be updated in the validation process.
            </summary>
            <remarks>
            This value can be updated to reflect the validate operation.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValidateValueEventArgs.Cancel">
            <summary>
            A boolean to specify that the validation process must cancel the update value action.
            </summary>
            <remarks>
            Default = false.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValidateValueEventArgs.FieldValue">
            <summary>
            The value as stored in the PDF field. By default, this is the same as the
            value of the event. For comboboxes however, the event value is the display
            value, while the field stores the corresponding export value.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValidateValueEventArgs.Change">
            <summary>
            The "change" value. This indicates in what way the value was changed. This is used
            internally, to set the change property of the validate event.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValidateValueEventArgs.ChangeEx">
            <summary>
            The export value that corresponds to the change value, if any. Null if the value
            has no export value. This value is used internally to initialise the changeEx event
            field.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.ValueChangedEventArgs">
            <summary>
            Class containing data for the ValueChanged event.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueChangedEventArgs.Value">
            <summary>
            The new Value.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.ValueField">
            <summary>
            A PDF form field with a Value. 
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Forms.Fields.ValueField.CalculateActionChanged">
            <summary>
            Event fired after a calculate action has been changed.
            </summary>
            <remarks>
            Fired when the CalculateAction setter is called only.
            <para>
            Not fired when the CalculateAction internally is changed (new javascript is assigned).
            </para>
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.Forms.Fields.ValueField.ValueChanged">
            <summary>
            Event fired after a value is succesful updated.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Forms.Fields.ValueField.FormatValue">
            <summary>
            Event fired to format the field's value.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Forms.Fields.ValueField.ValidateValue">
            <summary>
            Event fired to validate any new value.
            </summary>
            <remarks>
            You can both update the value or cancel the complete update.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ValueField.#ctor(TallComponents.PDF.Forms.Fields.ValueField)">
            <summary>
            Create a field, based on an existing field (used for cloning).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueField.Value">
            <summary>
            The value associated with this field.
            </summary>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueField.DefaultValue">
            <summary>
            The default value associated with this field.
            </summary>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueField.FormattedValue">
            <summary>
            The Formatted Value. 
            </summary>
            <remarks>
            for XFA documents the Picture-Clause will be executed.
            For classic document the FormatAction (JavaScript code) is executed (depending on document.ScriptBehavior setting).
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueField.rawValueNoDefault">
            <summary>
            The value of this field. If it's null, it's not replaced by DefaultValue as it's done in rawValue.
            </summary>
            <remarks>This property is required in dynamic XFA's JavaScript calculations (if the field has no value, it should return null instead of the DefaultValue.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueField.rawValue">
            <summary>
            The value of this field (actually, this is the same as "Value").
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueField.pdfValue">
            <summary>
            The value as we store it in the pdf field. For XFA documents this is the export value. For
            classic documents this is the "on" value.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ValueField.ResetValue">
            <summary>
            Reset the value to the default value.
            </summary>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueField.FormatAction">
            <summary>
            The action that will be executed before a field is displayed.
            </summary>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueField.ValidateAction">
            <summary>
            An action that will be executed for field value validation (when setting the value).
            </summary>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueField.KeyStrokeAction">
            <summary>
            An action that will be executed when a user types a key-stoke (or an other item is selected from a list).
            </summary>
            <remarks>
            This property has no meaning for CheckBoxField, RadioButtonField and XFA specific field types. 
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueField.CalculateAction">
            <summary>
            An action executed the reflect changes in other field value changes. 
            </summary>
            <remarks>
            <para>Can throw an ObjectDisposedException if the field was removed from the field collection (dynamic XFA).</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ValueField.getPublicValue(System.String)">
            <summary>
            Returns the public field value for a pdf value.
            </summary>
            <param name="pdfValue">The pdf value.</param>
            <returns>The corresponding field value.</returns>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.ValueField.getPdfValue(System.String)">
            <summary>
            Returns the pdf value from a field value.
            </summary>
            <param name="value">the field value.</param>
            <returns>The corresponding pdf value.</returns>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.ValueField.ReadOnlyValue">
            <summary>
            This value will prevent this field value from being updated.
            </summary>
            <remarks>This is not the the same as the PDF readonly flag of the field, which
            only prevents users from changing the field. The ReadOnlyValue flag is used to
            avoid stack overflows when javascript validation/keystroke handlers are attempting
            to update a field directly.</remarks>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.XfaField">
            <summary>
            XfaField is an abstraction for handling the XFA fields
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaField.Name">
            <summary>
            The partial name for this field (excluding Index)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaField.FullName">
            <summary>
            The full name for this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaField.FieldType">
            <summary>
            The XFA field type
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaField.Value">
            <summary>
            The value found in XFA. (current/actual)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaField.XfaSubFieldCount">
            <summary>
            For internal usage ONLY
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.XfaHelper">
            <summary>
            XfaHelper is for debugging purposes ONLY, this class will be removed in the final build.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaHelper.HasXfa">
            <summary>
            Boolean which specifies if this PDF document contains XFA.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaHelper.IsDynamicDocument">
            <summary>
            Boolean which specifies if this PDF document is a Dynamic document (otherwise it's static)
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Fields.XfaSubField">
            <summary>
            XfaSubField is an abstraction for handling the XFA field 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaSubField.Name">
            <summary>
            The partial name for this field, as described in XFA (excluding Index).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaSubField.PartialName">
            <summary>
            The partial name for this field as described in PDF (including Index).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaSubField.Index">
            <summary>
            The field index, if not used -1 is returned.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaSubField.FullName">
            <summary>
            The full name for this field as described in PDF. This includes the index of the field in case
            there are multiple with the same name.
            </summary>
            <remarks>
            The full name is recalculated everytime. 
            This makes sure that deleted items are not taken into account for the name 
            (indexes are automatically updated in the full name) 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaSubField.DataSomExpression">
            <summary>
            The data som expression for this field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaSubField.FieldType">
            <summary>
            The XFA field type
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaSubField.BarcodeType">
            <summary>
            The type of barcode (only valid if FieldType is Barcode).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaSubField.BarcodeTypeString">
            <summary>
            The type of barcode (only valid if FieldType is Barcode).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaSubField.Barcode">
            <summary>
            The barcode class (only valid if FieldType is Barcode).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaSubField.Value">
            <summary>
            The value found in XFA. (current/actual)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaSubField.Left">
            <summary>
            The X value  found in XFA.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaSubField.Top">
            <summary>
            The Y value  found in XFA.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Fields.XfaSubField.InvalidateNameCaches">
            <summary>
            Invalidates the cached full name and DataSomExpression.
            </summary>
            <remarks>Both values depend on the position of the element in the underlying XML data. It is expensive to compute them, hence the
            cached. If however the XML data changes structurally, these cached will need to be invalidated. This is currently only needed during/after
            field flattening, as there is no other way to remove Xfa fields. Note that we do not support adding new Xfa fields.</remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Fields.XfaSubField.BindedDataNode">
            <summary>
            In XFA, when field's Bind.Match="dataref", this index says which instance of data nodes is bound to the field.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Data.XfdfFormData">
            <summary>
            Specialization of FormData that represents Xfdf data.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.XfdfFormData.#ctor">
            <summary>
            Create a new XfdfFormData object.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.XfdfFormData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serializing purposes only.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.XfdfFormData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serializing purposes only.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.XfdfFormData.#ctor(System.IO.Stream)">
            <summary>
            Create a XfdfFormData object, based on existing data.
            </summary>
            <param name="stream">The stream to use.</param>
            <remarks>
            The caller is responsible for closing the
            stream. The stream should be kept open during the lifetime of the returned XfdfFormData instance.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.XfdfFormData.#ctor(System.Xml.XmlDocument)">
            <summary>
            Create a XfdfFormData based on an existing XmlDocument.
            </summary>
            <param name="xml">The XML document to read.</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.XfdfFormData.Path">
            <summary>
            The path from the PDF document file that this XFDF file was exported 
            from or is intended to be imported into.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.XfdfFormData.Write(System.IO.BinaryWriter)">
            <summary>
            Write this XFDF FormData.
            </summary>
            <param name="binaryWriter">The binary writer to write to.</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Data.FdfFormData">
            <summary>
            Specialization of FormData that represents a FDF document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.FdfFormData.#ctor">
            <summary>
            Create a new FdfFormData object.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.FdfFormData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serializing purposes only.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.FdfFormData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serializing purposes only.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.FdfFormData.#ctor(System.IO.Stream)">
            <summary>
            Create a FdfFormData object, based on existing data.
            </summary>
            <param name="stream">The stream to use.</param>
            <remarks>
            The caller is responsible for closing the
            stream. The stream should be kept open during the lifetime of the returned FdfFormData instance.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.FdfFormData.#ctor(System.Byte[])">
            <summary>
            Create a FdfFormData object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.FdfFormData.Path">
            <summary>
            The path from the PDF document file that this FDF file was exported 
            from or is intended to be imported into.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.FdfFormData.Write(System.IO.BinaryWriter)">
            <summary>
            Write this FDF document.
            </summary>
            <param name="binaryWriter">The binary writer to write to.</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.FdfFormData.document">
            <summary>
            The FDF document.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Data.FormData">
            <summary>
            FormData is a abstract base class. 
            FormData exposes the [submitted] form data polymorphically as a name/value pair collection.
            The 6 supported data formats (FDF, XFDF, XDP, XML, HTTP and PDF) are implemented as derived classes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.FormData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serializing purposes only.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.FormData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serializing purposes only.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.FormData.Create(System.Web.HttpRequest)">
            <summary>
            Returns a specialized instance of one of the 6 derived FormData classes or <see langword="null"/> if the HttpRequest does not contain 
            valid data.
            </summary>
            <param name="request">A HttpRequest with returned data (in FDF, XFDF, XDP, XML, HTTP or PDF format)</param>
            <returns>
            Returns a specialized instance of one of the 6 derived FormData classes or <see langword="null"/> if the HttpRequest does not contain 
            valid data.
            </returns>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.FormData.Create(System.IO.Stream)">
            <summary>
            Returns a specialized instance of one of the derived FormData classes or <see langword="null"/> if the stream does not contain 
            valid data.
            </summary>
            <param name="stream">A stream with data (in FDF, XFDF, XDP, XML or PDF format)</param>
            <remarks>
            This function will never return a HttpPostFormData instance. The caller is responsible for closing the
            stream. The stream should be kept open during the lifetime of the returned FormData instance.
            </remarks>
            <returns>
            Returns a specialized instance of one of the derived FormData classes or <see langword="null"/> if the stream does not contain 
            valid data.
            </returns>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.FormData.Create(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Returns a specialized instance of one of the derived FormData classes or <see langword="null"/> if the stream does not contain 
            valid data.
            </summary>
            <param name="stream">A stream with data (in FDF, XFDF, XDP, XML or PDF format)</param>
            <param name="encoding">The encoding for the stream (used to create XML from the stream)</param>
            <remarks>
            This function will never return a HttpPostFormData instance. The caller is responsible for closing the
            stream. The stream should be kept open during the lifetime of the returned FormData instance.
            </remarks>
            <returns>
            Returns a specialized instance of one of the derived FormData classes or <see langword="null"/> if the stream does not contain 
            valid data.
            </returns>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.FormData.FullNames">
            <summary>
            Returns a string array with fullnames
            </summary>
            <remarks>
            Note that it is not possible to reconstruct the complete fullname under all conditions, e.g. for XML the local node names are used to reconstruct the names.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.FormData.Item(System.String)">
            <summary>
            Returns the data for this full qualified field name
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.FormData.Write(System.IO.Stream)">
            <summary>
            Write this FormData to the given stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.FormData.Write(System.IO.BinaryWriter)">
            <summary>
            Write this FormData to the given binary writer.
            </summary>
            <param name="binaryWriter">The binary writer to write to.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.FormData.Add(System.String,System.String)">
            <summary>
            Add field values into the base collection.
            </summary>
            <param name="fullName">The full qualified field name.</param>
            <param name="value">The data value for the field.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.FormData.Add(TallComponents.PDF.Forms.Fields.Field)">
            <summary>
            Add field values.
            </summary>
            <param name="field">The field to add.</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Data.HttpPostFormData">
            <summary>
            Specialization of SubmittedData that represents a Http post data set.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.HttpPostFormData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serializing purposes only.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.HttpPostFormData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serializing purposes only.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.HttpPostFormData.Write(System.IO.BinaryWriter)">
            <summary>
            Writing HttpPostFormData is not supported.
            </summary>
            <param name="binaryWriter">The binary writer to write to.</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Data.ImportDataException">
            <summary>
            ImportDataException is raised when one or more exeptions are raised when importing data.
            </summary>
            <remarks>
            This exception hold an array of inner exeptions.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.ImportDataException.InnerExceptions">
            <summary>
            The actual exceptions that are thrown.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.ImportDataException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.ImportDataException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>Returns a string representation of the current exception.</returns>
        </member>
        <member name="T:TallComponents.PDF.Forms.Data.PdfFormData">
            <summary>
            Specialization of FormData that represents a full PDF document.
            </summary>
            <remarks>
            Note that if the document is signed on the client, this information is available when imported in the document.
            If the FormData is used in Document.Import(), the signature information is lost.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.PdfFormData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serializing purposes only.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.PdfFormData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serializing purposes only.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.PdfFormData.Write(System.IO.BinaryWriter)">
            <summary>
            Write this PDF document.
            </summary>
            <param name="binaryWriter">The binary writer to write to.</param>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.PdfFormData.document">
            <summary>
            The complete PDF document as submitted by the client.
            </summary>
            <remarks>
            Note that if the document is signed on the client, this information is available in the document.
            If the FormData is used in Document.Import(), the signature information is lost.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Forms.Data.XdpFormData">
            <summary>
            Specialization of FormData that represents Xdp data.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.XdpFormData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serializing purposes only.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.XdpFormData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serializing purposes only.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.XdpFormData.#ctor(System.IO.Stream)">
            <summary>
            Create a XdpFormData object, based on existing data.
            </summary>
            <param name="stream">The stream to use.</param>
            <remarks>
            The caller is responsible for closing the
            stream. The stream should be kept open during the lifetime of the returned XdpFormData instance.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.XdpFormData.Item(System.String)">
            <summary>
            Returns the data for this name
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.XdpFormData.Path">
            <summary>
            The path from the PDF document file that this XDP file was exported 
            from or is intended to be imported into.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.XdpFormData.Write(System.IO.BinaryWriter)">
            <summary>
            Write this XDP FormData.
            </summary>
            <param name="binaryWriter">The binary writer to write to.</param>
        </member>
        <member name="T:TallComponents.PDF.Forms.Data.Xfdf.Object">
            <summary>
            XFDF base class
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Data.Xfdf.Document">
            <summary>
            XFDF document
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.Xfdf.Document.#ctor">
            <summary>
            Create a new document
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.Xfdf.Document.Create">
            <summary>
            Create a new XFDF document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.Xfdf.Document.#ctor(System.Xml.XmlDocument)">
            <summary>
            Wrap this document around the given (loaded) xml document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.Xfdf.Document.XmlDocument">
            <summary>
            Gets the internal XML document
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.Xfdf.Document.F">
            <summary>
            Gets / Sets the F (file) element
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.Xfdf.Document.Fields">
            <summary>
            Gets the fields
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.Xfdf.Document.SelectF(System.Boolean)">
            <summary>
            Select the F element
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Data.Xfdf.Element">
            <summary>
            XFDF element base class
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.Xfdf.Element.#ctor(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.Xfdf.Element.Document">
            <summary>
            Gets the xml document
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.Xfdf.Element.NsMgr">
            <summary>
            Gets the namespace manager
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Data.Xfdf.Field">
            <summary>
            XFDF field information
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.Xfdf.Field.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.Xfdf.Field.Name">
            <summary>
            The name of the field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.Xfdf.Field.Value">
            <summary>
            The value of the field.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.Xfdf.Field.IsRichText">
            <summary>
            Whether the value of the field is rich text or not.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Data.Xfdf.Fields">
            <summary>
            XFDF fields information
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.Xfdf.Fields.#ctor(System.Xml.XmlDocument,System.Xml.XmlNamespaceManager)">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.Xfdf.Fields.Add(TallComponents.PDF.Forms.Data.Xfdf.Field)">
            <summary>
            Add the given field.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.Xfdf.Fields.GetFields">
            <summary>
            Get all fields.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.Xfdf.Fields.SelectFields(System.Boolean)">
            <summary>
            Gets the fields element
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.Xfdf.Fields.selectField(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Gets the fields element
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Forms.Data.XmlFormData">
            <summary>
            Specialization of FormData that represents Xml data.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.XmlFormData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serializing purposes only.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.XmlFormData.#ctor(System.Xml.XmlDocument)">
            <summary>
            Create a XmlFormData based on an existing XmlDocument.
            </summary>
            <param name="xml">The XML document to read.</param>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.XmlFormData.#ctor(System.IO.Stream)">
            <summary>
            Create a XmlFormData object, based on existing data.
            </summary>
            <param name="stream">The stream to use.</param>
            <remarks>
            The caller is responsible for closing the
            stream. The stream should be kept open during the lifetime of the returned FormData instance.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Forms.Data.XmlFormData.Item(System.String)">
            <summary>
            Returns the data for this name
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Forms.Data.XmlFormData.Write(System.IO.BinaryWriter)">
            <summary>
            Write this XML FormData.
            </summary>
            <param name="binaryWriter">The binary writer to write to.</param>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.AcrobatDom.XFAJSNode.index">
            <summary>
            Returns the position of this node in its collection of like-named, in-scope nodes.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.AcrobatDom.Global.InitializeProxy">
            <summary>
            Forces the proxy to be loaded again.
            </summary>
            <remarks>This is needed in case the default proxy already got loaded before
            the correct javascript factory was set.</remarks>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.AcrobatDom.Icon">
            <summary>
            Represents a javascript Icon object.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.AcrobatDom.NonTerminalField.Dispose">
            <summary>
            Clean up all resources, e.g un-subsribe events.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.AcrobatDom.NonTerminalField.getArray">
            <summary>
            getArray returns all fields in an array.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.AcrobatDom.DisplayValue">
            <summary>
            The values that field.display may return.
            </summary>
            <remarks>The integers below are not defined in the JavaScript spec, but have been
            determined by looking at the values that Acrobat 8 returns.</remarks>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.AcrobatDom.DisplayValue.Visible">
            <summary>
            Visible on screen and in print.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.AcrobatDom.DisplayValue.Hidden">
            <summary>
            Hidden on screen and in print.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.AcrobatDom.DisplayValue.NoPrint">
            <summary>
            Visible on screen but does not print.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.AcrobatDom.DisplayValue.NoView">
            <summary>
            Hidden on screen, but prints.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.AcrobatDom.Doc.Dispose">
            <summary>
            Clean up all resources, e.g un-subsribe events.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.AcrobatDom.Doc.addField(TallComponents.JavaScript.Type,TallComponents.JavaScript.Type,TallComponents.JavaScript.Type,TallComponents.JavaScript.Type)">
            <summary>
            Create a new javaScript field and an associated widget.
            </summary>
            <param name="cName">The name of the field.</param>
            <param name="cFieldType">The type of the field.</param>
            <param name="nPageNum">The page index at which the widget will be created.</param>
            <param name="oCoords">The location of field on the page.</param>
            <returns>The new field, or null if it could not be created.</returns>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.AcrobatDom.Doc.getField(TallComponents.JavaScript.Type)">
            <summary>
            Return a javaScript field with a particular name.
            </summary>
            <param name="cName">The name of the field.</param>
            <returns>The field.</returns>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.AcrobatDom.Doc.gotoNamedDest(TallComponents.JavaScript.Type)">
            <summary>
            Go to a named destination.
            </summary>
            <param name="cName">The name of the destination.</param>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.AcrobatDom.Doc.removeField(TallComponents.JavaScript.Type)">
            <summary>
            Create a new javaScript field and an associated widget.
            </summary>
            <param name="cName">The name of the field.</param>
            <returns>The new field, or null if it could not be created.</returns>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.AcrobatDom.Doc.CreateEvent(TallComponents.PDF.JavaScript.AcrobatDom.Event.EventReason,TallComponents.PDF.JavaScript.AcrobatDom.Event.EventType,TallComponents.PDF.JavaScript.AcrobatDom.Field,TallComponents.PDF.JavaScript.AcrobatDom.Field,TallComponents.PDF.JavaScript.AcrobatDom.IValueProvider)">
            <summary>
            Creates a new event with the given properties.
            </summary>
            <param name="reason"></param>
            <param name="type"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="valueProvider"></param>
            <returns>The new event.</returns>
            <remarks>If the global object has an event, we use event.CreateEvent() so that the event
            "context" is maintained. If it has no event, we just call the Event constructor.</remarks>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.AcrobatDom.Doc.EventObject">
            <summary>
            The event object. Should not be null during execution.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.AcrobatDom.Event">
            <summary>
            The event that caused the javascript to execute.
            </summary>
            <remarks>In addition to the fields that the Acrobat javascript reference defines, this
            class also holds some implementation-specific properties. Basically, the event object is
            the link to the context that the javascript code runs in for as far as this has not
            been covered by predefined objects that users can override like console, app, doc etc.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.AcrobatDom.Event.#ctor(TallComponents.JavaScript.GlobalObject,TallComponents.PDF.JavaScript.AcrobatDom.Event.EventReason,TallComponents.PDF.JavaScript.AcrobatDom.Event.EventType,TallComponents.JavaScript.Object,TallComponents.JavaScript.Object,TallComponents.PDF.JavaScript.AcrobatDom.IValueProvider)">
            <summary>
            Creates a new javascript event.
            </summary>
            <param name="global"></param>
            <param name="name"></param>
            <param name="type"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="valueProvider">If the target is a field: its value provider.</param>
            <remarks>
            <para>The value provider for fields is needed as an intermediate between the actual field value
            and the value that is being processed by the script. It makes sure that the GUI sees the value
            change when the script modifies it, without actually changing the field value (as the value
            usually has not been comitted yet at that point).</para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.AcrobatDom.Event.PageNum">
            <summary>
            Override this method to provide a PageNum implementation.
            </summary>
            <remarks>By default, the javascript dom does not know about viewers and
            page numbers. It maps doc.pageNum onto this event property so that implementations
            can be provided via a custom event instance.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.AcrobatDom.Event.CreateEvent(TallComponents.PDF.JavaScript.AcrobatDom.Event.EventReason,TallComponents.PDF.JavaScript.AcrobatDom.Event.EventType,TallComponents.PDF.JavaScript.AcrobatDom.Field,TallComponents.PDF.JavaScript.AcrobatDom.Field,TallComponents.PDF.JavaScript.AcrobatDom.IValueProvider)">
            <summary>
            Custom events should override this class to create instances of itself.
            </summary>
            <param name="reason"></param>
            <param name="type"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="valueProvider"></param>
            <returns></returns>
            <remarks>
            <para>Some javascript events (calculate, validate and format) get generated implicitly.
            Creation of these event is mapped onto the CreateEvent method of the existing event.
            So if the event incorporated some custom context, it it maintained.</para>
            <para>BTW: at this moment this is just precaution. The calculate, validate and
            format events are currently not generated from an existing javascript context.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.AcrobatDom.Field.Dispose">
            <summary>
            Clean up all resources, e.g un-subsribe events.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.AcrobatDom.Field.borderColor">
            <summary>
            Deprecated, present for backward compatibility with older PDF files.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.AcrobatDom.Field.borderWidth">
            <summary>
            Deprecated, present for backward compatibility with older PDF files. 
            Use lineWidth instead.
            </summary>
            <remarks>Strangely, lineWidth is actually a worse name for this.</remarks>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.AcrobatDom.SoapService">
            <summary>
            This is the object as returned by SOAP.connect
            </summary>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.AcrobatDom.Util.ConversionSpecification">
            <summary>
            Represents a parsed conversion specification.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.AcrobatDom.Util.ConversionSpecification.#ctor(System.String)">
            <summary>
            Parses a conversion specification.
            </summary>
            <param name="conversionSpec">The conversion specification between the % and
            and the format specifier. Format: "[,nDecSep][cFlags][nWidth][.nPrecision]
            </param>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.Scripting.MenuItem">
            <summary>
            Represents a javascript MenuItem object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.MenuItem.Name">
            <summary>
            The name of the menu item.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.MenuItem.Marked">
            <summary>
            Whether the item is to be marked with a check.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.MenuItem.Enabled">
            <summary>
            Whether the item is enabled.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.MenuItem.Return">
            <summary>
            The the value to be returned if this item got selected.
            </summary>
            <remarks>This value may be null if no return value was specified. This property is internal, because
            clients do not need it in order to implement a popup menu.</remarks>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.MenuItem.SubMenu">
            <summary>
            Optional: a number of submenu items.
            </summary>
            <remarks>This value may be null.</remarks>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.Scripting.Messages">
            <summary>
            Messages object.
            </summary>
            <remarks>
            To override the default messages you must specialize this class and
            register a custom JavaScript class factory that returns an instance
            of this class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Messages.#ctor">
            <summary>
            Create a new Messages object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.Messages.MustBeGreaterThanOrEqual">
            <summary>
            Indicates that a value is too small. Override this string to provide a localized
            version of the string
            "Invalid value: must be greater than or equal to %s."
            </summary>
            <remarks>%s will be replaced by the actual lowerbound.</remarks>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.Messages.MustBeLessThanOrEqual">
            <summary>
            Indicates that a value is too big. Override this string to provide a localized
            version of the string
            "Invalid value: must be less than or equal to %s."
            </summary>
            <remarks>%s will be replaced by the actual upperbound.</remarks>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.Messages.MustBeBetweenOrEqual">
            <summary>
            Indicates that a value falls outside particular bounds. Override this string to provide
            a localized version of the string
            "Invalid value: must be greater than or equal to %s and less than or equal to %s."
            </summary>
            <remarks>The first occurence of %s will be replaced by the actual lowerbound. The
            second occurence of %s will be replaced by the actual upperbound</remarks>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.Messages.InvalidMonth">
            <summary>
            Indicates that an invalid month index is being used. Override this string to provide
            a localized version of the string "** Invalid **"
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.Messages.InvalidDateForField">
            <summary>
            Indicates that an invalid date is being used for a particular field. Override this string
            to provide a localized version of the string "Invalid date/time: please ensure that the
            date/time exists. Field "
            </summary>
            <remarks>The field name will be appended to this message.</remarks>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.Messages.MustMatchFieldFormat">
            <summary>
            Indicates that a field value does not match a particular format. Override this string
            to provide a localized version of the string
            " should match format "
            </summary>
            <remarks>The field name will be prepended. The format will be appended.</remarks>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.Messages.InvalidFormat">
            <summary>
            Indicates that a field value does not match its format. Override this string to provide
            a localized version of the string
            "The value entered does not match the format of the field"
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.Messages.ClockAm">
            <summary>
            Override this string to provide a localized version of the string "am".
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.Messages.ClockPm">
            <summary>
            Override this string to provide a localized version of the string "pm".
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.Messages.MonthsFull">
            <summary>
            Override this string array to provide an array of localized full names for all
            months, e.g. ["January", "February", ...]. The array must have size 12.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.Messages.MonthsShort">
            <summary>
            Override this string array to provide an array of localized short names for all
            months, e.g. ["Jan", "Feb", ...]. The array must have size 12.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.Scripting.AlertButtons">
            <summary>
            Different types of alert message boxes. A value of this type is passed
            as part of the Alert event.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.AlertButtons.Ok">
            <summary>
            Display a message box with just an 'OK' button.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.AlertButtons.OkCancel">
            <summary>
            Display a message box with an 'OK' and a 'Cancel' button.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.AlertButtons.YesNo">
            <summary>
            Display a message box with a 'Yes' and a 'No' button.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.AlertButtons.YesNoCancel">
            <summary>
            Display a message box with a 'Yes', 'No' and a 'Cancel' button.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.Scripting.AlertCheckbox">
            <summary>
            Represents the checkbox to be created at the lower-left corner of the alert message box.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.AlertCheckbox.Message">
            <summary>
            Display this message with the checkbox.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.AlertCheckbox.CheckedBefore">
            <summary>
            The initial state of the checkbox.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.AlertCheckbox.CheckedAfter">
            <summary>
            The state of the checkbox when the alert message box is closed.
            The Alert event handler should set this value.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.Scripting.AlertIcon">
            <summary>
            Different types of icons for the alert message box. A value of this type is passed
            as part of the Alert event.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.AlertIcon.Error">
            <summary>
            Error icon.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.AlertIcon.Warning">
            <summary>
            Warning icon.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.AlertIcon.Question">
            <summary>
            Question icon.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.AlertIcon.Status">
            <summary>
            Status (or informational) icon.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.Scripting.AlertResult">
            <summary>
            The type of button on the alert message box that was pressed by the user.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.AlertResult.Ok">
            <summary>
            The user clicked 'Ok'.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.AlertResult.Cancel">
            <summary>
            The user clicked 'Cancel'.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.AlertResult.No">
            <summary>
            The user clicked 'No'.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.AlertResult.Yes">
            <summary>
            The user clicked 'Yes'.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.Scripting.App">
            <summary>
            App JavaScript object.
            </summary>
            <remarks>
            To override the default behavior you must specialize this class and
            register a custom JavaScript class factory that returns an instance
            of this class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.App.#ctor">
            <summary>
            Create a new App object.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.App.OnError(System.String)">
            <summary>
            Override this method if you need to be informed about errors
            during the execution of JavaScript.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.App.Alert(System.String,TallComponents.PDF.JavaScript.Scripting.AlertIcon,TallComponents.PDF.JavaScript.Scripting.AlertButtons,System.String,TallComponents.PDF.Document,TallComponents.PDF.JavaScript.Scripting.AlertCheckbox)">
            <summary>
            Override this method to implement custom alert behavior.
            </summary>
            <param name="message"></param>
            <param name="icon"></param>
            <param name="buttons"></param>
            <param name="title"></param>
            <param name="document"></param>
            <param name="checkbox"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.App.LaunchURL(System.String,System.Boolean)">
            <summary>
            Override this method to implement custom launchURL behavior.
            </summary>
            <param name="url">a string that specifies the URL to launch</param>
            <param name="newFrame">optional, a Boolean that specifies whether
            the URL must be launched in a new window. The default is false.
            </param>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.App.PopUpMenu(TallComponents.PDF.JavaScript.Scripting.MenuItem[])">
            <summary>
            Override this method to implement custom PopUpMenu behavior.
            </summary>
            <param name="menuItems">The menu items.</param>
            <returns>The menu item that was selected, or null if none was selected. This default implementation just
            returns null.</returns>
            <remarks>At the moment only javascript popUpMenuEx will map onto this method. PopUpMenu is not supported yet.</remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.App.Response(System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Override this method to provide custom Reponse behavior.
            </summary>
            <param name="question">The question.</param>
            <param name="title">The title for the dialog window, may be an empty string.</param>
            <param name="defaultAnswer">The default answer, i.e. the text box should be prepopulated with this
            value. This may be null, which indicates that no default has been specified.</param>
            <param name="isPassword">Whether the answer is a password. If true, the answer should be
            masked with asterisks or bullets.</param>
            <param name="label">Label to be placed before the edit text field. May be an empty string.</param>
            <returns>The value that the user typed in, or null if the user presses the cancel button. By default
            this method returns the defaultAnswer.</returns>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.Scripting.Console">
            <summary>
            Console JavaScript object.
            </summary>
            <remarks>
            To override the default behavior you must specialize this class and
            register a custom JavaScript class factory that returns an instance
            of this class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Console.#ctor">
            <summary>
            Create a new Console object.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Console.Clear">
            <summary>
            Override this method to provide custom console.clear() behaviour
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Console.Show">
            <summary>
            Override this method to provide custom console.show() behaviour
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Console.Hide">
            <summary>
            Override this method to provide custom console.hide() behaviour
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Console.Println(System.String)">
            <summary>
            Override this method to provide custom console.println() behaviour
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.Scripting.Doc">
            <summary>
            Doc JavaScript object.
            </summary>
            <remarks>
            To override the default behavior you must specialize this class and
            register a custom JavaScript class factory that returns an instance
            of this class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Doc.#ctor(TallComponents.PDF.Document)">
            <summary>
            Create a new Doc object.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Doc.Initialize(TallComponents.PDF.Document)">
            <summary>
            Override this method to perform initializations before any javascript code
            is being run for this document.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Doc.ExportAsFDF(System.String,TallComponents.PDF.Forms.Data.FdfFormData)">
             <summary>
             Override this method to implement custom exportAsFDF behavior.
             </summary>
             <param name="path" >optional, device-independent path to the FDF file.
             The default is null.</param>
             <param name="formData">
             The fdf data that need to be exported.
             </param>
             <remarks>
             <para>For security reasons, this method will not write the form data to any file by
             default.
             </para>
             <para>In order to provide an implementation that adheres to the PDF specification, one
             should override this method and present a file selector if no path is given, and save
             the data to the selected file. If a path is given, one may directly write the
             data to the specified file, although
             one should take care that this does not introduce a security problem.
             <example>
             <code>
               System.Windows.Forms.SaveFileDialog dialog = new System.Windows.Forms.SaveFileDialog();
            
               if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
               {
                  using (System.IO.FileStream stream = new System.IO.FileStream(dialog.FileName, System.IO.FileMode.CreateNew))
                  {
                     formData.Write(stream);
                  }
               }
             </code>
             </example>
             </para>
             <para>
             This method will get invoked when the javascript exportAsFDF method gets called.
             This javascript function has a number of parameters that specify which data should be
             exported. At the moment, we ignore all parameters except cPath and bAllFields.
             </para>
             </remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Doc.ImportTextData(System.String,System.Int32)">
            <summary>
            Override this method to implement custom importTextData behavior.
            </summary>
            <param name="path" >optional, relative, device-independent path to the text file.
            The default is null.</param>
            <param name="nRow">optional, 0-based index of the row of the data to import, not
            counting the header row. Th default is -1.</param>
            <returns>result code</returns>
            <remarks>It is up to the implementator of this method to populate the fields
            as indicated in the file.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Doc.ImportAnFDF(System.String)">
            <summary>
            Override this method to implement custom importAnFDF behavior.
            </summary>
            <param name="path" >optional, relative, device-independent path to the FDF file.
            The default is null.</param>
            <returns>An FdfFormData instance, or null.</returns>
            <remarks>
            <para>By default, this method will try to construct an FdfFormData instance from the
            given path. If this fails, it will return null.
            </para>
            <para>In order to provide an implementation that adheres to the PDF specificaton, one
            should override this method and invoke base.ImportAnFDF(path) first. If this returns
            null, one should allow the user to select a file.
            </para></remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Doc.ImportAnXFDF(System.String)">
            <summary>
            Override this method to implement custom importAnXFDF behavior.
            </summary>
            <param name="path" >optional, relative, device-independent path to the XFDF file.
            The default is null.</param>
            <returns>An XfdfFormData instance, or null.</returns>
            <remarks>
            <para>By default, this method will try to construct an XfdfFormData instance from the
            given path. If this fails, it will return null.
            </para>
            <para>In order to provide an implementation that adheres to the PDF specificaton, one
            should override this method and invoke base.ImportAnXFDF(path) first. If this returns
            null, one should allow the user to select a file.
            </para></remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Doc.Open(System.String)">
            <summary>
            Opens the specified PDF document. Override this method to provide custom open functionality.
            </summary>
            <param name="path">A device-independent path to the PDF file. This path may be relative to
            the current document.</param>
            <returns>A Document instance, or null.</returns>
            <remarks>This method is used by by doc.insertPages and doc.replacePages to open the specified
            document. Overriding this method allows clients to control document opening via javascript.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Doc.SubmitForm(TallComponents.PDF.JavaScript.Scripting.SubmitFormOptions)">
            <summary>
            Override this method to implement custom submitForm behavior.
            </summary>
            <param name="options">All parameters.</param>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Doc.CreateWindowsPath(System.String)">
            <summary>
            Create a windows file system path from the given device-independeny path.
            </summary>
            <param name="path">The device independent path.</param>
            <returns>A windows file system path.</returns>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Doc.CreateWindowsPath(TallComponents.PDF.Document,System.String)">
            <summary>
            Create a windows file system path from the given device-independent path.
            </summary>
            <param name="document">The document the path may be relative to.</param>
            <param name="path">The device independent path.</param>
            <returns>A windows file system path.</returns>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Doc.CreateDeviceIndependentPath(System.String)">
            <summary>
            Create a device-independent path from a windows path.
            </summary>
            <param name="path">The windows path.</param>
            <returns>A windows file system path.</returns>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.Scripting.Global">
            <summary>
            Global JavaScript object.
            </summary>
            <remarks>
            <para>
            To override the default behavior you must specialize this class and
            register a custom JavaScript class factory that returns an instance
            of this class.
            </para>
            <para>
            Despite the name of this object, this is not a true global object that
            persists between documents. Each document has its own global object. Persisting
            values is accomplished by providing an implementation of the methods of this
            class. It is the responsibility of this implementation to store these values
            so that they persist across documents.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Global.#ctor">
            <summary>
            Create a new Global object.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Global.SetPersistedValue(System.String,System.Object)">
            <summary>
            JavaScript method Global.setPersistent. Make a given variable persistent across application sessions.
            </summary>
            <param name="name">The name of the variable to persist.</param>
            <param name="value">Value of the variable to persist. Type is string, float, double or bool.</param>
            <remarks>
            If the variable should persist across app domains, the implementor
            should use an appropriate persistency mechanism such as a file on disk, 
            or the Windows registry. The default implementation ignores the persist 
            argument and does not persist across across application sessions.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Global.GetPersistedNames">
            <summary>
            Return the collection of variable names that have been persisted during all previous sessions.
            </summary>
            <returns>A new string collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Global.GetPersistedValue(System.String)">
            <summary>
            Return the value of a previously persisted variable.
            </summary>
            <param name="name">The name of the variable.</param>
            <returns>The value of the variable. Must be string, float, double or bool.</returns>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.Scripting.ImportTextDataResult">
            <summary>
            The return value of the importTextDatatype method.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.ImportTextDataResult.NoError">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.ImportTextDataResult.MissingData">
            <summary>
            Warning: missing data.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.ImportTextDataResult.CancelledRowSelect">
            <summary>
            Warning: User cancelled row select.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.ImportTextDataResult.CancelledFileSelect">
            <summary>
            Warning: User cancelled file select.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.ImportTextDataResult.CannotOpenFile">
            <summary>
            Error: Canot open file.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.ImportTextDataResult.CannotLoadData">
            <summary>
            Error: Cannot load data.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.Scripting.ImportTextDataResult.InvalidRow">
            <summary>
            Error: Invalid row.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.Scripting.JavaScriptFactory">
            <summary>
            This class factory allows you to specialize Acrobat JavaScript
            classes such as App, Global and Doc.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.JavaScriptFactory.#ctor">
            <summary>
            Create the default JavaScriptFactory.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.JavaScriptFactory.Register(TallComponents.PDF.JavaScript.Scripting.JavaScriptFactory)">
            <summary>
            Register a custom JavaScript class factory.
            </summary>
            <param name="factory">Custom factory</param>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.JavaScriptFactory.CreateGlobal">
            <summary>
            Override this method to create a custom JavaScript Global object.
            </summary>
            <remarks>
            This method will be called at most once per .NET app domain.
            </remarks>
            <returns>Custom JavaScript Global object</returns>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.JavaScriptFactory.CreateDoc(TallComponents.PDF.Document)">
            <summary>
            Override this method to create a custom JavaScript Doc object.
            </summary>
            <remarks>
            This method will be called at most once per Document instance.
            </remarks>
            <returns>Custom JavaScript Doc object.</returns>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.JavaScriptFactory.CreateApp">
            <summary>
            Override this method to create a custom JavaScript App object.
            </summary>
            <remarks>
            This method will be called at most once per Document instance.
            </remarks>
            <returns>Custom JavaScript App object.</returns>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.JavaScriptFactory.CreateConsole">
            <summary>
            Override this method to create a custom JavaScript Console object.
            </summary>
            <remarks>
            This method will be called at most once per Console instance.
            </remarks>
            <returns>Custom JavaScript Console object</returns>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.JavaScriptFactory.CreateSoap">
            <summary>
            Override this method to create a custom JavaScript SOAP object.
            </summary>
            <remarks>
            This method will be called at most once per SOAP instance.
            </remarks>
            <returns>Custom JavaScript SOAP object</returns>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.JavaScriptFactory.CreateMessages">
            <summary>
            Override this method to create a custom Messages object.
            </summary>
            <remarks>
            This method will be called at most once per Document instance.
            </remarks>
            <returns>Custom Message object</returns>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.Scripting.Soap.Soap">
            <summary>
            Console JavaScript object.
            </summary>
            <remarks>
            To override the default behavior you must specialize this class and
            register a custom JavaScript class factory that returns an instance
            of this class.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Soap.Soap.#ctor">
            <summary>
            Create a new SOAP object.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Soap.Soap.Connect(System.String)">
            <summary>
            Override this method to return a custom SoapService from a URL.
            </summary>
            <param name="url">The URL of the WSDL document that describes the SOAP service.</param>
            <remarks>
            <para>Default implementation return <see langword="null"/> (does nothing).</para>
            <para>You should create a new class that inherits from SoapService and return an instance of this class.</para>
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.Scripting.Soap.SoapService">
            <summary>
            Represents a SOAP service constructed from a WSDL.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.Soap.SoapService.Invoke(System.String,System.Object[])">
            <summary>
            Invoke the web service method.
            </summary>
            <param name="methodName">The name of the web service method.</param>
            <param name="arguments">The web service arguments.</param>
            <returns>The web service result.</returns>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.Soap.SoapService.Methods">
            <summary>
            Returns the web service method names as a string array.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.Scripting.SubmitFormOptions">
            <summary>
            Encapsulates all parameters of method submitForm of JavaScript scripting class Doc.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.Scripting.SubmitFormOptions.#ctor(System.String,TallComponents.PDF.Actions.SubmitFormat,System.Boolean,System.Boolean)">
            <summary>
            Create a new Doc object.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.SubmitFormOptions.URL">
            <summary>
            The URL to submit to.
            </summary>
            <remarks>
            Corresponds to the cURL parameter.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.SubmitFormOptions.SubmitAs">
            <summary>
            The format for submission.
            </summary>
            <remarks>
            Corresponds to the cSubmitAs parameter.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.SubmitFormOptions.IncludeEmpty">
            <summary>
            Include empty fields in the submitted data.
            </summary>
            <remarks>
            Corresponds to the bEmpty parameter.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.Scripting.SubmitFormOptions.HttpGet">
            <summary>
            Ise HTTP method GET, otherwise POST. Only meaningful if submitted as HTML.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.JavaScriptActionHandler">
            <summary>
            The JavaScript action handler will run the javaScript Code, if a context is provided.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.JavaScriptActionHandler.RunJavaScript(TallComponents.PDF.JavaScript.JavaScript,TallComponents.PDF.Actions.ActionContext)">
            <summary>
            JavaScript action.
            </summary>
            <param name="javaScript">The JavaScript to execute</param>
            <param name="context">The context in which this action is executed.</param>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.JavaScript">
            <summary>
            JavaScript Code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.JavaScript.#ctor">
            <summary>
            Create a new JavaScript object, without any code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.JavaScript.#ctor(System.String)">
            <summary>
            Create a new JavaScript object, with the given code.
            </summary>
            <param name="javaScriptCode">The initial javascript code.</param>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.JavaScript.Text">
            <summary>
            The JavaScript Code.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.JavaScript.Parse">
            <summary>
            Parse the JavaScript code, throws an exception if a problem is found.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.JavaScript.Run(TallComponents.PDF.Document)">
            <summary>
            Runs the JavaScript.
            </summary>
            <param name="context">The context to run in.</param>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.JavaScript.Run(TallComponents.PDF.Actions.ActionContext)">
            <summary>
            Runs the JavaScript in the context passed as a parameter.
            </summary>
            <param name="context">The context to run in.</param>
            <remarks>The context must have its document set.</remarks>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.JavaScriptCollection">
            <summary>
            JavaScript defined at document level. You cannot create an instance of this class. Instead you retrieve an existing JavaScriptCollection object
            from the JavaScript property of the Document class.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.JavaScriptCollection.Count">
            <summary>
            The number of JavaScript element in this collection
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.JavaScriptCollection.ScriptNames">
            <summary>
            The script names in this document.
            </summary>
            <para>
            The script names are case sensitive.
            </para>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.JavaScriptCollection.Item(System.String)">
            <summary>
            The JavaScript associated with the given name.
            </summary>
            <param name="name">The script name.</param>
            <returns>A JavaScript object with the JavaScript code in it, <see langword="null"/> if the name cannot be found.</returns>
            <remarks>
            Setting a JavaScript with an existing name, will override the existing item.
            <para>
            The name is case sensitive, you may use ASCII character only.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.JavaScriptCollection.Add(System.String,TallComponents.PDF.JavaScript.JavaScript)">
            <summary>
            Add a javaScript with the given name.
            </summary>
            <param name="name">The name to use.</param>
            <param name="javaScript">The JavaScript to add.</param>
            <para>
            The name is case sensitive, you may use ASCII character only.
            </para>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.JavaScriptCollection.Remove(System.String)">
            <summary>
            Removes the JavaScript object with the given name.
            </summary>
            <param name="name">The name to remove.</param>
            <remarks>
            Nothing happens when the name cannot be found.
            <para>
            The name is case sensitive.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.JavaScriptCollection.Exists(System.String)">
            <summary>
            Check if the given name exists in the current collection.
            </summary>
            <param name="name">The script name to check.</param>
            <returns>True if found, false otherwise</returns>
            <para>
            The name is case sensitive.
            </para>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.JavaScriptCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.JavaScriptCollection.Item(System.Int32)">
            <summary>
            The JavaScript associated with the given index.
            </summary>
            <param name="index">The zero-base index.</param>
            <returns>A JavaScript object with the JavaScript code in it.</returns>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.JavaScriptCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.JavaScriptCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.JavaScriptEnumerator">
            <summary>
            A custom enumerator to iterate over all items in the JavaScript collection. 
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.JavaScriptEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.JavaScript.JavaScriptEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.JavaScriptEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the JavaScript collection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.JavaScript.JavaScriptEnumerator.Current">
            <summary>
            Gets the current element in the JavaScript collection.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.JavaScript.ScriptBehavior">
            <summary>
            The JavaScript behavior for JavaScript actions in fields.
            </summary>
            <remarks>
            Note that this enumeration are Flags.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.ScriptBehavior.None">
            <summary>
            No script will be executed. 
            </summary>
            <remarks>
            This is the default value.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.ScriptBehavior.Calculate">
            <summary>
            The calculate script will be executed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.ScriptBehavior.Format">
            <summary>
            The format script will be executed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.ScriptBehavior.Validate">
            <summary>
            The validate script will be executed.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.JavaScript.ScriptBehavior.Full">
            <summary>
            All scripts will be executed.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layers.LayerDefaultConfig">
            <summary>
            Every layer on the page has to be referenced in documents Root -> OCProperties dictionary as well, otherwise such a layer should be ignored by PDF processor.
            So the layer should have information about his configuration in OCProperties, and when the page is cloned and added into another document, the layers
            properties should be added to documents OCProperties dictionary as well.
            This class stores the following preferences from the optional content configurarion dictionary:
            ON - checks if the layer is referenced in ON array
            OFF - checks if the layer is referenced in OFF array
            AS - an array of usage application dictionaries. Stores in which ones is the layer referenced.
            Order - an array specifying the order for presentation of optional content groups on user interface. Checks if the layer is referenced in this array.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layers.OCGCollector.#ctor(TallComponents.PDF.Page)">
            <summary>
            The optional content groups must be present in the OCProperties (in documents Root) dictionary as well
            This function collects all the OCGs on the page and checks if they are present in OCProperties.
            If not, adds them into OCProperties dictionary.
            </summary>
            <param name="sourcePage">The page where the OCGs have to be collected.</param>
        </member>
        <member name="M:TallComponents.PDF.Layers.OCGCollector.ProcessFormDictionary(TallComponents.PDF.Base.Dictionary)">
            <summary>
            Looks up for OC key in the dictionary.
            </summary>        
            <param name="dict">The dictionary to search for OCG.</param>
        </member>
        <member name="M:TallComponents.PDF.Layers.OCGCollector.ProcessResourceDictionary(System.Collections.Generic.Dictionary{TallComponents.PDF.Base.Graphics.Resources,System.Boolean},TallComponents.PDF.Base.Graphics.Resources)">
            <summary>
            Looks up for OCG dictionaries recursively. The OCGs are located either in the Properties
            subdictionary of the current resource dictionary, or in the XObjects dictionaries.
            </summary>
            <param name="processedResources">Dictionary to detect edges creating infinite resursion.</param>
            <param name="resourceDict">The current Resource dictionary to search for OCGs.</param>
        </member>
        <member name="T:TallComponents.PDF.OpenOptions">
            <summary>
            Options for reading an existing PDF document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.OpenOptions.JavaScriptBehavior">
            <summary>
            Required behavior of the JavaScript interpreter.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.OpenOptions.Password">
            <summary>
            Password required to open the document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.OpenOptions.AutoRepair">
            <summary>
            Setting for trying to automatically repair the document. It may increase the time to open the document if turned on.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Page">
            <summary>
            A page inside a document. You either create a new page or retrieve it from an existing document.
            </summary>
            <remarks>
            You stamp a page by adding shape objects to the [visual]underlay and/or [visual]overlay.
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Page.PageFontCache">
            <summary>
            This class implements a default font cache.
            The interface cannot be implemented by public classes, because it will 
            expose the interface members/methods.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Page.PageFontCache.GetFont(System.String)">
            <summary>
            For internal usage only.
            </summary>
            <param name="fontName"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.Page.PageFontCache.AddFont(System.String,TallComponents.PDF.Fonts.Font)">
            <summary>
            For internal usage only.
            </summary>
            <param name="fontName"></param>
            <param name="font"></param>
        </member>
        <member name="E:TallComponents.PDF.Page.PropertyChanged">
            <summary>
            Occurs when any property of the page has changed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Page.#ctor(System.Double,System.Double)">
            <summary>
            Create a new page with given size.
            </summary>
            <param name="width">Width in points.</param>
            <param name="height">Height in points.</param>
        </member>
        <member name="M:TallComponents.PDF.Page.#ctor(TallComponents.PDF.PageSize)">
            <summary>
            Create a new page with given pagesize
            </summary>
            <remarks>
            The page orientation (landscape or portrait) will depend on the given page sizes
            </remarks>
            <param name="pageSize">The specified page size</param>
        </member>
        <member name="M:TallComponents.PDF.Page.#ctor(TallComponents.PDF.PageSize,System.Boolean)">
            <summary>
            Create a new page with given pagesize, and format the size to landscape or portrait.
            </summary>
            <remarks>
            The page orientation will be forced to landscape or portrait. 
            If you specify landscape to true and the given page size is already in landscape (eg Ledger, or custom) the page size will 
            not be changed. This also the case if the page size is already portrait and the landscape boolean is set to false. 
            </remarks>
            <param name="pageSize">The specified page size</param>
            <param name="landscape">force the page to be landscape, otherwise force to be portrait</param>
        </member>
        <member name="M:TallComponents.PDF.Page.setContext(TallComponents.PDF.PageCollection,TallComponents.PDF.Forms.Fields.StaticFieldCollection)">
            <summary>
            Pages cannot exist by themselves. They always live in a context. After
            constructing a page, setContext needs to be called for it. This will done when adding
            a page to the collection.
            </summary>
            <param name="pageCollection">The page collection that this page was added to.</param>
            <param name="fields">The fields that have been defined in the page collection.</param>
        </member>
        <member name="P:TallComponents.PDF.Page.Index">
            <summary>
            The 0 based index of this page in the document.Pages collection.
            </summary>
            <remarks>
            If the page is not added to any collection, -1 is returned.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Page.Label">
            <summary>
            The Label of this page.
            </summary>
            <remarks>
            If the page is not added to any collection, null is returned.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Page.getTabOrder(TallComponents.PDF.Annotations.Annotation)">
            <summary>
            Retrieve the tab-order of the given annotation.
            </summary>
            <param name="annotation">Retrieve the tab-order of this annotation.</param>
            <returns>The zero-based tab-order. Return -1 if the annotation is not found on this page.</returns>
            <remarks>
            The numbers are not garanteed to be continuous.  
            The absolute tab order number has no significant meaning.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Page.Widgets">
            <summary>
            All widgets on this page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Page.Markups">
            <summary>
            All markups on this page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Page.Links">
            <summary>
            All link annotations on this page.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Page.Find(TallComponents.PDF.TextExtraction.TextFindCriteria)">
            <summary>
            Find text in this page.
            </summary>
            <param name="findCriteria">Specifies find criteria.</param>
            <returns>An enumerator that lets you enumerate over all TextMatch elements. Glyphs are sorted by their positions.</returns>
            <remarks>
            An enumerator is returned, not a collection, because the next TextMatch is evaluated lazily.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Page.Find(TallComponents.PDF.TextExtraction.TextFindCriteria,System.Boolean)">
            <summary>
            Find text in this page.
            </summary>
            <param name="findCriteria">Specifies find criteria.</param>
            <param name="sortGlyphs">Indicates whether glyps should be sorted or left in the order they are defined in the PDF.</param>
            <returns>An enumerator that lets you enumerate over all TextMatch elements. Glyphs are sorted by their positions.</returns>
            <remarks>
            An enumerator is returned, not a collection, because the next TextMatch is evaluated lazily.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Page.Find(TallComponents.PDF.TextExtraction.TextFindCriteria,TallComponents.PDF.TextExtraction.IGlyphComparer,System.Boolean)">
            <summary>
            Find text in this page.
            </summary>
            <param name="findCriteria">Specifies find criteria.</param>
            <param name="glyphComparer">The custom glyph comparer. If null, glyps are sorted by their positions.</param>
            <param name="transformGlyphs">If true, each glyph is transformed with the page transformation (orientation) before de glyph comparer is applied.</param>
            <returns>An enumerator that lets you enumerate over all TextMatch elements</returns>
            <remarks>
            An enumerator is returned, not a collection, because the next TextMatch is evaluated lazily.
            <para>
            If transformGlyphs is true, the glyphs are tranformed with the page transformation during sorting. This means that the compare function will
            see the glyph coordinates as if their origin is at the bottom left of the page view. If a page is rotated, the actual origin of the page will
            be in one of the other corners of the view. The returned glyphs however will contain the original glyphs coordinates, i.e. with respect to the
            page origin, not the view origin.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Page.Overlay">
            <summary>
            The layer that lies on top of the original content. You define the appearance of this layer
            by adding shapes to it.
            </summary>
            <remarks>
            This overlay uses the original coordinate system and doesn't respect page orientation and/or any clipping area
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Page.Underlay">
            <summary>
            The layer that lies underneath the original content. You define the appearance of this layer
            by adding shapes to it.
            </summary>
            <remarks>
            This underlay uses the original coordinate system and doesn't respect page orientation and/or any clipping area
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Page.VisualOverlay">
            <summary>
            The canvas that lies on top of the original content and on top of the Overlay. You define the appearance of this layer
            by adding shapes to it.
            </summary>
            <remarks>
            This overlay uses a coordinate system that does respect page orientation and/or any clipping area.
            The Layer will placed exact on the resulting visual area shown in a viewer (e.g. Acrobat Reader).
            Note that if no rotation and/or clipping is available that this has the same result as the normal overlay.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Page.VisualUnderlay">
            <summary>
            The canvas that lies underneath the original content, but on top of the Underlay. You define the appearance of this layer
            by adding shapes to it.
            </summary>
            <remarks>
            This underlay uses a coordinate system that does respect page orientation and/or any clipping area.
            The Layer will placed exact on the resulting visual area shown in a viewer (e.g. Acrobat Reader). 
            Note that if no rotation and/or clipping is available that this has the same result as the normal overlay.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Page.Glyphs">
            <summary>
            The Glyphs located on the page. 
            </summary>
            <remarks>
            Note: You should hold a strong reference to the Page.Glyphs (as long as you need them),
            otherwise the GC can decide to recycle, invalidating any Sort(...) you did.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Page.OrderedGlyphs">
            <summary>
            The Ordered Glyphs located on the page (used for Text Matching). 
            </summary>
            <remarks>
            Notice that this collection contain the same glyph objects from the 
            Glyph collection only different sorted, so there is no memory hit here.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Page.CreateShapes">
            <summary>
            Returns the content on this page as a collection of shape objects (nested).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Page.CreateShapes(TallComponents.PDF.Diagnostics.Summary)">
            <summary>
            Returns the content on this page as a collection of shape objects (nested).
            </summary>
            <param name="summary">Provides a summary of messages collected during the create shapes method.</param>
        </member>
        <member name="P:TallComponents.PDF.Page.CombinedContent">
            <summary>
            The combined content for this page. If multiple content streams are available one new content will be build.
            </summary>
            <remarks>
            Since the content entry is optional, this property can return an empty content stream (no <see langword="null"/> will returned).
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Page.Play(TallComponents.PDF.Base.Graphics.IContentConsumer)">
            <summary>
            Play the graphical instructions on this page.
            </summary>
            <param name="contentConsumer">All instructions will be played to this consumer.</param>
            <returns>An exeptions collection which holds all exeptions raised while playing this content</returns>
        </member>
        <member name="M:TallComponents.PDF.Page.Play(TallComponents.PDF.Base.Graphics.IContentConsumer,TallComponents.PDF.ILengthyJobMonitor)">
            <summary>
            Play the graphical instructions on this page.
            </summary>
            <param name="contentConsumer">All instructions will be played to this consumer.</param>
            <param name="lengthyJobMonitor">If not null, this object is queried regularly to check if the job is cancelled.</param>
            <returns>An exeptions collection which holds all exeptions raised while playing this content</returns>
        </member>
        <member name="P:TallComponents.PDF.Page.Width">
            <summary>
            Width of this page in points (i.e. the width of its Mediabox).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Page.Height">
            <summary>
            Height of this page in points (i.e. the height of its Mediabox).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Page.Orientation">
            <summary>
            Orientation of this page in degrees. Default is Rotate0.
            </summary>
            <remarks>
            The orientation is counterclockwise.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Page.MediaBox">
            <summary>
            A rectangle, expressed in points with the origin at the bottom left corner, defining the boundaries of the physical medium
            on which the page is intented to be displayed or printed.
            </summary>
            <remarks>
            You cannot set this entry if any [Visual]Underlay or [Visual]Overlay is instanciated.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Page.CropBox">
            <summary>
            A rectangle, expressed in points with the origin at the bottom left corner, defining the visible region of default user space.
            When the page is displayed or printed, its contents are to be clipped (cropped) to this rectangle and then imposed
            on the output medium in some implementation-defined manner.
            </summary>
            <remarks>
            If the CropBox is <see langword="null"/>, please use the MediaBox.
            You cannot set this entry if any [Visual]Underlay or [Visual]Overlay is instanciated.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Page.BleedBox">
            <summary>
            A rectangle, expressed in points with the origin at the bottom left corner, defining the region to which the contents of the 
            page should be clipped when output in a production environment.
            </summary>
            <remarks>
            If the BleedBox is <see langword="null"/>, please use the CropBox. Note that the CropBox can be <see langword="null"/> also, you should use the MediaBox in that case.
            You cannot set this entry if any [Visual]Underlay or [Visual]Overlay is instanciated.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Page.TrimBox">
            <summary>
            A rectangle, expressed in points with the origin at the bottom left corner, defining the intended dimensions of the finished page after trimming.
            </summary>
            <remarks>
            If the TrimBox is <see langword="null"/>, please use the CropBox. Note that the CropBox can be <see langword="null"/> also, you should use the MediaBox in that case.
            You cannot set this entry if any [Visual]Underlay or [Visual]Overlay is instanciated.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Page.ArtBox">
            <summary>
            A rectangle, expressed in points with the origin at the bottom left corner, defining the extent of the page meaningful content (including potential
            white space) as intended by the page's creator.
            </summary>
            <remarks>
            If the Art is <see langword="null"/>, please use the CropBox. Note that the CropBox can be <see langword="null"/> also, you should use the MediaBox in that case.
            You cannot set this entry if any [Visual]Underlay or [Visual]Overlay is instanciated.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Page.OpenActions">
            <summary>
            The actions executed when the page is opened.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Page.CloseActions">
            <summary>
            The actions executed when the page is closed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Page.LayersList">
            <summary>
            The collection of all layers referenced on the page.
            The layers can be stored either in Resource dictionaries Properties subdictionary,
            or in Form/Image XObjects under OC key.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Page.System#ICloneable#Clone">
            <summary>
            Clones this Page
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Page.Clone">
            <summary>
            Clones this page with default clone settings.
            </summary>
            <returns>The cloned page.</returns>
            <remarks>
            Default clone settings: PageCloneSettings.Actions | PageCloneSettings.Shapes | PageCloneSettings.Widgets
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Page.Clone(TallComponents.PDF.PageCloneSettings)">
            <summary>
            Clones this page with the specified clone settings.
            </summary>
            <param name="cloneSettings">The clone settings.</param>
            <returns>The cloned page.</returns>
        </member>
        <member name="M:TallComponents.PDF.Page.Clone(System.String)">
            <summary>
            Clones this page with the default clone settings but prefix the field fullNames.
            </summary>
            <param name="fieldPrefix">The fieldprefix to use (null or string.Empty means: no prefix)</param>
            <returns>The cloned page.</returns>
            <remarks>
            Default clone settings: PageCloneSettings.Actions | PageCloneSettings.Shapes | PageCloneSettings.Widgets
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Page.Clone(TallComponents.PDF.PageCloneSettings,System.String)">
            <summary>
            Clones this page with the specified clone settings and prefix the field fullNames.
            </summary>
            <param name="cloneSettings">The clone settings.</param>
            <param name="fieldPrefix">The fieldprefix to use (null or string.Empty means: no prefix)</param>
            <returns>The cloned page.</returns>
        </member>
        <member name="T:TallComponents.PDF.FormatOptions">
            <summary>
            Encapsulates format-specific options.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.DocumentFormat">
            <summary>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.DocumentFormat.Default">
            <summary> 
            Meets the normal PDF specification.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Prepress.OutputIntentType">
            <summary>
            Possible types of an output intent.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Prepress.OutputIntentType.GTS_PDFX">
            <summary>
            PDF/X
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Prepress.OutputIntentType.GTS_PDFA1">
            <summary>
            PDF/A1
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Prepress.OutputIntentType.ISO_PDFE1">
            <summary>
            PDF/E1
            </summary>
        </member>
        <member name="F:TallComponents.PDF.Prepress.OutputIntentType.Unknown">
            <summary>
            Unknown type
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Prepress.OutputIntent">
            <summary>
            Output intents provide a means for matching the colour characteristics of page content in a PDF document with those of a target output device or production environment in which the document will be printed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Prepress.OutputIntent.#ctor(TallComponents.PDF.Prepress.OutputIntentType)">
            <summary>
            Creates a new OutputIntent instance.
            </summary>
            <param name="type">The type of the output intent.</param>
        </member>
        <member name="P:TallComponents.PDF.Prepress.OutputIntent.OutputCondition">
            <summary>
            A text string concisely identifying the intended output device orproduction condition in human-readable form.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Prepress.OutputIntent.Type">
            <summary>
            The output intent type.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Prepress.OutputIntent.OutputConditionIdentifier">
            <summary>
            A text string identifying the intended output device or production condition in human-or machine-readable form. If human-readable, this string may be used in lieu of an OutputCondition string for presentation to the user.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Prepress.OutputIntent.RegistryName">
            <summary>
            A text string (conventionally a uniform resource identifier, or URI)identifying the registry in which the condition designatedby OutputConditionIdentifier is defined.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Prepress.OutputIntent.Info">
            <summary>
            A human-readable text string containing additionalinformation or comments about the intended target device or production condition.
            </summary>
            <remarks>Required if OutputConditionIdentifier does not specify a standard production condition</remarks>
        </member>
        <member name="P:TallComponents.PDF.Prepress.OutputIntent.DestOutputProfile">
            <summary>
            An ICC profile stream defining the transformationfrom the PDF document’s source colours to output device colourants.
            </summary>
            <remarks>Required if OutputConditionIdentifier does not specify a standard production condition</remarks>
        </member>
        <member name="T:TallComponents.PDF.Prepress.OutputIntentCollection">
            <summary>
            A collection of output intent objects.
            </summary>
            <remarks>
            It can be obtained via the Document.OutputIntents getter.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Prepress.OutputIntentCollection.#ctor(TallComponents.PDF.Base.DocumentStructure.Catalog)">
            <summary>
            Create a new - attached - OutputIntentCollection.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Prepress.OutputIntentCollection.Item(System.Int32)">
            <summary>
            Get an output intent by zero-based index from the collection. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Prepress.OutputIntentCollection.Count">
            <summary>
            Get the number of output intents actually contained in the collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Prepress.OutputIntentCollection.Add(TallComponents.PDF.Prepress.OutputIntent)">
            <summary>
            Add a new output intent to the end of this collection.
            </summary>
            <param name="outputIntent">The output intent to add.</param>
        </member>
        <member name="M:TallComponents.PDF.Prepress.OutputIntentCollection.AddRange(TallComponents.PDF.Prepress.OutputIntent[])">
            <summary>
            Add an output intent array to the end of this collection.
            </summary>
            <param name="outputIntents">The output intents to add.</param>
        </member>
        <member name="M:TallComponents.PDF.Prepress.OutputIntentCollection.Clear">
            <summary>
            Remove all output intents in this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Prepress.OutputIntentCollection.Contains(TallComponents.PDF.Prepress.OutputIntent)">
            <summary>
            Determine whether an output intent is in the colelction.
            </summary>
            <param name="outputIntent">The output intent to verify.</param>
            <returns>True if the output intent is found in this collection, false otherwise.</returns>
        </member>
        <member name="M:TallComponents.PDF.Prepress.OutputIntentCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.Prepress.OutputIntentCollection.IndexOf(TallComponents.PDF.Prepress.OutputIntent)">
            <summary>
            Searches for the specified output intent in the collection.
            </summary>
            <param name="outputIntent">The output intent to locate in the collection.</param>
            <returns>The zero-based index at which the output intent is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.Prepress.OutputIntentCollection.Insert(System.Int32,TallComponents.PDF.Prepress.OutputIntent)">
            <summary>
            Insert a new output intent to this collection.
            </summary>
            <param name="index">The zero-based index this output intent get in this collection.</param>
            <param name="outputIntent">The output intent to add.</param>
        </member>
        <member name="M:TallComponents.PDF.Prepress.OutputIntentCollection.Remove(TallComponents.PDF.Prepress.OutputIntent)">
            <summary>
            Remove the specified output intent.
            </summary>
            <param name="outputIntent">The output intent to remove.</param>
        </member>
        <member name="M:TallComponents.PDF.Prepress.OutputIntentCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the output intent on the specified index.
            </summary>
            <param name="index">The zero-based index to remove.</param>
        </member>
        <member name="M:TallComponents.PDF.Prepress.OutputIntentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.ReduceOptions">
            <summary>
            File size reducer specific flag
            </summary>
        </member>
        <member name="F:TallComponents.PDF.ReduceOptions.None">
            <summary>
            Do not try to reduce file size
            </summary>
        </member>
        <member name="F:TallComponents.PDF.ReduceOptions.RemoveIdenticalObjects">
            <summary>
            Remove identical objects
            </summary>
        </member>
        <member name="F:TallComponents.PDF.ReduceOptions.RewriteContentStreams">
            <summary>
            Rewrite content streams to reduce size
            </summary>
        </member>
        <member name="F:TallComponents.PDF.ReduceOptions.RecompressContentStreams">
            <summary>
            Merge and recompress content streams
            </summary>
        </member>
        <member name="F:TallComponents.PDF.ReduceOptions.UseObjectStreams">
            <summary>
            Use compressed object and cross reference streams 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.ReduceOptions.All">
            <summary>
            Apply all options
            </summary>
        </member>
        <member name="T:TallComponents.PDF.WriteOptions">
            <summary>
            Encapsulates various write options.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.WriteOptions.#ctor">
            <summary>
            Create a new WriteOptions instance with default settings: Mode is Compact, KeepOpen is true and Format is Default.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.WriteOptions.#ctor(TallComponents.PDF.DocumentWriteMode,TallComponents.PDF.DocumentFormat,System.Boolean)">
            <summary>
            Create a new WriteOptions with given properties.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.WriteOptions.Mode">
            <summary>
            Append an update or write a new document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.WriteOptions.Format">
            <summary>
            Select the PDF format. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.WriteOptions.KeepOpen">
            <summary>
            Keep the document open after writing.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.WriteOptions.FormatOptions">
            <summary>
            Format-specific options.
            </summary>
            <remarks>This property is null by default. If so, the default options for the chosen format will be used.</remarks>
        </member>
        <member name="P:TallComponents.PDF.WriteOptions.ReducerOptions">
            <summary>
            Reducer-specific options. 
            </summary>
            <remarks>Setting any of these options can significantly increase write time.</remarks>
        </member>
        <member name="P:TallComponents.PDF.WriteOptions.Compressed">
            <summary>
            Use a cross-reference-stream and object streams for optimal compression.
            </summary>
            <remarks>This will make the PDF document incompatible with applications that do not support PDF 1.5 and higher.</remarks>
        </member>
        <member name="T:TallComponents.PDF.EmbeddedFile">
            <summary>
            An embedded file (also know as attachment) object.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFile.#ctor(TallComponents.PDF.Base.String,TallComponents.PDF.Base.Files.FileSpecificationDictionary,System.String)">
            <summary>
            Create a new <see cref="T:TallComponents.PDF.EmbeddedFile"/>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFile.ReadFully(System.IO.Stream)">
            <summary>
            Utility function for reading a hole stream into a byte array (.NET 2 compatible)
            </summary>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFile.#ctor(System.IO.Stream,System.String)">
            <summary>
            Create a new <see cref="T:TallComponents.PDF.EmbeddedFile"/> from a Stream.
            </summary>
            <param name="stream">The stream</param>
            <param name="fileName">Associated file name identifying th embedded file</param>
        </member>
        <member name="P:TallComponents.PDF.EmbeddedFile.Description">
            <summary>
            The description provided to this embedded file.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFile.CreateKey(System.String)">
            <summary>
            Creates a key for an embedded file from a string. It MUST be unicode encode, otherwise it does not work.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.EmbeddedFile.FileName">
            <summary>
            The file name for this embedded file.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.EmbeddedFile.MimeType">
            <summary>
            The MIME type for this embedded file. 
            </summary>
            <remarks>
            If this information is not available 'null' is returned
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.EmbeddedFile.EmbeddedStream">
            <summary>
            The embedded file stream associated with the embedded file. 
            </summary>
            <remarks>
            It throws exception if accociated stream cannot be found. 
            </remarks>      /// 
        </member>
        <member name="P:TallComponents.PDF.EmbeddedFile.CreationDate">
            <summary>
            The creation date for this embedded file. 
            </summary>
            <remarks>
            If this information is not available DateTime.MinValue is returned.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.EmbeddedFile.ModificationDate">
            <summary>
            The modification date for this embedded file. 
            </summary>
            <remarks>
            If this information is not available DateTime.MinValue is returned.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.EmbeddedFile.Size">
            <summary>
            The size in bytes for this embedded file. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.EmbeddedFile.FolderName">
            <summary>
            The folder name in which this embedded file should be placed. (can be null, meaning not placed in any folder)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.EmbeddedFile.FileSpecification">
            <summary>
            The FileSpecificationDictionary entry holding the file data in the PDF
            </summary>
        </member>
        <member name="P:TallComponents.PDF.EmbeddedFile.parameterDictionary">
            <summary>
            The EmbeddedFileParameterDictionary for parameters associated with embedded file entry
            </summary>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFile.Write(System.IO.Stream)">
            <summary>
            Write this embedded file to a stream, eg a FileStream or MemoryStream.
            </summary>
            <param name="stream">Write the embedded file to this stream.</param>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFile.Write(System.IO.BinaryWriter)">
            <summary>
            Write this embedded file to any writer.
            </summary>
            <param name="binaryWriter">Write the embedded file to this writer.</param>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFile.ToString">
            <summary>
            Returns a string for the current EmbeddedFile object.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.EmbeddedFileCollection">
            <summary>
            An embedded file (also know as attachment) collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFileCollection.#ctor(TallComponents.PDF.Base.DocumentStructure.Document)">
            <summary>
            Create a new <see cref="T:TallComponents.PDF.EmbeddedFileCollection"/>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFileCollection.Add(TallComponents.PDF.EmbeddedFile)">
            <summary>
            Adds an embedded file to the end of the collection.
            </summary>
            <param name="embeddedFile">The embedded file to be added.</param>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFileCollection.AddRange(TallComponents.PDF.EmbeddedFile[])">
            <summary>
            Add the entries in an array of <see cref="T:TallComponents.PDF.EmbeddedFile">EmbeddedFiles</see> to the end of the <see cref="T:TallComponents.PDF.EmbeddedFileCollection">EmbeddedFileCollection</see>.
            </summary>
            <param name="embeddedFiles">The <see cref="T:TallComponents.PDF.EmbeddedFile">embeddedFiles</see> to be added to the end of the <see cref="T:TallComponents.PDF.EmbeddedFileCollection"/>.</param>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFileCollection.Insert(System.Int32,TallComponents.PDF.EmbeddedFile)">
            <summary>
            Insert a new embeddedFile in this collection at the given index. 
            </summary>
            <param name="index">The zero-based index the embeddedFile will get.</param>
            <param name="embeddedFile">The source page.</param>
            <remarks>
            In the final PDF document, the embedded file can appear in a different position.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFileCollection.AddToNameTree(TallComponents.PDF.EmbeddedFile)">
            <summary>
            Utility function to add the embedded file to the actual NameTree in the PDF document
            </summary>
            <param name="embeddedFile"></param>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFileCollection.Remove(TallComponents.PDF.EmbeddedFile)">
            <summary>
            Removes an embedded file from the collection.
            </summary>
            <param name="embeddedFile">The embedded file to be removed.</param>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFileCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an embedded file from the collection.
            </summary>
            <param name="index">The zero-based index for the embedded file to be removed.</param>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFileCollection.RemoveRange(TallComponents.PDF.EmbeddedFile[])">
            <summary>
            Removes multiple embedded files from the collection.
            </summary>
            <param name="embeddedFiles">The embedded files to remove</param>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFileCollection.Contains(TallComponents.PDF.EmbeddedFile)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.EmbeddedFile">EmbeddedFile</see> is in the <see cref="T:TallComponents.PDF.EmbeddedFileCollection">EmbeddedFileCollection</see>.
            </summary>
            <param name="embeddedFile">The <see cref="T:TallComponents.PDF.EmbeddedFile"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.EmbeddedFile"/> is found in this <see cref="T:TallComponents.PDF.EmbeddedFileCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="embeddedFile"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="embeddedFile"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFileCollection.IndexOf(TallComponents.PDF.EmbeddedFile)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.EmbeddedFile">EmbeddedFile</see> in the <see cref="T:TallComponents.PDF.EmbeddedFileCollection">EmbeddedFileCollection</see>.
            </summary>
            <param name="embeddedFile">The <see cref="T:TallComponents.PDF.EmbeddedFile"/> to locate in the <see cref="T:TallComponents.PDF.EmbeddedFileCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.EmbeddedFile"/> is found, -1 if not found.</returns>
        </member>
        <member name="P:TallComponents.PDF.EmbeddedFileCollection.Item(System.Int32)">
            <summary>
            Get an <see cref="T:TallComponents.PDF.EmbeddedFile">EmbeddedFile</see> by zero-based index from the <see cref="T:TallComponents.PDF.EmbeddedFileCollection">EmbeddedFileCollection</see>. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.EmbeddedFileCollection.Count">
            <summary>
            Get the number of <see cref="T:TallComponents.PDF.EmbeddedFile">EmbeddedFile</see>s actually contained in the <see cref="T:TallComponents.PDF.EmbeddedFileCollection">EmbeddedFileCollection</see>
            </summary>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFileCollection.Clear">
            <summary>
            Clears the complete collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFileCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.EmbeddedFileCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.EmbeddedFileCollection.EmbeddedFiles">
            <summary>
            The NameTree holding the embedded files.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Extraction.ShadingBrushFactory">
            <summary>
            Factory that creates the Shapes shading brushes from a IShading.
            This factory uses the corresponding method from the shading. These methods are internal
            and are not in IShading, because we do not want PDF.Shapes to appear in the public
            interface.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Extraction.ShadingBrushFactory.#ctor">
            <summary>
            Private constructor. The fact that it is private ensures that the class cannot be instantiated.
            .NET 1.1 does not allow a static class. This is the workaround.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Extraction.ShadingBrushFactory.CreateBrush(TallComponents.PDF.Base.Graphics.Patterns.IPattern,TallComponents.PDF.Base.Graphics.GraphicsState)">
            <summary>
            Create a brush from the given pattern, graphics state and tranformation matrices.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Extraction.ShadingBrushFactory.CreateBrush(TallComponents.PDF.Base.Graphics.Patterns.IShading,TallComponents.PDF.Base.Graphics.Patterns.IPattern,TallComponents.PDF.Base.Graphics.GraphicsState)">
            <summary>
            Create a brush from the given shading pattern and graphics state.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Extraction.ImageStreamImageData">
            <summary>
            Summary description for ImageStreamImageData.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Extraction.ShapeExtractor.ShowInlineImage(TallComponents.PDF.Base.Stream)">
            <summary>
            Shows the inline image.
            </summary>
            <remarks> 
            Avtually it converts the inline image to an XObject and shows it as XObject.
            </remarks>
            <param name="inlineImageStream">The inline image stream.</param>
        </member>
        <member name="T:TallComponents.PDF.LayerState">
            <summary>
            The possible values for state of the layer.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.LayerState.AlwaysOn">
            <summary>
            Always on independently of layers visibility.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.LayerState.AlwaysOff">
            <summary>
            Always off independently of layers visibility.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.LayerState.OnWhenVisible">
            <summary>
            Depends on layers visibility.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Layer">
            <summary>
            This class represents a single layer item.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Layer.PropertyChanged">
            <summary>
            Occurs when any property of the layer has changed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layer.#ctor(TallComponents.PDF.Base.Dictionary,TallComponents.PDF.Base.Dictionary)">
            <summary>
            Create a new (connected)Layer.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layer.#ctor">
            <summary>
            Create a new Layer, without a name.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layer.#ctor(System.String)">
            <summary>
            Create a new Layer.
            </summary>
            <param name="name">The name of this layer.</param>
        </member>
        <member name="M:TallComponents.PDF.Layer.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new Layer.
            </summary>
            <param name="name">The name of this layer.</param>
            <param name="visible">The state if this layer should be visible or invisible by default.</param>
        </member>
        <member name="M:TallComponents.PDF.Layer.#ctor(System.String,System.Boolean,TallComponents.PDF.Base.Dictionary)">
            <summary>
            Create a new (disconnected/cloned) Layer.
            </summary>
            <param name="name">The name of this layer.</param>
            <param name="visible">The state if this layer should be visible or invisible by default.</param>
            <param name="unclonedDictionary">The original (uncloned) dictionary.</param>
        </member>
        <member name="P:TallComponents.PDF.Layer.Name">
            <summary>
            The name of this layer.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layer.Visible">
            <summary>
            The state if this layer must be visible or invisible when the page is rasterized.
            </summary>
            <remarks>
            By default this boolean is set the the default specified in the PDF document.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layer.Printable">
            <summary>
            The state if this layer is on when the page is printed.
            </summary>
            <remarks>
            By default this boolean is set the default specified in the PDF document.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Layer.Exportable">
            <summary>
            The state if this layer must be visible when the page is exported.
            </summary>
            <remarks>
            By default this boolean is set the default specified in the PDF document.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Layer.IsEqualUncloned(TallComponents.PDF.Base.Object)">
            <summary>
            Checks if the argument object is the same as the uncloned dictionary.
            </summary>
            <param name="obj"></param>
            <returns>True if the argument equals the uncloned dict.</returns>
            <remarks>The uncloned dictionary is merely used to keep track of the original relation between graphical objects and there
            layer object.</remarks>
        </member>
        <member name="M:TallComponents.PDF.Layer.Clone">
            <summary>
            Clones this Layer, and detach it from the original document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layer.System#ICloneable#Clone">
            <summary>
            Clones this Layer, and detach it from the original document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Layer.ToString">
            <summary>
            The name is this Layer.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Layer.Properties">
            <summary>
            The Properties dictionary as stored in the document.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.LayerCollection">
            <summary>
            A collection of layer objects.
            </summary>
            <remarks>
            This collection is read-only, and can be obtained via the document.Layers getter.
            </remarks>
        </member>
        <member name="E:TallComponents.PDF.LayerCollection.PropertyChanged">
            <summary>
            Occurs when any property of the layer collection, or one of its layers has changed.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.LayerCollection.#ctor">
            <summary>
            Create a new - detached - LayerCollection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.LayerCollection.#ctor(TallComponents.PDF.Base.DocumentStructure.Catalog)">
            <summary>
            Create a new - attached - LayerCollection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.LayerCollection.insert(System.Int32,TallComponents.PDF.Layer)">
            <summary>
            Add a new layer.
            </summary>
            <param name="index">The zero-based index.</param>
            <param name="layer">Add this layer.</param>
        </member>
        <member name="M:TallComponents.PDF.LayerCollection.Add(TallComponents.PDF.Layer)">
            <summary>
            Add a new layer to the end of this collection.
            </summary>
            <param name="layer">The layer to add.</param>
        </member>
        <member name="M:TallComponents.PDF.LayerCollection.AddRange(TallComponents.PDF.Layer[])">
            <summary>
            Add a layer array to the end of this collection.
            </summary>
            <param name="layers">The layers to add.</param>
        </member>
        <member name="M:TallComponents.PDF.LayerCollection.Insert(System.Int32,TallComponents.PDF.Layer)">
            <summary>
            Inserts a new layer to this collection.
            </summary>
            <param name="index">The zero-based index this layer get in this collection.</param>
            <param name="layer">The layer to add.</param>
        </member>
        <member name="M:TallComponents.PDF.LayerCollection.Remove(TallComponents.PDF.Layer)">
            <summary>
            Remove the specified layer.
            </summary>
            <param name="layer">The layer to remove.</param>
        </member>
        <member name="M:TallComponents.PDF.LayerCollection.Clear">
            <summary>
            Remove all layers in this collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.LayerCollection.RemoveAt(System.Int32)">
            <summary>
            Remove the layer on the specified index.
            </summary>
            <param name="index">The zero-based index to remove.</param>
        </member>
        <member name="P:TallComponents.PDF.LayerCollection.Item(System.Int32)">
            <summary>
            Get an <see cref="T:TallComponents.PDF.Layer">Layer</see> by zero-based index from the <see cref="T:TallComponents.PDF.LayerCollection">LayerCollection</see>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.LayerCollection.Count">
            <summary>
            Get the number of <see cref="T:TallComponents.PDF.Layer">Layer</see>s actually contained in the <see cref="T:TallComponents.PDF.LayerCollection">LayerCollection</see>
            </summary>
        </member>
        <member name="M:TallComponents.PDF.LayerCollection.Contains(TallComponents.PDF.Layer)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Layer">Layer</see> is in the <see cref="T:TallComponents.PDF.LayerCollection">LayerCollection</see>.
            </summary>
            <param name="layer">The <see cref="T:TallComponents.PDF.Layer"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Layer"/> is found in this <see cref="T:TallComponents.PDF.LayerCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="layer"/> does not accept a <see langword="null"/> as a valid value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="layer"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.LayerCollection.IndexOf(TallComponents.PDF.Layer)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Layer">Layer</see> in the <see cref="T:TallComponents.PDF.LayerCollection">LayerCollection</see>.
            </summary>
            <param name="layer">The <see cref="T:TallComponents.PDF.Layer"/> to locate in the <see cref="T:TallComponents.PDF.LayerCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Layer"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.LayerCollection.Clone">
            <summary>
            Clones this LayerCollection, and detach it from the original document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.LayerCollection.System#ICloneable#Clone">
            <summary>
            Clones this LayerCollection, and detach it from the original document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.LayerCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.LayerCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.PageEnumerator.Reset">
            <summary>
            Set the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.PageEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:TallComponents.PDF.PageEnumerator.Current">
            <summary>
            Get the current page in the pages collection.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.TextExtraction.ClipVisibility">
            <summary>
            This enum specifies the different clip visibilities a glyph can have.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.TextExtraction.ClipVisibility.Fully">
            <summary>
            This glyph is fully clipped, so nothing will be visible.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.TextExtraction.ClipVisibility.Partially">
            <summary>
            This glyph is partially clipped, so some content can be visible 
            (depending on the pen and brush, e.g. if both are null this is transparent content).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.TextExtraction.ClipVisibility.None">
            <summary>
            This glyph is not clipped, so all content can be visible 
            (depending on the pen and brush, e.g. if both are null this is transparent content).
            </summary>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.GlyphsHelper.ExtractNormalizedText(TallComponents.PDF.Page,TallComponents.PDF.TextExtraction.GlyphCollection,System.Boolean)">
            <summary>
            Converts the specified glyphs to a normalized text.
            </summary>
            <param name="page">The page.</param>
            <param name="glyphs">The glyphs.</param>
            <param name="pageViewOrder">true if page rotation should be taken into account</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.GlyphsHelper.ExtractNormalizedText(TallComponents.PDF.Page,TallComponents.PDF.TextExtraction.GlyphCollection,System.Boolean,System.Int32[]@)">
            <summary>
            Converts the specified glyphs to a normalized text.
            </summary>
            <param name="page">The page.</param>
            <param name="glyphs">The glyphs.</param>
            <param name="pageViewOrder">true if page rotation should be taken into account</param>
            <param name="glyphToTextMappping">An array that maps glyphs to an index in the returned text.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.GlyphsHelper.IsWhitespace(System.Int32,TallComponents.PDF.TextExtraction.GlyphCollection,TallComponents.PDF.Base.Geom.AffineTransform)">
            <summary>
            Determines whether the glyph with specified index in the GlyphCollection is whitespace.
            </summary>
            <param name="glyphIndex">The glyph index.</param>
            <param name="glyphs">The glyphs collection.</param>
            <param name="viewerTransformation">The viewer transformation.</param>
            <returns>
              <c>true</c> if the glyph is whitespace; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextExtractionFont.SubstitutionFont">
            <summary>
            The substituted font, when the font is not embedded (referenceOnly), can be null.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.TextExtraction.GlyphComparerBridge">
            <summary>
            Summary description for GlyphPositionComparer.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.TextExtraction.IGlyphComparer">
            <summary>
            Exposes a method that compares two glyphs.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.IGlyphComparer.Compare(TallComponents.PDF.TextExtraction.Glyph,TallComponents.PDF.TextExtraction.Glyph)">
            <summary>
            Compares two glyphs and returns a value indicating whether one is less than,
            equal to, or greater than the other.
            </summary>
            <param name="x">The first glyph to compare.</param>
            <param name="y">The second glyph to compare.</param>
            <returns>Value Condition:
              - Less than zero x is less than y. 
              - Zero x equals y. 
              - Greater than zero x is greater than y.</returns>
        </member>
        <member name="T:TallComponents.PDF.TextExtraction.IndexComparer">
            <summary>
            Summary description for IndexComparer.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.TextExtraction.CharacterInfo">
            <summary>
            A single character including its Unicode value, displacement and width. 
            A TextInfo object consists of an array of CharacterInfo objects.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.CharacterInfo.Displacement">
            <summary>
            The horizontal displacement of this character measured in points from the starting point
            of the TextInfo that holds this CharacterInfo.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.CharacterInfo.Width">
            <summary>
            The width of this character in point.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.CharacterInfo.Characters">
            <summary>
            The Unicode character values.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.TextExtraction.ProgressEventHandler">
            <summary>
            Represents the signature for the method that will handle the Progress event of a TextMatchEnumerator.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.TextExtraction.Glyph">
            <summary>
            Represents a single glyph on a PDF page.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.Glyph.Characters">
            <summary>
            Unicode characters that this glyph represents.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.Glyph.BottomLeft">
            <summary>
            The position of the bottom-left corner of the glyph (in page coordinates).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.Glyph.BottomRight">
            <summary>
            The position of the bottom-right corner of the glyph (in page coordinates).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.Glyph.TopLeft">
            <summary>
            The position of the top-left corner of the glyph (in page coordinates).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.Glyph.TopRight">
            <summary>
            The position of the top-right corner of the glyph (in page coordinates).
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.Glyph.Font">
            <summary>
            The associated font.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.Glyph.FontSize">
            <summary>
            The effective size of the associated font.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.Glyph.IsClipped">
            <summary>
            Whether this glyph is [partially] clipped or not.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.Glyph.Pen">
            <summary>
            The pen used to draw this glyph.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.Glyph.Brush">
            <summary>
            The brush used to draw this glyph.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.TextExtraction.GlyphCollection">
            <summary>
            An glyph collection.
            </summary>
            <remarks>All glyphs in a glyph collection are located on a single page.</remarks>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.#ctor(TallComponents.PDF.Page,System.Boolean)">
            <summary>
            Create a new <see cref="T:TallComponents.PDF.TextExtraction.GlyphCollection"/>.
            </summary>
            <param name="page">The page that the glyphs are on.</param>
            <param name="createGlyphs">Whether the glyphs must be created already.</param>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.Contains(TallComponents.PDF.TextExtraction.Glyph)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.TextExtraction.Glyph"/> is in the <see cref="T:TallComponents.PDF.TextExtraction.GlyphCollection"/>.
            </summary>
            <param name="glyph">The <see cref="T:TallComponents.PDF.TextExtraction.Glyph"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.TextExtraction.Glyph"/> is found in this <see cref="T:TallComponents.PDF.TextExtraction.GlyphCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="glyph"/> does not accept a <see langword="null"/> as a valid value.
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="glyph"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.IndexOf(TallComponents.PDF.TextExtraction.Glyph)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.TextExtraction.Glyph"/> in the <see cref="T:TallComponents.PDF.TextExtraction.GlyphCollection"/>.
            </summary>
            <param name="glyph">The <see cref="T:TallComponents.PDF.TextExtraction.Glyph"/> to locate in the <see cref="T:TallComponents.PDF.TextExtraction.GlyphCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.TextExtraction.Glyph"/> is found, -1 if not found.</returns>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.Sort">
            <summary>
            Sort the collection so that the glyphs are ordered from left to right, top to bottom.
            </summary>
            <remarks>
            This sort does take into account the page orientation.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.Sort(TallComponents.PDF.TextExtraction.IGlyphComparer)">
            <summary>
            Sort the collection based on a custom comparer.
            </summary>
            <param name="glyphComparer">The custom glyph comparer.</param>
            <remarks>
            This sort does NOT take into account the page orientation.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.Sort(TallComponents.PDF.TextExtraction.IGlyphComparer,System.Boolean)">
            <summary>
            Sort the collection based on a custom comparer.
            </summary>
            <param name="glyphComparer">The custom glyph comparer.</param>
            <param name="transformGlyphs">Transform each glyph with the page transformation (orientation) before sorting.</param>
            <remarks>
            This glyphs are tranformed during the sort only, the sorted collection contains the original glyphs.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.GlyphCollection.Item(System.Int32)">
            <summary>
            Retrieve an <see cref="T:TallComponents.PDF.TextExtraction.Glyph"/> by zero-based index from the <see cref="T:TallComponents.PDF.TextExtraction.GlyphCollection"/>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.GlyphCollection.Count">
            <summary>
            Gets the number of <see cref="T:TallComponents.PDF.TextExtraction.Glyph"/>s actually contained in the <see cref="T:TallComponents.PDF.TextExtraction.GlyphCollection"/>
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.GlyphCollection.Page">
            <summary>
            Gets the page that the glyphs are located on.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.Add(TallComponents.PDF.TextExtraction.Glyph)">
            <summary>
            Adds a glyph to the glyph colection.
            </summary>
            <param name="glyph"></param>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.GetSortedCollection(TallComponents.PDF.Base.Geom.AffineTransform,TallComponents.PDF.TextExtraction.IGlyphComparer)">
            <summary>
            Sort the glyphs, while taking into account the viewer transformation.
            </summary>
            <param name="viewerTransformation">The viewer transformation to take into account.</param>
            <param name="comparer">The comparer to use.</param>
            <returns>
            A sorted collection of the orginal glyphs.
            </returns>
            <remarks>This assumes that the collection maintains an order.</remarks>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.GlyphCollection.GetClonedCollection">
            <summary>
            Note that the glyphs are not cloned, the collection only.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TallComponents.PDF.TextExtraction.GlyphPositionComparer">
            <summary>
            Summary description for GlyphPositionComparer.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.TextExtraction.ProgressEventArgs">
            <summary>
            Provides data for the Progress event of a TextMatchEnumerator.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.ProgressEventArgs.Page">
            <summary>
            The new page, used to find text.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.ProgressEventArgs.TotalPages">
            <summary>
            The total number of pages used to find text.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.ProgressEventArgs.CurrentIndex">
            <summary>
            The new (zero-based) page index in the pages to search in to find text.
            </summary>
            <remarks>
            Note that this doesn't indicated the document.Pages[ index ]. 
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.TextExtraction.TextFindCriteria">
            <summary>
            Defines criteria what text must be found.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.TextFindCriteria.#ctor">
            <summary>
            Create a TextFindCriteria object with default properties.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.TextFindCriteria.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Create a TextFindCriteria object with given properties.
            </summary>
            <param name="text">Find this text.</param>
            <param name="matchWholeWord">Find only whole occurrences.</param>
            <param name="matchCase">Find only occurrences that match case.</param>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.TextFindCriteria.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a TextFindCriteria object with given properties.
            </summary>
            <param name="text">Find this text.</param>
            <param name="matchWholeWord">Find only whole occurrences.</param>
            <param name="matchCase">Find only occurrences that match case.</param>
            <param name="backwards">Search backwards (otherwise forwards).</param>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextFindCriteria.Text">
            <summary>
            Find this text. (default = [null])
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextFindCriteria.MatchWholeWord">
            <summary>
            Match whole word only. (default = false)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextFindCriteria.MatchCase">
            <summary>
            Match case. (default = false)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextFindCriteria.Backwards">
            <summary>
            Search backwards. (default = false)
            </summary>
        </member>
        <member name="T:TallComponents.PDF.TextExtraction.TextInfo">
            <summary>
            A piece of text that is rendered with a single set of characteristics.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextInfo.Font">
            <summary>
            The font that is used to render this text.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextInfo.FontHeight">
            <summary>
            The (alternative/SubstitutionFont) height. (divide by 1000 and multiple by font size to get in points)
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextInfo.FontSize">
            <summary>
            The font size in points that is used to render this text.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextInfo.Transform">
            <summary>
            The matrix that transforms the displacements and widths of the characters inside this text
            into the page coordinate system.
            </summary>
            <remarks>This matrix accounts for text rise (e.g. for super- and subscript text).</remarks>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextInfo.Characters">
            <summary>
            The characters and their respective displacements and widths inside this text.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextInfo.ClippingRegion">
            <summary>
            The clipping region as specified when this TextInfo was build.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextInfo.Pen">
            <summary>
            The pen as specified when this TextInfo was build.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextInfo.Brush">
            <summary>
            The brush as specified when this TextInfo was build.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.TextExtraction.TextMatch">
            <summary>
            Represents a single occurrence that matches a text search.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextMatch.FindCriteria">
            <summary>
            The TextFindCriteria that resulted into this match.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextMatch.Page">
            <summary>
            The page that contains this match.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextMatch.Glyphs">
            <summary>
            The glyphs in this match.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.TextExtraction.TextMatchEnumerator">
            <summary>
            Enumerates all text matches as returned by Document.Find or Page.Find.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.TextExtraction.TextMatchEnumerator.Progress">
            <summary>
            Fired before the content for a next page is searched.
            </summary>
            <remarks>
            When the Find is done on Page base, this event will be fired once, just before the page is searched.
            In this context this event is not very usefull.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.TextMatchEnumerator.normalize(System.String)">
            <summary>
            Replace sequences of whitespace or control characters bij a single space.
            </summary>
            <param name="text">The text that needs normalization.</param>
            <returns>The normalized text.</returns>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.TextMatchEnumerator.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.TextMatchEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the text matches.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.TextMatchEnumerator.Reset">
            <summary>
            Resets the enumerator before the first item. After calling MoveNext, Current points
            to the first text match.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.TextExtraction.TextMatchEnumerator.Current">
            <summary>
            Gets the text match currently indexed by this instance.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.TextExtraction.TextMatchEnumerator.MoveNext">
            <summary>
            Move to the next text match. After calling this method, Current only points to a valid
            object if this method returns true.
            </summary>
            <returns>True if and only if next text match is found.</returns>
        </member>
        <member name="T:TallComponents.PDF.XfaInfo">
            <summary>
            This class contains additional XFA specific information for this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.XfaInfo.HasDataConnections">
            <summary>
            Whether or not this document has data connections.
            </summary>
            <remarks>
            Data connections are not supported, so make sure you use documents without data connections.  
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.XfaInfo.XFATemplate">
            <summary>
            This property defines in which form the dynamic XFA document should be saved.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.FormFieldsUsageRights">
            <summary>
            Form-fields-related usage rights.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.FormFieldsUsageRights.None">
            <summary>
            None of the usage rights are enabled.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.FormFieldsUsageRights.Unknown">
            <summary>
            The uage rights are unknown (the rights are saved by an unknown version)
            </summary>
        </member>
        <member name="F:TallComponents.PDF.FormFieldsUsageRights.FillIn">
            <summary>
            Permits the user to save a document on which form fill-in has been done.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.FormFieldsUsageRights.Import">
            <summary>
            Permits the user to import form data (FDF, XFDF and text (CSV/TVS) formats only).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.FormFieldsUsageRights.Export">
            <summary>
            Permits the user to export form data (FDF and XFDF formats only).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.FormFieldsUsageRights.SubmitStandalone">
            <summary>
            Permits the user to submit data when the document is not open in a web browser.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.FormFieldsUsageRights.SpawnTemplate">
            <summary>
            Permits new pages to be instanciated from named page templates.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.FormFieldsUsageRights.BarcodePlaintext">
            <summary>
            Permits text form field data to be encoded in a 2D barcode.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.FormFieldsUsageRights.Online">
            <summary>
            Permits the use of forms-specific online meganisms (like SOAP or Active Data Objects). 
            </summary>
        </member>
        <member name="F:TallComponents.PDF.FormFieldsUsageRights.ModifySignatures">
            <summary>
            Permits a user to apply a digital signature to an existing signature form field or clear a signed signature field.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.DocumentUsageRights">
            <summary>
            Document level usage rights.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.DocumentUsageRights.None">
            <summary>
            None of the usage rights are enabled.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.DocumentUsageRights.Unknown">
            <summary>
            The uage rights are unknown (the rights are saved by an unknown version)
            </summary>
        </member>
        <member name="F:TallComponents.PDF.DocumentUsageRights.FullSave">
            <summary>
            The document can be saved with modified form fields and/or annotations.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.PageCloneSettings">
            <summary>
            PageCloneSettings specifies what and how to clone a page.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.PageCloneSettings.None">
            <summary>
            None of the flags are set (value = 0).
            </summary>
        </member>
        <member name="F:TallComponents.PDF.PageCloneSettings.Actions">
            <summary>
            Clones Actions
            </summary>
        </member>
        <member name="F:TallComponents.PDF.PageCloneSettings.Shapes">
            <summary>
            Clones all Shapes included in the Canvas from the [Visual]Underlay and [Visual]Overlay.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.PageCloneSettings.Widgets">
            <summary>
            Clones Widgets including Fields
            </summary>
        </member>
        <member name="F:TallComponents.PDF.PageCloneSettings.NoOriginalGraphics">
            <summary>
            Force the skip cloning the original graphics (content).
            </summary>
        </member>
        <member name="T:TallComponents.PDF.PageCollection">
            <summary>
            Collection of pages inside a PDF document. 
            Non-creatable. Obtained through the Pages property of Document.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.PageCollection.Changed">
            <summary>
            Raised after this collection has changed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PageCollection.Item(System.Int32)">
            <summary>
            Retrieve a page by 0-based index.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.PageCollection.Count">
            <summary>
            Number of pages.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.Add(TallComponents.PDF.Page)">
            <summary>
            Add a new or existing page to end of this collection. 
            </summary>
            <param name="page">The source page.</param>
            <returns>
            The <see cref="T:TallComponents.PDF.PageCollection"/> index at which the <see cref="T:TallComponents.PDF.Page"/> has been added.
            </returns>
            <remarks>
            While appending existing pages to a target document, the source documents need to be open until the target document.Write is called.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.Remove(TallComponents.PDF.Page)">
            <summary>
            Removes a page from the collection.
            </summary>
            <param name="page">The page to be removed.</param>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.AddRange(TallComponents.PDF.Page[])">
            <summary>
            Adds the entries in an array of <see cref="T:TallComponents.PDF.Page">Pages</see> to the end of the <see cref="T:TallComponents.PDF.PageCollection">PageCollection</see>.
            </summary>
            <param name="pages">The <see cref="T:TallComponents.PDF.Page">pages</see> to be added to the end of the <see cref="T:TallComponents.PDF.PageCollection"/>.</param>
            <remarks>
            <para>
            <see cref="T:TallComponents.PDF.Page">Pages</see> does not accept a <see langword="null"/> as a valid value. 
            </para>
            <para>
            <see cref="T:TallComponents.PDF.PageCollection">PageCollection</see> does not accept duplicate elements.
            Note: When a duplicate entry is found the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)
            </para>
            <para>
            While appending existing pages to a target document, the source documents need to be open until the target document.Write is called.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A given <paramref name="pages"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">(At least) one of the entries in the given <paramref name="pages"/> is already in this <see cref="T:TallComponents.PDF.PageCollection"/>. (Duplicate <paramref name="pages"/>)</exception>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.Insert(System.Int32,TallComponents.PDF.Page)">
            <summary>
            Insert a new or existing page in this collection at the given index. 
            </summary>
            <param name="index">The zero-based index the page will get.</param>
            <param name="page">The source page.</param>
            <remarks>
            While inserting existing pages to a target document, the source documents need to be open until the target document.Write is called.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.InsertRange(System.Int32,TallComponents.PDF.Page[])">
            <summary>
            Insert the entries in an array of <see cref="T:TallComponents.PDF.Page">Pages</see> to the specific locations in the <see cref="T:TallComponents.PDF.PageCollection">PageCollection</see>.
            </summary>
            <param name="index">The zero based start index for the inserted pages.</param>
            <param name="pages">The <see cref="T:TallComponents.PDF.Page">pages</see> to be interted in the <see cref="T:TallComponents.PDF.PageCollection"/>.</param>
            <remarks>
            <para>
            <see cref="T:TallComponents.PDF.Page">Pages</see> does not accept a <see langword="null"/> as a valid value. 
            </para>
            <para>
            <see cref="T:TallComponents.PDF.PageCollection">PageCollection</see> does not accept duplicate elements.
            Note: When a duplicate entry is found the state of the collection is undefined.
            (None or some entries might have been added. The status is not reverted.)
            </para>
            <para>
            While interting existing pages to a target document, the source documents need to be open until the target document.Write is called.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">A given <paramref name="pages"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">(At least) one of the entries in the given <paramref name="pages"/> is already in this <see cref="T:TallComponents.PDF.PageCollection"/>. (Duplicate <paramref name="pages"/>)</exception>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a page from the collection.
            </summary>
            <param name="index">The zero-based index for the page to be removed.</param>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.RemoveRange(TallComponents.PDF.Page[])">
            <summary>
            Removes multiple pages from the collection.
            </summary>
            <param name="pages">The pages to remove</param>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes multiple contiguous pages from the collection.
            </summary>
            <param name="startIndex">The zero-based start index for the page to be removed.</param>
            <param name="count">The number of contiguous pages to be removed.</param>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.Clear">
            <summary>
            Removes all pages from the <see cref="T:TallComponents.PDF.PageCollection">PageCollection</see>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.Contains(TallComponents.PDF.Page)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Page">Page</see> is in the <see cref="T:TallComponents.PDF.PageCollection">PageCollection</see>.
            </summary>
            <param name="page">The <see cref="T:TallComponents.PDF.Page"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Page"/> is found in this <see cref="T:TallComponents.PDF.PageCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="page"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="page"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves an existing page to an other position.
            </summary>
            <param name="fromIndex">The zero-based index from the page to move.</param>
            <param name="toIndex">The zero-based index for the new position.</param>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.IndexOf(TallComponents.PDF.Page)">
            <summary>
            Returns the zero-based index of the given page.
            </summary>
            <remarks>
            Returns -1 if not found.
            </remarks>
            <param name="page">The page to be indexed.</param>
            <returns>the zero-based index of the given page, or -1 if not found.</returns>   
        </member>
        <member name="M:TallComponents.PDF.PageCollection.CloneToArray">
            <summary>
            Clones this PageCollection with default clone settings.
            </summary>
            <returns>A page[] array.</returns>
            <remarks>
            This function doesn't return a PageCollection, but a Page[].
            The pages in the array are not bound to any PageCollection.
            <p>
            Default clone settings: PageCloneSettings.Actions | PageCloneSettings.Shapes | PageCloneSettings.Widgets
            </p>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.CloneToArray(TallComponents.PDF.PageCloneSettings)">
            <summary>
            Clones this PageCollection with the specified clone settings.
            </summary>
            <param name="cloneSettings">The clone settings.</param>
            <returns>A page[] array.</returns>
            <remarks>
            This function doesn't return a PageCollection, but a Page[].
            The pages in the array are not bound to any PageCollection.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.CloneToArray(System.String)">
            <summary>
            Clones this PageCollection with the default clone settings but prefix the field fullNames.
            </summary>
            <param name="fieldPrefix">The fieldprefix to use (null or string.Empty means: no prefix)</param>
            <returns>A page[] array.</returns>
            <remarks>
            This function doesn't return a PageCollection, but a Page[].
            The pages in the array are not bound to any PageCollection.
            <p>
            Default clone settings: PageCloneSettings.Actions | PageCloneSettings.Shapes | PageCloneSettings.Widgets
            </p>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.CloneToArray(TallComponents.PDF.PageCloneSettings,System.String)">
            <summary>
            Clones this PageCollection with the specified clone settings and prefix the field fullNames.
            </summary>
            <param name="cloneSettings">The clone settings.</param>
            <param name="fieldPrefix">The fieldprefix to use (null or string.Empty means: no prefix)</param>
            <returns>A page[] array.</returns>
            <remarks>
            This function doesn't return a PageCollection, but a Page[].
            The pages in the array are not bound to any PageCollection.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.getPage(TallComponents.PDF.Base.IndirectReference)">
            <summary>
            Resolve the pageReference to a Page object.
            </summary>
            <param name="pageReference">The page reference to resolve.</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.PDF.PageCollection.insert(System.Int32,TallComponents.PDF.Page)">
            <summary>
            insert a page in this collection, without raising any event.
            </summary>
            <param name="index">The zero based index for the inserted page.</param>
            <param name="page">The source page.</param>
            <remarks>
            While appending existing pages to a target document, the source documents need to be open until the target document.Write is called.
            </remarks>  
        </member>
        <member name="M:TallComponents.PDF.PageCollection.remove(TallComponents.PDF.Page)">
            <summary>
            removes a page from this collection, without raising any event.
            </summary>
            <param name="page">the page to be removed.</param>  
        </member>
        <member name="T:TallComponents.PDF.Update">
            <summary>
            An update object.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Update.#ctor(TallComponents.PDF.UpdateCollection,TallComponents.PDF.Base.FileStructure.Update)">
            <summary>
            Create a new <see cref="T:TallComponents.PDF.Update"/>.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Update.Index">
            <summary>
            The 0 based index of this update in the document.Updates collection.
            </summary>
            <remarks>
            If the update is not added to any collection, -1 is returned.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Update.Write(System.IO.Stream)">
            <summary>
            Write this update of the document to a stream, eg a FileStream or MemoryStream.
            </summary>
            <param name="stream">Write the document to this stream.</param>
        </member>
        <member name="M:TallComponents.PDF.Update.Write(System.IO.BinaryWriter)">
            <summary>
            Write this update of the document to any writer.
            </summary>
            <param name="binaryWriter">Write the document to this writer.</param>
        </member>
        <member name="T:TallComponents.PDF.UpdateCollection">
            <summary>
            An update collection.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.UpdateCollection.#ctor(TallComponents.PDF.Base.DocumentStructure.Document)">
            <summary>
            Create a new <see cref="T:TallComponents.PDF.UpdateCollection"/>.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.UpdateCollection.Contains(TallComponents.PDF.Update)">
            <summary>
            Determine whether an <see cref="T:TallComponents.PDF.Update">update</see> is in the <see cref="T:TallComponents.PDF.UpdateCollection">UpdateCollection</see>.
            </summary>
            <param name="update">The <see cref="T:TallComponents.PDF.Update"/> to verify.</param>
            <returns>True if the <see cref="T:TallComponents.PDF.Update"/> is found in this <see cref="T:TallComponents.PDF.UpdateCollection"/>, false otherwise.</returns>
            <remarks>
            The <paramref name="update"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="update"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.PDF.UpdateCollection.IndexOf(TallComponents.PDF.Update)">
            <summary>
            Searches for the specified <see cref="T:TallComponents.PDF.Update">Update</see> in the <see cref="T:TallComponents.PDF.UpdateCollection">UpdateCollection</see>.
            </summary>
            <param name="update">The <see cref="T:TallComponents.PDF.Update"/> to locate in the <see cref="T:TallComponents.PDF.UpdateCollection"/>.</param>
            <returns>The zero-based index at which the <see cref="T:TallComponents.PDF.Update"/> is found, -1 if not found.</returns>
        </member>
        <member name="P:TallComponents.PDF.UpdateCollection.Item(System.Int32)">
            <summary>
            Get an <see cref="T:TallComponents.PDF.Update">Update</see> by zero-based index from the <see cref="T:TallComponents.PDF.UpdateCollection">UpdateCollection</see>. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.UpdateCollection.Count">
            <summary>
            Get the number of <see cref="T:TallComponents.PDF.Update">Update</see>s actually contained in the <see cref="T:TallComponents.PDF.UpdateCollection">UpdateCollection</see>
            </summary>
        </member>
        <member name="M:TallComponents.PDF.UpdateCollection.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.PDF.UpdateCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="T:TallComponents.PDF.UsageRights">
            <summary>
            The Usage Rights for this document.
            </summary>
            <remarks>
            Note that we cannot check if the rights are valid; only that they are present.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.UsageRights.Message">
            <summary>
            The Reason for adding usage rights to the document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.UsageRights.Document">
            <summary>
            Document-wide usage rights.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.UsageRights.Annotations">
            <summary>
            Annotation related usage rights.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.UsageRights.FormFields">
            <summary>
            Form-Fields related usage rights.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.DocumentWriteMode">
            <summary>
            Different document write modes.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.DocumentWriteMode.Compact">
            <summary>
            Instead of appending an update only, the document is completely rewitten.
            <para>
            Note that existing signed signature fields will be invalidated.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.DocumentWriteMode.AppendUpdate">
            <summary>
            Only an update is appended to this existing document.
            <para>
            A new document will be written in Compact mode since this will be the first update.
            Existing document will be forced to append changes only.
            </para>
            <para>
            Supported features:
            <list type="bullet">
             <item>Changes in Metadata.</item>
             <item>Changes in DocumentInfo.</item>
             <item>Removing, adding or moving Pages.</item>
             <item>Adding Shapes to pages.</item>
             <item>Changes in Actions (except the Bookmark actions).</item>
             <item>Changes in NamedDestinations.</item>
             <item>Changes in document level JavaScripts.</item>
             <item>Changes in Widgets.</item>
             <item>Changes in Fields (including signing an additional signature field, see signature field for details).</item>
             <item>Changes in Bookmarks.</item>
             <item>Changes in ViewerPreferences.</item>
            </list>
            </para>
            <para>
            Note: You should not change the Security, otherwise an incorrect document will be written.
            </para>
            </summary>
        </member>
        <member name="F:TallComponents.PDF.DocumentWriteMode.Auto">
            <summary>
            The document is writen eighter Full or AppendUpdate, depending if a 
            signed signature is already embedded in the document or the document is marked 
            that it allows to have updates only.
            <para>
            New document will be written in Compact mode.
            Existing document will be written in Full mode if possible,
            otherwise AppendUpdate mode will be used.
            </para>
            </summary>
        </member>
        <member name="T:TallComponents.PDF.Document">
            <summary>
            The Document class is the top-level class in the TallComponents.PDF namespace.
            It represents an existing or new PDF document.
            </summary>
        </member>
        <member name="E:TallComponents.PDF.Document.GotoDestination">
            <summary>
            Raised when the document requests viewers to go to the specified
            destination.
            </summary>
            <remarks>This event typically gets triggered by javascript code.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.#ctor">
            <summary>
            Creates a new document.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Document.#ctor(System.IO.BinaryReader)">
            <summary>
            Opens an existing document.
            </summary>
            <param name="reader">The reader from which the document is read.</param>
            <remarks>
            <para>The document should have no open password set.</para>
            <para>This method gives you full control how the document is read. It requires
            that the binary reader remains open during the lifetime of the document.</para>
            <para>
            Provided that the argument binary reader is seekable, information will be read from the PDF file on demand.
            E.g. if one hits page 10 , we seek to the correct position, skipping all other pages, and we return page 10. When
            after that one request say page 5 we seek back and read that page. This means that one
            should not close/dispose the binary reader during the hole session one needs the document,
            or pages, bookmarks, info extracted from it.
            </para><para>
            If the binary reader is not seekable, we will read information eagerly, i.e. the entire document will first
            be read into memory before we access it.
            </para>
            </remarks>
            <example>
            Sample code:
            <code>
            FileStream fileStream = new FileStream( @"in.pdf", FileMode.Open, FileAccess.Read );
            BinaryReader reader = new BinaryReader( fileStream );
            Document source = new Document( reader );
            </code>
            </example>
        </member>
        <member name="M:TallComponents.PDF.Document.#ctor(System.IO.BinaryReader,TallComponents.PDF.OpenOptions)">
            <summary>
            Opens an existing document.
            </summary>
            <param name="reader">The reader from which the document is read.</param>
            <param name="options">Options for opening the document.</param>
            <remarks>
            <para>The document should have no open password set.</para>
            <para>This method gives you full control how the document is read. It requires
            that the binary reader remains open during the lifetime of the document.</para>
            <para>
            When using the BinaryReader we will read information you need on demand only (note: you should not close/dispose the stream and/or binaryreader during the hole session you need the document, or pages, bookmarks, info extracted from it.), so when you hit page 10 , we skip (internally we seek to the correct position) all other pages and return you page 10. When you after that request say page 5 we seek back and read that page.
            In this mode we do not read more information than needed, we do not read the whole document in memory either.
            </para>
            <para>
            Using is very simple, sample code:
            FileStream fileStream = new FileStream( @"in.pdf", FileMode.Open, FileAccess.Read );
            BinaryReader reader = new BinaryReader( fileStream );
            Document source = new Document( reader );
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.#ctor(System.IO.BinaryReader,System.String)">
            <summary>
            Opens an existing password-protected document.
            </summary>
            <param name="reader">The reader from which the document is read.</param>
            <param name="password">The password that is required to open this document.</param>
            <remarks>
            <para>This method gives you full control how the document is read. It requires
            that the binary reader remains open during the lifetime of the document.</para>
            <para>
            Provided that the argument binary reader is seekable, information will be read from the PDF file on demand.
            E.g. if one hits page 10 , we seek to the correct position, skipping all other pages, and we return page 10. When
            after that one request say page 5 we seek back and read that page. This means that one
            should not close/dispose the binary reader during the hole session one needs the document,
            or pages, bookmarks, info extracted from it.
            </para><para>
            If the binary reader is not seekable, we will read information eagerly, i.e. the entire document will first
            be read into memory before we access it.
            </para>
            </remarks>
            <example>
            Sample code:
            <code>
            FileStream fileStream = new FileStream( @"in.pdf", FileMode.Open, FileAccess.Read );
            BinaryReader reader = new BinaryReader( fileStream );
            Document source = new Document( reader, "MyPassword" );
            </code>
            </example>
        </member>
        <member name="M:TallComponents.PDF.Document.#ctor(System.IO.Stream)">
            <summary>
            Opens an existing document.
            </summary>
            <param name="stream">The stream from which the document is read.</param>
            <remarks>
            <para>The document should have no open password set.</para>
            <para>This method gives you full control how the document is read. It requires
            that the stream remains open during the lifetime of the document.</para>
            <para>
            Provided that the argument stream is seekable, information will be read from the PDF file on demand.
            E.g. if one hits page 10 , we seek to the correct position, skipping all other pages, and we return page 10. When
            after that one request say page 5 we seek back and read that page. This means that one
            should not close/dispose the stream during the hole session one needs the document,
            or pages, bookmarks, info extracted from it.
            </para><para>
            If the stream is not seekable, we will read information eagerly, i.e. the entire document will first
            be read into memory before we access it.
            </para>
            </remarks>
            <example>
            Sample code:
            <code>
            FileStream fileStream = new FileStream( @"in.pdf", FileMode.Open, FileAccess.Read );
            Document source = new Document( fileStream );
            </code>
            </example>
        </member>
        <member name="M:TallComponents.PDF.Document.#ctor(System.IO.Stream,System.String)">
            <summary>
            Opens an existing password-protected document.
            </summary>
            <param name="stream">The stream from which the document is read.</param>
            <param name="password">Password that is required to open this document.</param>
            <remarks>
            <para>This method gives you full control how the document is read. It requires
            that the stream remains open during the lifetime of the document.</para>
            <para>
            Provided that the argument stream is seekable, information will be read from the PDF file on demand.
            E.g. if one hits page 10 , we seek to the correct position, skipping all other pages, and we return page 10. When
            after that one request say page 5 we seek back and read that page. This means that one
            should not close/dispose the stream during the hole session one needs the document,
            or pages, bookmarks, info extracted from it.
            </para><para>
            If the stream is not seekable, we will read information eagerly, i.e. the entire document will first
            be read into memory before we access it.
            </para>
            </remarks>
            <example>
            Sample code:
            <code>
            FileStream fileStream = new FileStream( @"in.pdf", FileMode.Open, FileAccess.Read );
            Document source = new Document( fileStream, "MyPassword" );
            </code>
            </example>
        </member>
        <member name="M:TallComponents.PDF.Document.#ctor(System.IO.Stream,TallComponents.PDF.OpenOptions)">
            <summary>
            Open an existing PDF document with given options.
            </summary>
            <param name="stream">The stream from which the document is read.</param>
            <param name="options">Options for opening the document.</param>
        </member>
        <member name="P:TallComponents.PDF.Document.DocumentType">
            <summary>
            Type of document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.XfaInfo">
            <summary>
            Additional XFA specific information for this document.
            </summary>
            <remarks>
            Returns null for non-xfa / classic documents.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.Import(TallComponents.PDF.Forms.Data.FormData)">
            <summary>
            Import data from a FormData object.
            </summary>
            <param name="formData">The form data to import.</param>
            <remarks>
            Missing fields will not be cleared.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.Import(TallComponents.PDF.Forms.Data.FormData,System.Boolean)">
            <summary>
            Import data from a FormData object.
            </summary>
            <param name="formData">The form data to import.</param>
            <param name="clearMissingFields"></param>
        </member>
        <member name="M:TallComponents.PDF.Document.Export(TallComponents.PDF.Actions.SubmitFormat,System.Boolean)">
            <summary>
            Export data into a FormData object.
            </summary>
            <param name="format">The form data format to export.</param>
            <param name="exportEmpty">Specifies if empty fields must be exported as well.</param>
        </member>
        <member name="M:TallComponents.PDF.Document.PasswordRequired(System.IO.BinaryReader)">
            <summary>
            This method checks if a password is required to open this document.
            </summary>
            <param name="reader">Read the document from this reader.</param>
            <returns>True if a password is required, otherwise false.</returns>
            <remarks>
            This method does not use exceptions.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.Rewrite(System.IO.Stream,System.IO.Stream,TallComponents.PDF.ReduceOptions)">
            <summary>
            Rewrite a given PDF using optionally using algorithms to reduce the file size
            </summary>
            <param name="instream">The stream of the input PDF</param>
            <param name="outstream">The stream of the ouput PDF</param>
            <param name="reducerOptions">Reducer controll flags</param>
        </member>
        <member name="M:TallComponents.PDF.Document.Rewrite(System.IO.Stream,System.IO.Stream,TallComponents.PDF.ReduceOptions,System.String)">
            <summary>
            Rewrite a given PDF using optionally using algorithms to reduce the file size
            </summary>
            <param name="instream">The stream of the input PDF</param>
            <param name="outstream">The stream of the ouput PDF</param>
            <param name="reducerOptions">Reducer controll flags</param>
            <param name="password">The open password</param>
        </member>
        <member name="M:TallComponents.PDF.Document.Write(System.IO.Stream,TallComponents.PDF.WriteOptions)">
            <summary>
            Write this document to a stream given provided write options.
            </summary>
            <param name="stream">Write to this stream. Note that the caller is responsible for closing this stream.</param>
            <param name="options"></param>
        </member>
        <member name="M:TallComponents.PDF.Document.Write(System.Web.HttpResponse)">
            <summary>
            Write the modified document to a HTTP response.
            </summary>
            <param name="response">Write the document to this writer.</param>
            <remarks>
             This includes: clearing, setting ContentType, setting ContentEncoding and flushing and closing the response.
             This function should not be used when the document is signed.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.Write(System.Web.HttpResponse,TallComponents.PDF.DocumentWriteMode)">
            <summary>
            Write the modified document to a HTTP response.
            </summary>
            <param name="response">Write the document to this writer.</param>
            <param name="writeMode">The write mode to use.</param>
            <remarks>
             This includes: clearing, setting ContentType, setting ContentEncoding and flushing and closing the response.
             This function should not be used when the document is signed.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.Write(System.IO.Stream)">
            <summary>
            Write the modified document to a stream, eg a FileStream or MemoryStream.
            </summary>
            <param name="stream">Write the document to this stream.</param>
            <remarks>
            For signing support you must be sure the stream is seekable.
            If the stream is writable only (eg Response.OutputStream) an exception will be raised.
            The stream is flushed before this method returns.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.Write(System.IO.Stream,TallComponents.PDF.DocumentWriteMode)">
            <summary>
            Write the modified document to a stream, eg a FileStream or MemoryStream.
            </summary>
            <param name="stream">Write the document to this stream.</param>
            <param name="writeMode">The write mode to use.</param>
            <remarks>
            <para>
            Note that you cannot write more than once on the same document instance.
            After calling Document.Write() information in this instance can be incorrect.
            </para>
            <para>
            For signing support you must be sure the underlaying output stream is seekable.
            If the stream is writable only (eg Response.OutputStream) an exception will be raised.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.Write(System.IO.Stream,System.Boolean)">
            <summary>
            Write the modified document to a stream, eg a FileStream or MemoryStream.
            </summary>
            <param name="stream">Write the document to this stream.</param>
            <param name="keepOpen">Keep the document open after writing.</param>
            <remarks>
            <para>
            For signing support you must be sure the stream is seekable.
            If the stream is writable only (eg Response.OutputStream) an exception will be raised.
            The stream is flushed before this method returns.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.Write(System.IO.Stream,TallComponents.PDF.DocumentWriteMode,System.Boolean)">
            <summary>
            Write the modified document to a stream, eg a FileStream or MemoryStream.
            </summary>
            <param name="stream">Write the document to this stream.</param>
            <param name="writeMode">The write mode to use.</param>
            <param name="keepOpen">Keep the document open after writing.</param>
            <remarks>
            <para>
            For signing support you must be sure the stream is seekable.
            If the stream is writable only (eg Response.OutputStream) an exception will be raised.
            The stream is flushed before this method returns.
            </para>
            <para>
            If keepOpen is false, you cannot write more than once on the same document
            instance. After calling Document.Write() information in this instance can
            be incorrect.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.Write(System.IO.BinaryWriter)">
            <summary>
            Write the modified document to any writer.
            </summary>
            <param name="binaryWriter">Write the document to this writer.</param>
            <remarks>
            <para>
            Note that this allows you to write the document to a file, HTTP response or memory with full control.
            </para>
            <para>
            Note that you cannot write more than once on the same document instance.
            After calling Document.Write() information in this instance can be incorrect.
            </para>
            <para>
            For signing support you must be sure the stream is seekable.
            If the stream is writable only (eg Response.OutputStream) an exception will be raised.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.Write(System.IO.BinaryWriter,TallComponents.PDF.DocumentWriteMode)">
            <summary>
            Write the modified document to any writer.
            </summary>
            <param name="binaryWriter">Write the document to this writer.</param>
            <param name="writeMode">The write mode to use.</param>
            <remarks>
            <para>
            Note that this allows you to write the document to a file, HTTP response or memory with full control.
            </para>
            <para>
            Note that you cannot write more than once on the same document instance.
            After calling Document.Write() information in this instance can be incorrect.
            </para>
            <para>
            For signing support you must be sure the underlaying output stream is seekable.
            If the stream is writable only (eg Response.OutputStream) an exception will be raised.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.Write(System.IO.BinaryWriter,System.Boolean)">
            <summary>
            Write the modified document to any writer.
            </summary>
            <param name="binaryWriter">Write the document to this writer.</param>
            <param name="keepOpen">Keep the document open after writing.</param>
            <remarks>
            <para>
            Note that this allows you to write the document to a file, HTTP response or memory with full control.
            </para>
            <para>
            If keepOpen is false, you cannot write more than once on the same document
            instance. After calling Document.Write() information in this instance can
            be incorrect.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.Write(System.IO.BinaryWriter,TallComponents.PDF.DocumentWriteMode,System.Boolean)">
            <summary>
            Write the modified document to any writer.
            </summary>
            <param name="binaryWriter">Write the document to this writer.</param>
            <param name="writeMode">The write mode to use.</param>
            <param name="keepOpen">Keep the document open after writing.</param>
            <remarks>
            <para>
            Note that this allows you to write the document to a file, HTTP response or memory with full control.
            </para>
            <para>
            For signing support you must be sure the underlaying output stream is seekable.
            If the stream is writable only (eg Response.OutputStream) an exception will be raised.
            </para>
            <para>
            If keepOpen is false, you cannot write more than once on the same document
            instance. After calling Document.Write() information in this instance can
            be incorrect.
            </para>
            </remarks> 
        </member>
        <member name="M:TallComponents.PDF.Document.Write(System.IO.BinaryWriter,TallComponents.PDF.DocumentWriteMode,System.Boolean,System.Boolean)">
            <summary>
            Write the modified document to any writer.
            </summary>
            <param name="binaryWriter">Write the document to this writer.</param>
            <param name="writeMode">The write mode to use.</param>
            <param name="keepOpen">Keep the document open after writing.</param>
            <param name="pdfa">Whether we should insert a pdf/a XMP package.</param>
            <remarks>
            <para>
            Note that this allows you to write the document to a file, HTTP response or memory with full control.
            </para>
            <para>
            For signing support you must be sure the underlaying output stream is seekable.
            If the stream is writable only (eg Response.OutputStream) an exception will be raised.
            </para>
            <para>
            If keepOpen is false, you cannot write more than once on the same document
            instance. After calling Document.Write() information in this instance can
            be incorrect.
            </para>
            </remarks> 
        </member>
        <member name="M:TallComponents.PDF.Document.Find(TallComponents.PDF.TextExtraction.TextFindCriteria)">
            <summary>
            Find text in this document.
            </summary>
            <param name="findCriteria">Specifies find criteria.</param>
            <returns>An enumerator that lets you enumerate over all TextMatch elements</returns>
            <remarks>
            An enumerator is returned, not a collection, because the next TextMatch is evaluated lazily.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.Find(TallComponents.PDF.TextExtraction.TextFindCriteria,TallComponents.PDF.TextExtraction.IGlyphComparer,System.Boolean)">
            <summary>
            Find text in this document.
            </summary>
            <param name="findCriteria">Specifies find criteria.</param>
            <param name="glyphComparer">The custom glyph comparer.</param>
            <param name="transformGlyphs">If true, each glyph is transformed with the page transformation (orientation) before de glyph comparer is applied.</param>
            <returns>An enumerator that lets you enumerate over all TextMatch elements</returns>
            <remarks>
            An enumerator is returned, not a collection, because the next TextMatch is evaluated lazily.
            <para>
            If transformGlyphs is true, the glyphs are tranformed with the page transformation during sorting. This means that the compare function will
            see the glyph coordinates as if their origin is at the bottom left of the page view. If a page is rotated, the actual origin of the page will
            be in one of the other corners of the view. The returned glyphs however will contain the original glyphs coordinates, i.e. with respect to the
            page origin, not the view origin.
            </para>
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Document.Pages">
            <summary>
            Collection of pages in this document.
            </summary>
            <remarks>
            Not available when Type=XfaDynamic.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Document.Security">
            <summary>
            The security settings of this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.UsageRights">
            <summary>
            The usage rights this document contains.
            </summary>
            <remarks>
            Note that we do not verify if the usage rights are valid (granted); only if they are present.
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.ClearUsageRights">
            <summary>
            Clear the usage rights this document contains, if any.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.Fonts">
            <summary>
            The fonts used in this document. 
            </summary>
            <remarks>
            The fonts from the original source PDF are included only. 
            The fonts from shapes and newly created widgets (fields) are not included. 
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Document.EmbeddedFiles">
            <summary>
            The embedded files in this document. 
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.OutputIntents">
            <summary>
            The output intents that are defined in this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.Layers">
            <summary>
            The layers that are defined in this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.Bookmarks">
            <summary>
            The Bookmarks of this document
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.Version">
            <summary>
            The PDF version for this document;
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.DocumentInfo">
            <summary>
            Document Info for the document like Author, Title and Subject.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.ViewerPreferences">
            <summary>
            Viewer preferences of this document.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.Fields">
            <summary>
            All form fields inside this document.
            </summary>
            <remarks>
            Not available when Type=XfaDynamic.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Document.CalculationOrder">
            <summary>
            The order of the fields that need to be recalculated.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.MetadataSchemas">
            <summary>
            The XMP metadata for this document.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when value is set to <see langword="null"/>.</exception>
        </member>
        <member name="P:TallComponents.PDF.Document.NamedDestinations">
            <summary>
            Named Destinations defined at Document level.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.JavaScripts">
            <summary>
            Document level JavaScripts.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.Updates">
            <summary>
            The updates for this document.
            </summary>
            <remarks>
            Will return a collection with 0 elements if this is a new document.
            </remarks>
        </member>
        <member name="P:TallComponents.PDF.Document.OpenActions">
            <summary>
            Open actions are executed while a document is openening.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.BeforeSaveAction">
            <summary>
            Before save action is executed before a document will be saved.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.AfterSaveAction">
            <summary>
            After save action is executed after a document is saved.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.BeforePrintAction">
            <summary>
            Before print action is executed before a document will be printed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.AfterPrintAction">
            <summary>
            After print action is executed after a document is printed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.BeforeCloseAction">
            <summary>
            Before close action is executed before a document will be closed.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Document.ScriptBehavior">
            <summary>
            The script behavior for all fields in this document. (default = Format)
            </summary>
            <remarks>
            This property allows you to specify which scripts must be executed.
            When setting the property with calculate included, the script is executed. 
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.Calculate">
            <summary>
            Trigger to execute the calculate actions in the value fields.
            </summary>
            <remarks>
            You should call this function when you change at least one of the following items:
            <list type="bullet">
            <item>The calculate action in a ValueField.</item>
            <item>The JavaScript inside the calculate action.</item>
            <item>Document level JavaScript called by a calculate action.</item> 
            </list>
            <para>
            Note that this function is automatically called when you change a ValueField.Value.
            </para>
            </remarks>
        </member>
        <member name="M:TallComponents.PDF.Document.normalizeFieldsAndWidgets(TallComponents.PDF.Base.DocumentStructure.Document,System.Boolean)">
            <summary>
            Normalize the fields and widgets, meaning that merged widget-field instances are 
            splitted. Also required AS entries are inserted if missing.
            </summary>
            <param name="document">The document to normalize.</param>
            <param name="autoRepair">Setting for enabling/disabling Normalization.</param>
        </member>
        <member name="P:TallComponents.PDF.Document.Path">
            <summary>
            The path of the document. This is not always known. If it is, it is used to
            set /F entry of an exported FDF, and to resolve relative paths when executing
            the javascript importAn(X)fdf method. It is also used to return the value of
            the javascript documentFileName property.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Document.ReplacePagesAndFields(TallComponents.PDF.PageCollection,TallComponents.PDF.Forms.Fields.FieldCollection,System.Boolean)">
            <summary>
            This function is called by DynamicXFAProcessor when the dynamic content is generated
            </summary>
            <param name="pages"></param>
            <param name="fields"></param>
            <param name="notifyChanges"></param>
        </member>
        <member name="P:TallComponents.PDF.Document.Repaired">
            <summary>
            Returns whether the document was repaired.
            </summary>
        </member>
        <member name="T:TallComponents.PDF.DocumentType">
            <summary>
            Different document types.
            </summary>
        </member>
        <member name="F:TallComponents.PDF.DocumentType.Classic">
            <summary>
            This document is a classic document, compatible with Adobe Acrobat Form designer. 
            </summary>
            <remarks>
            This document does not contains XFA (compatible with Adobe Designer).
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.DocumentType.XfaStatic">
            <summary>
            This document has XFA (compatible with Adobe Designer). All forms are static.
            </summary>
            <remarks>
            Not all features are available in Acrobat 6.0. 
            To access all features, Acrobat 7.0 or higher is required.
            </remarks>
        </member>
        <member name="F:TallComponents.PDF.DocumentType.XfaDynamic">
            <summary>
            This document has XFA (compatible with Adobe Designer). One or more forms may be dynamic.
            </summary>
            <remarks>
            Not all features are available in Acrobat 6.0. 
            To access all features, Acrobat 7.0 or higher is required. 
            </remarks>
        </member>
        <member name="T:TallComponents.PDF.Version">
            <summary>
            Tuple that denotes the PDF version: (major, minor); e.g., (1.4) denotes version 1.4.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Version.#ctor(TallComponents.PDF.Base.DocumentStructure.Version)">
            <summary>
            Create version 
            </summary>
            <param name="version">The PDF version.</param>
        </member>
        <member name="P:TallComponents.PDF.Version.Major">
            <summary>
            The major version number.
            </summary>
        </member>
        <member name="P:TallComponents.PDF.Version.Minor">
            <summary>
            The minor version number.
            </summary>
        </member>
        <member name="M:TallComponents.PDF.Version.ToString">
            <summary>
            The string representation for this version.
            </summary>
            <returns>The string representation for this version.</returns>
        </member>
        <member name="T:TallComponents.Css.CssSelector">
            <summary>
            CSS 2.1 Selector.
            </summary>
            <remarks>
            CSS selectors look like this: <code>[context ]tag.class#id:state</code>
            For example: <code>p.footerclass#myid</code>
            The properties can be combined as needed. 
            </remarks>
        </member>
        <member name="P:TallComponents.Css.CssSelector.Tag">
            <summary>
            Get the tag for this selector.
            </summary>
            <remarks>
            Always null or lowercase and trimmed.
            </remarks>
        </member>
        <member name="P:TallComponents.Css.CssSelector.HasTag">
            <summary>
            Returns if the 'tag' is an 'empty' container.
            </summary>
            <returns>True if the tag is not null and not [empty] (empty includes *).</returns>
        </member>
        <member name="P:TallComponents.Css.CssSelector.Class">
            <summary>
            Get the class for this selector
            </summary>
            <remarks>
            Always null or lowercase and trimmed.
            </remarks>
        </member>
        <member name="P:TallComponents.Css.CssSelector.HasClass">
            <summary>
            Returns if the 'Class' is an 'empty' container.
            </summary>
            <returns>True if the class is not null and not [empty] (empty includes *).</returns>
        </member>
        <member name="P:TallComponents.Css.CssSelector.Id">
            <summary>
            Get the ID for this selector
            </summary>
            <remarks>
            Always null or lowercase and trimmed.
            </remarks>
        </member>
        <member name="P:TallComponents.Css.CssSelector.HasId">
            <summary>
            Returns if the 'id' is an 'empty' container.
            </summary>
            <returns>True if the id is not null and not [empty] (empty includes *).</returns>
        </member>
        <member name="P:TallComponents.Css.CssSelector.DefaultSelector">
            <summary>
            Use this selector if the default value has to be determined.
            </summary>
        </member>
        <member name="M:TallComponents.Css.CssSelector.ToString">
            <summary>
            Get the formatted string for the selector.
            </summary>
            <returns>The formatted string for this selector.</returns>
        </member>
        <member name="M:TallComponents.Css.CssSelector.FormatSelector(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get the formatted string for the selector.
            </summary>
            <param name="selectTag">The tag name. <see langword="null"/>, empty or * if not included.</param>
            <param name="selectClass">The class name. <see langword="null"/> or empty if not included.</param>
            <param name="selectId">The selector ID. <see langword="null"/> or empty is not included.</param>
            <param name="important">The important flag for the selector.</param>
            <returns>The formatted text-representation in the format: &quot;!tag.class#id&quot;.</returns>
        </member>
        <member name="M:TallComponents.Css.CssSelector.hasValue(System.String)">
            <summary>
            Tests if the string to test is an 'empty' container.
            </summary>
            <param name="test">The string to test.</param>
            <returns>True if the teststring is not null and not [empty] (empty includes *).</returns>
        </member>
        <member name="T:TallComponents.Css.CssSelectorEnumerator">
            <summary>
            CssSelector enumerator that enumerates through all priorities of the selector.
            </summary>
        </member>
        <member name="M:TallComponents.Css.CssSelectorEnumerator.#ctor(TallComponents.Css.CssSelector)">
            <summary>
            Creates a new instance of the CssSelectorEnumerator.
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssSelectorEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current enumeration value.
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssSelectorEnumerator.Current">
            <summary>
            Gets the current enumeration value.
            </summary>
        </member>
        <member name="M:TallComponents.Css.CssSelectorEnumerator.System#IDisposable#Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:TallComponents.Css.CssSelectorEnumerator.MoveNext">
            <summary>
            Moves the enumerator to the next item/element.
            </summary>
            <remarks>For efficiency the 'empty' items are skipped. First checks if Important ones are set.</remarks>
            <returns>True if there are more elements.</returns>
        </member>
        <member name="M:TallComponents.Css.CssSelectorEnumerator.Reset">
            <summary>
            Resets the current enumerator
            </summary>
        </member>
        <member name="T:TallComponents.Css.CssStyle">
            <summary>
            Handler to access CSS Properties when using the CSS 2.1 style definition.
            </summary>
            <remarks>This class is intended for accessing the properties and 
            applying overrides that are needed on that level only. Base styles should be 
            specified seperately and 'given' to the lowest level. </remarks>
        </member>
        <member name="M:TallComponents.Css.CssStyle.#ctor">
            <summary>
            Construct a CssStyle from a textual style definition.
            </summary>
            <example>new CssStyle("font: Helvetica; font-size: 12pt")</example>
        </member>
        <member name="M:TallComponents.Css.CssStyle.#ctor(TallComponents.Css.CssStyle)">
            <summary>
            Construct a CssStyle from a textual style definition.
            </summary>
            <remarks>Use this constructor when nesting into the next deeper 
            level in a (x)html file.</remarks>
            <example>new CssStyle(parent)</example>
            <param name="parent">Parent CssStyle</param>
        </member>
        <member name="M:TallComponents.Css.CssStyle.#ctor(TallComponents.Css.CssStyleSheet)">
            <summary>
            Construct a CssStyle from a textual style definition.
            </summary>
            <remarks>Use this constructor when starting to process a (x)html file.</remarks>
            <example>new CssStyle("font: Helvetica; font-size: 12pt", parent)</example>
            <param name="parentStyleSheet">The root style sheet to use (user level).</param>
        </member>
        <member name="M:TallComponents.Css.CssStyle.ApplyBaseStyleSheet(System.String)">
            <summary>
            Applies the style as base style.
            </summary>
            <remarks>
            The new style will be inserted at the lowest point of the CssStyle (deepest parent).
            This way it is applied on the 'default' level.
            </remarks>
            <param name="style">The new css style to apply.</param>
        </member>
        <member name="M:TallComponents.Css.CssStyle.ApplyBaseStyleSheet(System.String,System.String)">
            <summary>
            Applies the style as base style.
            </summary>
            <remarks>
            The new style will be inserted at the lowest point of the CssStyle (deepest parent).
            This way it is applied on the 'default' level.
            </remarks>
            <param name="style">The new css style to apply.</param>
            <param name="basepath">Basepath when loading included styles.</param>
        </member>
        <member name="M:TallComponents.Css.CssStyle.ApplyBaseStyleSheetFromPath(System.String,System.String)">
            <summary>
            Applies the style from the given location as base style.
            </summary>
            <remarks>
            The new style will be inserted at the lowest point of the CssStyle (deepest parent).
            This way it is applied on the 'default' level.
            </remarks>
            <param name="path">The (partial) path to the new css style to apply.</param>
            <param name="basepath">Basepath when loading included styles.</param>
        </member>
        <member name="M:TallComponents.Css.CssStyle.ApplyStyle(System.String)">
            <summary>
            Applies a override to the style for the current selector.
            </summary>
            <param name="style">The new style attributes to apply.</param>
        </member>
        <member name="M:TallComponents.Css.CssStyle.ApplyStyle(TallComponents.Css.CssSelector,System.String)">
            <summary>
            Applies a override to the style for the given selector.
            </summary>
            <param name="selector">The selector that has to receive the override.</param>
            <param name="style">The new style attributes to apply.</param>
        </member>
        <member name="M:TallComponents.Css.CssStyle.ApplyStyle(System.String,System.String)">
            <summary>
            Applies a override to the style for the given selector.
            </summary>
            <param name="selector">The selector that has to receive the override.</param>
            <param name="style">The new style attributes to apply.</param>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Tag">
            <summary>
            The current selected Tag.
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Class">
            <summary>
            The current selected Class.
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Id">
            <summary>
            The current selected ID.
            </summary>
        </member>
        <member name="M:TallComponents.Css.CssStyle.ResetPrivates">
            <summary>
            Resets properties that should not be forwarded to child elements
            </summary>
            <remarks>Currently involved properties:
            <para>- PageBreakBefore</para>
            <para>- PageBreakAfter</para>
            </remarks>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Color">
            <summary>
            Foreground color
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.BackgroundColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Border">
            <summary>
            Border
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Margin">
            <summary>
            Margin
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Padding">
            <summary>
            Padding
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Italic">
            <summary>
            Use italic font
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Bold">
            <summary>
            Use bold font
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Underline">
            <summary>
            Underline text
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.StrikeThrough">
            <summary>
            Strikethrough text
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Subscript">
            <summary>
            Subscript
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Superscript">
            <summary>
            Superscript
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.FontFamily">
            <summary>
            A family of fonts, defining the Normal, Bold, Italic and BoldItalic font variants.
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.FirstLineTextIndent">
            <summary>
            The first line indent in points.
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.IsOwnFontSizeDefined">
            <summary>
            Gets a value indicating whether the own font-size is defined for the element.
            </summary>
            <value>
            	<c>true</c> if the own font-size is defined; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TallComponents.Css.CssStyle.FontSize">
            <summary>
            Font size in points
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Width">
            <summary>
            Width in points
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Height">
            <summary>
            Height in points
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.TextAlign">
            <summary>
            Text alignment
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Justify">
            <summary>
            Justification
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.Visible">
            <summary>
            Visible
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.PreserveWhitespace">
            <summary>
            Preserve Whitespace
            </summary>
        </member>
        <member name="M:TallComponents.Css.CssStyle.ParseColor(System.String)">
            <summary>
            Get a color from a string. 
            </summary>
            <remarks>
            Uses <see cref="M:TallComponents.PDF.Colors.Color.Parse(System.String)"/>.
            </remarks>
            <param name="s">The string to parse.</param>
            <returns>The color, or black if no matching color was found.</returns>
        </member>
        <member name="M:TallComponents.Css.CssStyle.ParseWidth(System.String)">
            <summary>
            Parse a width declaration used by borders.
            </summary>
            <param name="width">The width to resolve.</param>
            <returns>The converted width in points.</returns>
        </member>
        <member name="M:TallComponents.Css.CssStyle.getPen(System.String)">
            <summary>
            Create a pen from a CSS declaration
            </summary>
            <param name="value">A definition following the CSS border definition.</param>
            <returns>The generated pen or null if none is needed (transparent)</returns>
        </member>
        <member name="M:TallComponents.Css.CssStyle.GetCurrentValue(System.String)">
            <summary>
            Retrieves the value for the given element.
            </summary>
            <remarks>Does not itterate through the context if the element cannot be 
            resolved using the current selector.</remarks>
            <param name="element">The element to determine the value for.</param>
            <returns>The string value for the element or null if not found.</returns>
        </member>
        <member name="M:TallComponents.Css.CssStyle.GetValue(System.String,System.Boolean)">
            <summary>
            Retrieves the value for the given element.
            </summary>
            <remarks>Iterates through the context if the element cannot be 
            resolved using the current selector. Also checks the default value.</remarks>
            <param name="element">The element to determine the value for.</param>
            <param name="untilDefinedClass">Only process the parent if the 'class' is null.</param>
            <returns>The string value for the element or null if not found.</returns>
        </member>
        <member name="M:TallComponents.Css.CssStyle.GetValue(System.String)">
            <summary>
            Retrieves the value for the given element.
            </summary>
            <remarks>Iterates through the context if the element cannot be 
            resolved using the current selector. Also checks the default value.</remarks>
            <param name="element">The element to determine the value for.</param>
            <returns>The string value for the element or null if not found.</returns>
        </member>
        <member name="M:TallComponents.Css.CssStyle.GetStyleValue(System.String,System.Boolean)">
            <summary>
            Gets the value for the given element, iterates through the context.
            </summary>
            <param name="element">The element to determine the value for.</param>
            <param name="untilDefinedClass">Only process the parent if the 'class' is null.</param>
            <returns>The string value assignd to the element.</returns>
        </member>
        <member name="M:TallComponents.Css.CssStyle.GetDefaultStyleValue(System.String)">
            <summary>
            Gets the value for the given element, assigned to the *-selector.
            </summary>
            <param name="element">The element to determine the default value for.</param>
            <returns>The default string value, null if not defined.</returns>
        </member>
        <member name="P:TallComponents.Css.CssStyle.PageBreakAfter">
            <summary>
            Get if a page break has to be inserted after this element.
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.VerticalAlign">
            <summary>
            Gets the vertical align.
            </summary>
        </member>
        <member name="P:TallComponents.Css.CssStyle.PageBreakBefore">
            <summary>
            Get if a page break has to be inserted before this element.
            </summary>
            <remarks>Also checks the delayed page break after as break after is simulated
            by a break before on the next block element.</remarks>
        </member>
        <member name="P:TallComponents.Css.CssStyle.DelayedPageBreakAfter">
            <summary>
            As our paragraphs only support page-break before a work around is needed...
            </summary>
        </member>
        <member name="T:TallComponents.Css.CssStyleElementSelection">
            <summary>
            Holds the value assigned to a value.
            </summary>
        </member>
        <member name="M:TallComponents.Css.CssStyleElementSelection.#ctor(System.String)">
            <summary>
            Creates a new instance of the CssStyleElementSelection for the given element.
            </summary>
            <param name="element">The name of the element</param>
        </member>
        <member name="P:TallComponents.Css.CssStyleElementSelection.Element">
            <summary>
            Get the element identifier.
            </summary>
        </member>
        <member name="M:TallComponents.Css.CssStyleElementSelection.Add(System.String,System.String)">
            <summary>
            Assigns the value to the element for the given selector.
            </summary>
            <param name="selector">The selector to store the value for.</param>
            <param name="value">The new value to assign</param>
        </member>
        <member name="M:TallComponents.Css.CssStyleElementSelection.GetValue(System.String)">
            <summary>
            Get the value of the element for the given selector.
            </summary>
            <param name="selector">The selector to check for.</param>
            <returns>The value assigned to the elelemt for the given selector, 
            null if the parent value has to be eveluated/inherited.</returns>
        </member>
        <member name="T:TallComponents.Css.CssStyleSheet">
            <summary>
            Holds the style sheet definition and allows querying.
            </summary>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.#ctor">
            <summary>
            Creates a new instance of the CssStyleSheet class.
            </summary>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.#ctor(TallComponents.Css.CssStyleSheet)">
            <summary>
            Creates a new instance of the CssStyleSheet class.
            </summary>
            <param name="parent">The stylesheet that has to be assigned as the parent of this new style sheet.</param>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.#ctor(System.String)">
            <summary>
            Creates a new instance of the CssStyleSheet class.
            </summary>
            <param name="path">The (relative) (web)path to the stylesheet to load.</param>
            <remarks>
            This 'wrapper' tries to resolve the loaction of the stylesheet by checking various
            types. The first matching is evaluated:
            <para>- path is a complete url</para>
            <para>- path is a local file (relative to current working folder)</para>
            <para>- the application is running in a web context: the web path are resolved locally.</para>
            </remarks>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the CssStyleSheet class.
            </summary>
            <remarks>
            This 'wrapper' tries to resolve the loaction of the stylesheet by checking various
            types. The first matching is evaluated:
            <para>- path is already a complete url</para>
            <para>- basepath is a url, appends the stylesheetName</para>
            <para>- path is a local file (relative to current working folder)</para>
            <para>- path is a local file (relative to given basepath)</para>
            <para>- the application is running in a web context: the web paths are resolved locally.</para>
            </remarks>
            <param name="path">The (relative) (web)path to the stylesheet to load.</param>
            <param name="basepath">The basepath for included pa</param>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.#ctor(System.IO.Stream)">
            <summary>
            Creates a new instance of the CssStyleSheet class.
            </summary>
            <param name="stream">The stream that holds the stylesheet to load.</param>
            <remarks>
            You should close/dispose the given stream, it can be done after this call is returned.
            </remarks>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.Read(System.Xml.XmlReader)">
            <summary>
            Read the stylesheet from XML.
            </summary>
            <param name="reader">The reader to read from.</param>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.Parse(System.String)">
            <summary>
            Used by XML processor to load a css style sheet from a path.
            </summary>
            <param name="path">Path to load the stylesheet from.</param>
            <returns>The CssStyleSheet holding the loaded and parsed stylesheet.</returns>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.Clear">
            <summary>
            Clears the complete sheet.
            </summary>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.ApplyStyleSheetFromPath(System.String,System.String)">
            <summary>
            Process a batch of styles from a given location and apply them to the current stylesheet.
            </summary>
            <remarks>
            This 'wrapper' tries to resolve the loaction of the stylesheet by checking various
            types. The first matching is evaluated:
            <para>- path is already a complete url</para>
            <para>- basepath is a url, appends the path</para>
            <para>- path is a local file (relative to current working folder)</para>
            <para>- path is a local file (relative to given basepath)</para>
            <para>- the application is running in a web context: the web paths are resolved locally.</para>
            </remarks>
            <param name="path">The (relative) (web)path to the stylesheet to load.</param>
            <param name="basepath">The base path to load the style sheet from.</param>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.ApplyStyleSheet(System.String,System.String)">
            <summary>
            Process a batch of styles and apply them to the current stylesheet.
            </summary>
            <remarks>
            This is used for inline stylesheets, including support for importing
            additional external stylesheets.
            </remarks>
            <param name="styleSheet">The CSS style declarations to apply.</param>
            <param name="basePath">Base path for loading included style sheets.</param>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.ApplyStyleSheet(System.String)">
            <summary>
            Process a batch of styles and apply them to the current stylesheet.
            </summary>
            <remarks>
            This is used for inline stylesheets, without support for importing
            additional external stylesheets (will be ignored).
            </remarks>
            <param name="styleSheet">The CSS style declarations to apply.</param>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.ApplyStyle(System.String,System.String)">
            <summary>
            Add a single style.
            </summary>
            <remarks>
            Any existing style properties for the given selector are kept.</remarks>
            <param name="selector">The CSS selector.</param>
            <param name="style">The style description.</param>
            <example>
            C#
            <code>
              myStyleSheet.ApplyStyle("p.special","color: green; font-weight: bold");
            </code>
            </example>
        </member>
        <member name="P:TallComponents.Css.CssStyleSheet.Parent">
            <summary>
            Get or set the parent of this style sheet.
            </summary>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.GetValue(System.String,TallComponents.Css.CssSelector)">
            <summary>
            Get the value for the specified element using the specified selector.
            </summary>
            <param name="element">The style element to retrieve the value for.</param>
            <param name="selector">The selector that holds the selection criteria.</param>
            <returns>The string value found or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.GetValue(System.String,System.String)">
            <summary>
            Get the value for the specified selector, including checking parent definition.
            </summary>
            <param name="selector">The selector in the format "!context tag.class#id".</param>
            <param name="element">The element to retrieve the value for.</param>
            <returns>The string value found or <see langword="null"/> if not found.</returns>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.Clone">
            <summary>
            Clones a CssStyleSheet.
            </summary>
        </member>
        <member name="M:TallComponents.Css.CssStyleSheet.System#ICloneable#Clone">
            <summary>
            IClonable implementation. Clones a CssStyleSheet
            </summary>
        </member>
        <member name="P:TallComponents.Gdi.Brush.GdiBrush">
            <summary>
            Returns the Gdi brush, if any.
            </summary>
        </member>
        <member name="T:TallComponents.Html.XHtmlTextProcessor">
            <summary>
            Transforms well-formed XHTML into a collection of fragments using a stylesheet.
            </summary>
        </member>
        <member name="P:TallComponents.Html.XHtmlTextProcessor.PreserveWhitespace">
            <summary>
            If false, all sequences of whitespace (newlines, tabs, spaces) should be replaced
            by a single space. If true, they will be kept.
            </summary>
            <remarks>Not preserving whitespace is the normal way of processing (x)html. In rich
            text fields howevever, whitespace should be kept, basically because Adobe does this
            too. Well, at the moment we do this for newlines only.</remarks>
        </member>
        <member name="T:TallComponents.Images.Bitmap.BitmapFileHeader">
            <summary>
            Summary description for BitmapFileHeader.
            </summary>
        </member>
        <member name="T:TallComponents.Images.Bitmap.BitmapInfoHeader">
            <summary>
            Summary description for BitmapInfoHeader.
            </summary>
        </member>
        <member name="T:TallComponents.Images.Bitmap.BmpFile">
            <summary>
            Native .BMP processing for ImageObject
            </summary>
        </member>
        <member name="M:TallComponents.Images.Bitmap.BmpFile.SelectActiveIndex(System.Int32)">
            <summary>
            Multiple indexes not supported in BMP files
            </summary>
        </member>
        <member name="T:TallComponents.Images.Bitmap.BmpHeader">
            <summary>
            Summary description for BmpHeader.
            </summary>
        </member>
        <member name="M:TallComponents.Images.Bitmap.PngFile.SaveAs32bppImage(System.IO.Stream,TallComponents.PDF.Colors.RgbaColor)">
             <summary>
            
             </summary>
             <param name="stream"></param>
             <param name="transparencyColor">If not null, transparent colors (with Alpha == 0) will be replaced by the
             indicated color.</param>
        </member>
        <member name="M:TallComponents.Images.Bitmap.PngFile.FromRGB24FlateStream(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Add PNG header for a Flate encoded byte stream which is supposed to be a stream of RGB pixels (8/16 bit per component)
            </summary>
            <param name="stream">The stream.</param>
            <param name="bits">The bits.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="bitsPerPixel">The bits per pixel.</param>
        </member>
        <member name="T:TallComponents.Images.BitWriter">
            <summary>
            Writes bits to a stream.
            </summary>
        </member>
        <member name="M:TallComponents.Images.BitWriter.Write(System.Boolean)">
            <summary>
            The bit to write.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:TallComponents.Images.BitWriter.Write(System.Int32,System.Int32)">
            <summary>
            Several bits to write.
            </summary>
            <param name="value"></param>
            <param name="numBitsArg"></param>
        </member>
        <member name="M:TallComponents.Images.BitWriter.Flush">
            <summary>
            Flush the bit (can be used to align on a byte also)
            </summary>
        </member>
        <member name="T:TallComponents.Images.ImageMaskImage">
            <summary>
            ImageMaskImage defines a monochrome image for an image. (Explicit Masking)
            </summary>
        </member>
        <member name="M:TallComponents.Images.ImageMaskImage.#ctor(TallComponents.PDF.Base.Stream)">
            <summary>
            Initialize a new ImageMaskImage, based on an existing Stream.
            </summary>
            <param name="underlyingStream"></param>
        </member>
        <member name="M:TallComponents.Images.ImageMaskImage.#ctor">
            <summary>
            Initialize a new SoftMaskImage.
            </summary>
        </member>
        <member name="M:TallComponents.Images.ImageMaskImage.#ctor(TallComponents.Images.SoftMaskImage)">
            <summary>
            Create a new ImageMaskImage from SoftMaskImage.
            </summary>
            <param name="imageData"></param>
        </member>
        <member name="T:TallComponents.Images.Gdi.DisposableObject">
            <summary>
            DisposableObject can be used for objects that needs to be disposed, eg the Bitmap.
            </summary>
        </member>
        <member name="M:TallComponents.Images.Gdi.DisposableObject.#ctor(System.IDisposable)">
            <summary>
            Creates a new Disposable object. 
            </summary>
            <param name="disposableObject">The object to disposed before finalizing.</param>
        </member>
        <member name="M:TallComponents.Images.Gdi.DisposableObject.Dispose">
            <summary>
            Implementation for IDisposable. for internal usage only. 
            </summary>
        </member>
        <member name="P:TallComponents.Images.Gdi.DisposableObject.Object">
            <summary>
            Specify if the object which must be disposed before finalizing.
            </summary>
        </member>
        <member name="P:TallComponents.Images.Gdi.DisposableObject.MustBeDisposed">
            <summary>
            Specify if the object specified in Object must be disposed before finalizing.
            </summary>
            <remarks>
            Default is true.
            </remarks>
        </member>
        <member name="P:TallComponents.Images.Gdi.DisposableObject.IsDisposed">
            <summary>
            True if the object has been disposed.
            </summary>
        </member>
        <member name="T:TallComponents.Images.Gdi.GdiBitmap">
            <summary>
            Summary description for GdiBitmap.
            </summary>
        </member>
        <member name="T:TallComponents.Images.Gif.GifBlock">
            <summary>
            Summary description for GifBlock.
            </summary>
        </member>
        <member name="T:TallComponents.Images.Gif.GifExtensionBlock">
            <summary>
            Summary description for GifExtensionBlock.
            </summary>
        </member>
        <member name="T:TallComponents.Images.Gif.GifFile">
            <summary>
            Summary description for GifImageData.
            </summary>
        </member>
        <member name="T:TallComponents.Images.Gif.GifHeader">
            <summary>
            GIF file header
            </summary>
        </member>
        <member name="T:TallComponents.Images.Gif.GifImageBlock">
            <summary>
            Summary description for GifImage.
            </summary>
        </member>
        <member name="T:TallComponents.Images.Gif.GifImageBlockHeader">
            <summary>
            Summary description for ImageHeader.
            </summary>
        </member>
        <member name="T:TallComponents.Images.Gif.GifImageData">
            <summary>
            Summary description for GifImageData.
            </summary>
        </member>
        <member name="T:TallComponents.Images.Gif.GraphicControlExtensionBlock">
            <summary>
            Summary description for GifGraphicControlExtensionBlock.
            </summary>
        </member>
        <member name="T:TallComponents.Images.Gif.LogicalScreenDescriptor">
            <summary>
            Summary description for LogicalScreenDescriptor.
            </summary>
        </member>
        <member name="T:TallComponents.Images.ImageCompression">
            <summary>
            Image compression methods.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.Uncompressed">
            <summary>
            The image is uncompressed. This is typically used for GDI/WPF bitmaps (and the actual compression will be determined after saving).
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.JBIG2Decode">
            <summary>
            JBIG2 image.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.CCITTFaxDecode">
            <summary>
            CCITT fax encoded image.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.DCT">
            <summary>
            DCT or JPEG encoded image.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.PNG">
            <summary>
            PNG encoded image. Only used for (de)serialisation at the moment.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.Flate">
            <summary>
            Flate encoded image data. This has only meaning in PDF, as there is no image file format that consists of just
            flate encoded pixels. Zip uses this internally, and PNG and Tiff mat use it internaly.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.LZW">
            <summary>
            LZW encoded image data. This has only meaning in PDF, as there is no image file format that consists of just
            LZW encoded pixels. Gif uses this internally.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.PackBits">
            <summary>
            Packbits. This has only meaning in PDF, as there is no image file format that consists of just
            PackBits encoded pixels.
            </summary>
        </member>
        <member name="F:TallComponents.Images.ImageCompression.Auto">
            <summary>
            Auto = whatever is most appropriate. This should never be assigned to actual image data, only to the desired compression
            upon saving etc.
            </summary>
        </member>
        <member name="T:TallComponents.Images.ImageData">
            <summary>
            ImageData is the base class for image data containers.
            To implement native support for an image format, implement a specialized class.
            </summary>
        </member>
        <member name="P:TallComponents.Images.ImageData.PhysicalHeight">
            <summary>
            The PhysicalHeight or the Height if the vertical resolution is not known.
            </summary>
        </member>
        <member name="P:TallComponents.Images.ImageData.PhysicalWidth">
            <summary>
            The PhysicalWidth or the Width if the horizontal resolution is not known.
            </summary>
        </member>
        <member name="P:TallComponents.Images.ImageData.Colors">
            <summary>
            The number of colors in the color table. Ignore if the image is not indexed.
            </summary>
        </member>
        <member name="P:TallComponents.Images.ImageData.FrameCount">
            <summary>
            The number of frames in this image
            </summary>
        </member>
        <member name="M:TallComponents.Images.ImageData.ResolveTransparentColor(TallComponents.PDF.Colors.Color)">
            <summary>
            Find the index of a color in the color table to use for color masking.
            This code first tries an exact match using all color components (RGBA).
            If no match is found and Alpha is 0, a new search is performed for
            a color with matching RGB values and the highest possible alpha.
            If the no alpha is supported a simple RGB match is performed.
            </summary>
            <remarks>
            Only valid for indexed color models.
            </remarks>
            <param name="color">Color</param>
            <returns>Index of the color or -1 if not found.</returns>
        </member>
        <member name="P:TallComponents.Images.ImageData.TransparentColor">
            <summary>
            The default transparent color.
            </summary>
            <remarks>
            This is not supported by all image formats.
            </remarks>
        </member>
        <member name="P:TallComponents.Images.ImageData.CacheKey">
            <summary>
            A string to use for storing this image in cache. E.g. the path name.
            </summary>
        </member>
        <member name="M:TallComponents.Images.ImageData.ReadDataFromStream(System.IO.Stream,System.Byte[])">
            <summary>
            Reads data into a complete array, throwing an EndOfStreamException
            if the stream runs out of data first, or if an IOException
            naturally occurs.
            </summary>
            <param name="stream">The stream to read data from</param>
            <param name="data">The array to read bytes into. The array
            will be completely filled from the stream, so an appropriate
            size must be given.</param>
        </member>
        <member name="M:TallComponents.Images.ImageData.LoadImageFromFile(System.String,System.Int32)">
            <summary>
            Load an image from the file system. Will throw on error.
            </summary>
        </member>
        <member name="M:TallComponents.Images.ImageData.LoadImage(System.IO.Stream,System.Int32)">
            <summary>
            Load an image from a stream.
            </summary>
            <remarks>
            Images created with this method do not use image caching.
            </remarks>
            <param name="stream"></param>
            <param name="frameIndex"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.Images.ImageData.LoadImage(System.IO.Stream,System.String,System.Int32,System.Boolean)">
            <summary>
            Load an image from a stream. If path is not empty the image will be cached.
            </summary>
        </member>
        <member name="T:TallComponents.Images.MetaColorspace">
            <summary>
            Colorspaces of the image.
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.Grayscale">
            <summary>
            1 channel (grayscale)
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.Rgb">
            <summary>
            3 channels,
            1.: red,
            2.: geen,
            3.: blue
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.Cmyk">
            <summary>
            4 channels,
            1.: cyan,
            2.: magenta,
            3.: yellow,
            4.: key (black)
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.Ycck">
            <summary>
            It is a variant of the YCbCr model containing an additional K channel (black)
            4 channels,
            1.: Y,
            2.: Cb,
            3.: Cr
            4.: key (black)
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.Ycbcr">
            <summary>
            3 channels,
            1.: Y,
            2.: Cb,
            3.: Cr
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.IndexedGray">
            <summary>
            Grayscale image with associated color table
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.IndexedRgb">
            <summary>
            RGB image with associated color table
            </summary>
        </member>
        <member name="F:TallComponents.Images.MetaColorspace.Unknown">
            <summary>
            Color space is not determined or non of the others
            </summary>
        </member>
        <member name="T:TallComponents.Images.ImageProperties">
            <summary>
            Summary description for ImageProperties.
            </summary>
        </member>
        <member name="P:TallComponents.Images.ImageProperties.Compression">
            <summary>
            This is the actual compression of the image data.
            </summary>
        </member>
        <member name="P:TallComponents.Images.ImageProperties.PreferredCompression">
            <summary>
            This is used as a hint for (re)compressing the image in case compression is set to auto.
            </summary>
        </member>
        <member name="P:TallComponents.Images.ImageProperties.FlipY">
            <summary>
            FlipY indicates whether the the pixels are in "normal" order - i.e starting at top-left, running down -, or
            whether they are "flipped" - i.e. starting at the bottom left, running up.
            </summary>
        </member>
        <member name="T:TallComponents.Images.JBig2.Jbig2SegmentComparer">
            <summary>
            Comparer class for the JBig2 segments.
            </summary>
        </member>
        <member name="T:TallComponents.Images.JBig2.Jbig2ImageData">
            <summary>
            Summary description for Jbig2ImageData.
            </summary>
        </member>
        <member name="M:TallComponents.Images.JBig2.Jbig2ImageData.#ctor(System.IO.Stream,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TallComponents.Images.JBig2.Jbig2ImageData"/> class.
            </summary>
            <param name="jbigStream">The jbig stream.</param>
            <param name="path">The path.</param>
            <param name="index">The index.</param>
            <param name="streamOwner">if set to <c>true</c> the instance is a stream owner.</param>
        </member>
        <member name="M:TallComponents.Images.JBig2.Jbig2ImageData.Save(System.IO.Stream,TallComponents.Images.ImageCompression)">
            <summary>
            Saves the specified out stream.
            </summary>
            <param name="outStream">The out stream.</param>
            <param name="compression">The compression.</param>
        </member>
        <member name="M:TallComponents.Images.JBig2.Jbig2ImageData.SaveAdditionalData(System.IO.Stream)">
            <summary>
            Saves the additional data.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:TallComponents.Images.JBig2.Jbig2ImageData.setSegmentPage(TallComponents.Images.JBig2.JB2Segment,System.Byte[],System.Byte)">
            <summary>
            Sets the page number to the specified segment in the specified raw image data.
            </summary>
            <param name="segment">The segment.</param>
            <param name="data">The raw data.</param>
            <param name="page">The page.</param>
        </member>
        <member name="M:TallComponents.Images.JBig2.Jbig2ImageData.saveSegmentToStream(System.IO.Stream,TallComponents.Images.JBig2.JB2Segment,System.Byte[])">
            <summary>
            Saves the segment to stream.
            </summary>
            <param name="segmentsDataStream">The segments data stream.</param>
            <param name="segment">The segment.</param>
            <param name="rawImageData">The raw image data.</param>
        </member>
        <member name="T:TallComponents.Images.Jpeg.JpegImageData">
            <summary>
            Summary description for JpegImageData.
            </summary>
        </member>
        <member name="T:TallComponents.Images.SoftMaskImage">
            <summary>
            SoftMaskImage defines alpha transparency for an image
            </summary>
        </member>
        <member name="M:TallComponents.Images.SoftMaskImage.#ctor(TallComponents.PDF.Base.Stream)">
            <summary>
            Initialize a new SoftMaskImage, based on an existing Stream.
            </summary>
            <param name="underlyingStream"></param>
        </member>
        <member name="M:TallComponents.Images.SoftMaskImage.#ctor">
            <summary>
            Initialize a new SoftMaskImage.
            </summary>
        </member>
        <member name="M:TallComponents.Images.SoftMaskImage.#ctor(TallComponents.Images.ImageData,System.Boolean)">
            <summary>
            Create a new SoftMaskImage from ImageData.
            </summary>
            <param name="imageData"></param>
            <param name="flipY"></param>
        </member>
        <member name="T:TallComponents.Images.Tiff.PackBitsDecoder">
            <summary>
            Summary description for PackBitsDecoder.
            </summary>
        </member>
        <member name="T:TallComponents.Images.Tiff.TiffImageData">
            <summary>
            Summary description for TiffImageData.
            </summary>
        </member>
        <member name="P:TallComponents.Licensing.KeyGenerator.UseActivationId">
            <summary>
            If set, the activation id will be prefixed to the license key.
            </summary>
        </member>
        <member name="M:TallComponents.Licensing.KeyGenerator.generate(System.String,System.Int32)">
            <summary>
            Generate a new license key that does not expire, based on the runtime attribute.
            </summary>
        </member>
        <member name="M:TallComponents.Licensing.KeyGenerator.generate(System.String,System.Int32,System.String,System.String)">
            <summary>
            Generate a new license key, based on the runtime attribute and expiration date.
            </summary>
            <param name="runtimeAttribute"></param>
            <param name="activationId">The activation ID.</param>
            <param name="startingDate">Starting date on which the license is valid, in the format MMM-dd-yyyy.</param>
            <param name="expirationDate">Expiration date, in the format MMM-dd-yyyy.
            Use the empty string in order not to use an expiration date.
            </param>
            <returns>
            A license key. If an expiration date is specified (i.e. expirationDate is not the empty
            string, a pipe symbol and the date are appended to the key.
            </returns>
            <remarks>
            The expiration date is appended to the key, because the AppSettings do not allow an extra XML
            tag or parameter in the configuration file. For consistency we use the same method also if the license
            is not contained in the configuration file, but elsewhere (attributes, etc.).
            </remarks>
        </member>
        <member name="T:TallComponents.Licensing.License">
            <summary>
            The License class let you check if you have entered a valid license key.
            </summary>
            <remarks>
            It will check the licenses available for all instances in this app-domain.
            </remarks>
        </member>
        <member name="M:TallComponents.Licensing.License.IsValid">
            <summary>
            Check if this component detects a valid license key.
            </summary>
            <remarks>
            If the license is not valid an evaluation banner will be added to the document.
            </remarks>
        </member>
        <member name="M:TallComponents.Licensing.License.GetLicenseInfo">
            <summary>
            This method returns some information which is used to check if the component runs in evaluation mode, or in unlock/purchased mode.
            </summary>
        </member>
        <member name="T:TallComponents.Licensing.LicenseAttribute">
            <summary>
            Base class of product specific custom attributes that let you enter
            the redistribution license key as an attribute of the entry or calling assembly.
            </summary>
            <remarks>
            Each product offers its own specialization of LicenseAttribute. 
            </remarks>
        </member>
        <member name="P:TallComponents.Licensing.LicenseAttribute.Key">
            <summary>
            The type of license key.
            </summary>
        </member>
        <member name="P:TallComponents.Licensing.LicenseAttribute.Value">
            <summary>
            The license key value.
            </summary>
        </member>
        <member name="T:TallComponents.Licensing.LicenseChecker">
            <summary>
            Summary description for LicenseChecker.
            </summary>
            <summary>
            Summary description for LicenseChecker.
            </summary>
        </member>
        <member name="M:TallComponents.Licensing.LicenseChecker.Initialize">
            <summary>
            Initialise the license checker in a proper context, i.e. at a
            point called by client code, and not via an event handler invoked
            by winforms. At the moment, this is only mandatory for ReaderControls
            and Rasterizer (the latter because of DrawJob and WPF rendering).
            </summary>
        </member>
        <member name="M:TallComponents.Licensing.LicenseChecker.Proof.hasExpired(System.String,System.String)">
            <summary>
            Returns true if today is not in the range [startDate .. expirationDate),
            false otherwise.
            </summary>
        </member>
        <member name="M:TallComponents.Licensing.LicenseChecker.ToString">
            <summary>
            The ToString method returns a string that represents the current Object.
            </summary>
            <returns>A String that represents the current Object.</returns>
        </member>
        <member name="T:TallComponents.Licensing.LicenseCollection">
            <summary>
            The LicenseCollection class let you enter the key and value programmatically.
            </summary>
            <remarks>
            The licenses you add will be available for all instances in this app-domain.
            </remarks>
        </member>
        <member name="M:TallComponents.Licensing.LicenseCollection.Add(System.String,System.String)">
            <summary>
            Add a license programmatically.
            </summary>
            <param name="licenseKey">The type of license key.</param>
            <param name="licenseKeyValue">The license key value.</param>
        </member>
        <member name="P:TallComponents.Licensing.LicenseCollection.Licenses">
            <summary>
            Called from LicenseChecker.
            </summary>
        </member>
        <member name="T:TallComponents.Licensing.Notice">
            <summary>
            Summary description for Notice.
            </summary>
        </member>
        <member name="T:TallComponents.Licensing.PDFKitLicenseAttribute">
             <summary>
             License key attribute. Use this attribute to include a license key with your assembly or application.
             </summary>
             <example>
             Include the following code in your AssemblyInfo:
             <para>C#</para>
             <code>
             using TallComponents.Licensing;
             
             [assembly: PDFKitLicense( "Your Key like: PDFKit.NET x.y Key", "Your Value like:  Xyz++" )] 
             </code>
             
             <para>VB.NET</para>
             <code>
             Imports TallComponents.Licensing
            
             &lt;Assembly: PDFKitLicense("Your Key like: PDFKit.NET x.y Key", "Your Value like:  Xyz++" )&gt;
             </code>
             
             The license key name depends on the type of license you have purchased. The value is generated when 
             you activate your license.
             <para>You can obtain the license key name and value by logging in to 
             <see href="http://www.tallcomponents.com/?id=myaccount-licenses">your account</see> on 
             <see href="http://www.tallcomponents.com">our website</see>.</para>
             </example>
        </member>
        <member name="M:TallComponents.Licensing.PDFKitLicenseAttribute.#ctor(System.String,System.String)">
            <summary>
            Initialize a PDFKit.NET License attribute. 
            </summary>
            <param name="key">The key to use.</param>
            <param name="value">The value to use (retrieved from the 'MyAccount' section from our website).</param>
        </member>
        <member name="P:TallComponents.Licensing.PDFKitLicenseAttribute.Key">
            <summary>
            The key entered in the constructor.
            </summary>
        </member>
        <member name="P:TallComponents.Licensing.PDFKitLicenseAttribute.Value">
            <summary>
            The value entered in the constructor.
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Automats.Automat">
            <summary>
            class Automat
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Automats.Automat.finishStates">
            <summary>
            finish states
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Automats.Automat.lastLexeme">
            <summary>
            current lexeme
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.Automats.Automat.LastLexeme">
            <summary>
            LastLexeme
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.Automat.AddRule(System.Int32,System.Char[],System.Int32)">
            <summary>
            AddRule
            </summary>
            <param name="stateFrom"></param>
            <param name="alfas"></param>
            <param name="stateTo"></param>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.Automat.AddRule(System.Int32,System.Char,System.Int32)">
            <summary>
            AddRule
            </summary>
            <param name="stateFrom"></param>
            <param name="alfa"></param>
            <param name="stateTo"></param>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.Automat.AddRule(System.Int32,System.Char,System.Char,System.Int32)">
            <summary>
            AddRule
            </summary>
            <param name="stateFrom"></param>
            <param name="alfaLow"></param>
            <param name="alfaTop"></param>
            <param name="stateTo"></param>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.Automat.FindRule(System.Int32,System.Char)">
            <summary>
            FindRule - returns rule that describe conversion from 'stateFrom'
            </summary>
            <param name="stateFrom"></param>
            <param name="alfa"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.Automat.IsFinishState(System.Int32)">
            <summary>
            IsFinishState
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.Automat.AcceptChars(System.String,System.Int32)">
            <summary>
            AcceptChars
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.Automat.AcceptChars(System.String,System.Int32,System.Int32@)">
            <summary>
            AcceptChars
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="acceptedChars"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.Automat.AcceptChars(System.String,System.Int32@)">
            <summary>
            AcceptChars
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.Automat.AcceptChars(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            AcceptChars
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="acceptedChars"></param>
            <param name="stopState"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.Automat.processRule(System.Int32,System.Char,System.Int32)">
            <summary>
            processRule
            </summary>
            <param name="oldState"></param>
            <param name="symbol"></param>
            <param name="newState"></param>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.Automat.initBeforeRun">
            <summary>
            initBeforeRun
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Automats.Automat.commaWts">
            <summary>
            CommaWtsAutomat 
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Automats.Automat.wts">
            <summary>
            WtsAutomat
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Automats.Automat.symbol">
            <summary>
            SymbolAutomat 
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Automats.Automat.word">
            <summary>
            WordAutomat
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Automats.Automat.number">
            <summary>
            NumberAutomat
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Automats.Automat.urange">
            <summary>
            URangeAutomat
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Automats.CommaWtsAutomat">
            <summary>
            CommaWtsAutomat
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.CommaWtsAutomat.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Automats.NumberAutomat">
            <summary>
            NumberAutomat
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.NumberAutomat.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Automats.SymbolAutomat">
            <summary>
            SymbolAutomat 
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.SymbolAutomat.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Automats.URangeAutomat">
            <summary>
            URangeAutomat
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.Automats.URangeAutomat.U1">
            <summary>
            U1
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.Automats.URangeAutomat.U2">
            <summary>
            U2
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.URangeAutomat.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.URangeAutomat.processRule(System.Int32,System.Char,System.Int32)">
            <summary>
            processRule
            </summary>
            <param name="oldState"></param>
            <param name="symbol"></param>
            <param name="newState"></param>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.URangeAutomat.initBeforeRun">
            <summary>
            initBeforeRun
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Automats.WordAutomat">
            <summary>
            WordAutomat
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.WordAutomat.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Automats.WtsAutomat">
            <summary>
            White space automat
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Automats.WtsAutomat.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Objects.SvgObject">
            <summary>
            Base class for represents svg elements and objects
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Objects.SvgObject.GraphicsObject">
            <summary>
            Object witch contains XmlDocument
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Objects.SvgObject.Parent">
            <summary>
            Parent object (usualy svg or g), witch provide a viewBox property
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Objects.SvgObject.Pen">
            <summary>
            Pen property
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Objects.SvgObject.Brush">
            <summary>
            Brush property, defaulr none
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Objects.SvgObject.ClipPath">
            <summary>
            Clip path for current element
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.pathCommands.cmdCurveto.GetDeltaArgByDeltaL(System.Double,System.Double)">
            <summary>
            Returns delta arg
            </summary>
            <param name="startArg"></param>
            <param name="deltaL"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.pathCommands.cmdEllipticalArc.angleBetweenVectors(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates angle between two vectiors
            </summary>
            <param name="Ux"></param>
            <param name="Uy"></param>
            <param name="Vx"></param>
            <param name="Vy"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.pathCommands.cmdQuadraticBezierCurveto.GetDeltaArgByDeltaL(System.Double,System.Double)">
            <summary>
            Returns delta arg
            </summary>
            <param name="startArg"></param>
            <param name="deltaL"></param>
            <returns></returns>
        </member>
        <member name="T:TallComponents.SvgConvertor.Support.NameObjectCollection">
            <summary>
            NameObjectCollection : NameObjectCollectionBase
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.NameObjectCollection.#ctor">
            <summary>
            Creates an empty collection.
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.NameObjectCollection.#ctor(System.Collections.IDictionary,System.Boolean)">
            <summary>
            Adds elements from an IDictionary into the new collection.
            </summary>
            <param name="d"></param>
            <param name="bReadOnly"></param>
        </member>
        <member name="P:TallComponents.SvgConvertor.Support.NameObjectCollection.Item(System.Int32)">
            <summary>
            Gets a key-and-value pair (DictionaryEntry) using an index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:TallComponents.SvgConvertor.Support.NameObjectCollection.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:TallComponents.SvgConvertor.Support.NameObjectCollection.AllKeys">
            <summary>
            Gets a String array that contains all the keys in the collection.
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.Support.NameObjectCollection.AllValues">
            <summary>
            Gets an Object array that contains all the values in the collection.
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.Support.NameObjectCollection.AllStringValues">
            <summary>
            Gets a String array that contains all the values in the collection.
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.Support.NameObjectCollection.HasKeys">
            <summary>
            Gets a value indicating if the collection contains keys that are not null.
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.NameObjectCollection.Add(System.String,System.Object)">
            <summary>
            Adds an entry to the collection.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.NameObjectCollection.Remove(System.String)">
            <summary>
            Removes an entry with the specified key from the collection.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.NameObjectCollection.Remove(System.Int32)">
            <summary>
            Removes an entry in the specified index from the collection.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.NameObjectCollection.Clear">
            <summary>
            Clears all the elements in the collection.
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.NameObjectCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            CopyTo
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="T:TallComponents.SvgConvertor.Support.SvgConvert">
            <summary>
            converts string values to different types
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.TryParseNumber(System.String,System.Double@)">
            <summary>
            TryParseNumber
            </summary>
            <param name="value"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToNumber(System.String)">
            <summary>
            ToNumber
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToNumber(System.String,System.Double)">
            <summary>
            parse string to number
            </summary>
            <param name="value">String value</param>
            <param name="DefaultValue">DefaultValue value</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ExtractLengthAndUnits(System.String,System.Double@,TallComponents.SvgConvertor.Types.Units@)">
            <summary>
            ExtractLengthAndUnits
            </summary>
            <param name="value"></param>
            <param name="number"></param>
            <param name="units"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.Px2Pt(System.String)">
            <summary>
            Converts Px to Pt
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.Px2Pt(System.Double)">
            <summary>
            Converts Px to Pt
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ConvertLength(System.Double,TallComponents.SvgConvertor.Types.Units,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Converts length to pt
            </summary>
            <param name="value"></param>
            <param name="units"></param>
            <param name="dimensionLength"></param>
            <param name="Dpi"></param>
            <param name="fontSize"></param>
            <param name="relativeContent"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToUnits(System.String)">
            <summary>
            Converts string to Units.Px
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToUnits(System.String,TallComponents.SvgConvertor.Types.Units)">
            <summary>
            ToUnits
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.FromUnits(TallComponents.SvgConvertor.Types.Units)">
            <summary>
            FromUnits return the string accociate with the provided unit.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToXmlSpace(System.String)">
            <summary>
            Parse XmlSpace attribute
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToFillRule(System.String)">
            <summary>
            Parse FillRule attribute
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToClipRule(System.String)">
            <summary>
            Parse ClipRule attribute
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToFontSize(System.String,System.Double)">
            <summary>
            Parse font-size attribute attribute
            </summary>
            <param name="value"></param>
            <param name="DefaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToFontWeight(System.String,System.Double)">
            <summary>
            Parse font-weight attribute
            </summary>
            <param name="value"></param>
            <param name="DefaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToFontStyle(System.String)">
            <summary>
            Parse font-style attribute
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToOverflowValue(System.String)">
            <summary>
            Parse overflow attribute
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToLineCapStyle(System.String,TallComponents.PDF.Pens.LineCapStyle)">
            <summary>
            Parse linecap-style attribute
            </summary>
            <param name="value"></param>
            <param name="DefaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToTextDecoration(System.String)">
            <summary>
            Parse text-decoration attribute
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToTextAnchor(System.String,TallComponents.SvgConvertor.Types.TextAnchor)">
            <summary>
            Parse text-anchor attribute
            </summary>
            <param name="value"></param>
            <param name="DefaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToWritingDirection(System.String,TallComponents.SvgConvertor.Types.WritingDirection)">
            <summary>
            Parse writig-direction attribute
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToWritingMode(System.String,TallComponents.SvgConvertor.Types.WritingMode)">
            <summary>
            Parse writing-mode attribute
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToFontVariant(System.String,TallComponents.SvgConvertor.Types.FontVariant)">
            <summary>
            Parse font-variant attribute
            </summary>
            <param name="value"></param>
            <param name="DefaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToUnicodeBidi(System.String,TallComponents.SvgConvertor.Types.UnicodeBidi)">
            <summary>
            Parse unicode-bidi attribute
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToPreserveAspectRatio(System.String)">
            <summary>
            Parse preserveAspectRatio attribute
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToColor(System.String)">
            <summary>
            Parse color attribute
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToSpreadMethod(System.String,TallComponents.SvgConvertor.Types.SpreadMethod)">
            <summary>
            ToSpreadMethod
            </summary>
            <param name="value"></param>
            <param name="DefaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToObjectBoundingBoxUnits(System.String,TallComponents.SvgConvertor.Types.ObjectBoundingBoxUnits)">
            <summary>
            ToObjectBoundingBoxUnits
            </summary>
            <param name="value"></param>
            <param name="DefaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToArabicForm(System.String,TallComponents.SvgConvertor.Types.ArabicForm)">
            <summary>
            Parse arabic-form attribute
            </summary>
            <param name="value"></param>
            <param name="Default"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.Str2Hex(System.String,System.Int32)">
            <summary>
            Str2Hex
            </summary>
            <param name="value"></param>
            <param name="DefaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.Str2XmlString(System.String,TallComponents.SvgConvertor.Types.XmlSpace)">
            <summary>
            Str2XmlString
            </summary>
            <param name="str">str</param>
            <param name="xmlSpace">xmlSpace</param>
            <returns>string</returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.UnicodeBidiPrepare(System.String,TallComponents.SvgConvertor.Types.UnicodeBidi,TallComponents.SvgConvertor.Types.WritingDirection)">
            <summary>
            UnicodeBIDIPrepare
            </summary>
            <param name="str"></param>
            <param name="unicodeBidi"></param>
            <param name="writingDirection"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.IsNullOrEmpty(System.String)">
            <summary>
            IsNullOrEmpty
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Support.SvgConvert.ToClip(System.String,System.Double,System.Double)">
            <summary>
            ToClip
            </summary>
            <param name="value"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="T:TallComponents.SvgConvertor.SvgGraphics">
            <summary>
            class SvgGraphics renders shapes collection by reading svg file
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.SwitchValidator">
            <summary>
            Object that validates 'switch' conditions
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.SvgGraphics.ValidateRequiredFeatures(System.String)">
            <summary>
            ValidateRequiredFeatures
            </summary>
            <param name="requiredFeatures"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.SvgGraphics.ValidateRequiredExtensions(System.String)">
            <summary>
            ValidateRequiredExtensions
            </summary>
            <param name="requiredExtensions"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.SvgGraphics.ValidateSystemLanguage(System.String)">
            <summary>
            ValidateSystemLanguage
            </summary>
            <param name="systemLanguage"></param>
            <returns></returns>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.CachedObjects">
            <summary>
            cachedObjects
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.CachedFonts">
            <summary>
            CachedFonts
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.Links">
            <summary>
            Links
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.Width">
            <summary>
            Width of the graphics object
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.Height">
            <summary>
            Height of the graphics object
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.ViewPortWidth">
            <summary>
            Width of root element
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.ViewPortWidthUnits">
            <summary>
            Units in which the ViewPortWidth is specified
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.ViewPortHeight">
            <summary>
            Height of root element
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.ViewPortHeightUnits">
            <summary>
            Units in which the ViewPortHeightUnits is specified
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.ViewBox">
            <summary>
            The ViewBox on the root element, or the ViewPort if not available 
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.Dpi">
            <summary>
            Device resolution for convert units
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.FontSize">
            <summary>
            Default font size.
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.SvgData">
            <summary>
            XmlDocument witch contains xml data of svg document
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.RootViewBox">
            <summary>
            The viewbox for the root, or null if not available.
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.SvgGraphics.RootPreserveAspectRatio">
            <summary>
            The preserveAspectRatio for the root (converted to a bool).
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.SvgGraphics.#ctor(System.String,System.Double)">
            <summary>
            ctor public SvgGraphics
            </summary>
            <param name="filePath">File path for the SVG data.</param>
            <param name="deviceResolution">Use this deviceResolution for unit conversion (default 72).</param>
        </member>
        <member name="M:TallComponents.SvgConvertor.SvgGraphics.#ctor(System.String,System.IO.Stream,System.Double)">
            <summary>
            ctor public SvgGraphics
            </summary>
            <param name="basePath">Base path for resolving external resources (like images).</param>
            <param name="input">SVG content as stream.</param>
            <param name="deviceResolution">Use this deviceResolution for unit conversion (default 72).</param>
        </member>
        <member name="M:TallComponents.SvgConvertor.SvgGraphics.#ctor(System.String,System.IO.Stream)">
            <summary>
            ctor public SvgGraphics
            </summary>
            <param name="basePath">Base path for resolving external resources (like images).</param>
            <param name="input">SVG content as stream.</param>
        </member>
        <member name="M:TallComponents.SvgConvertor.SvgGraphics.CreateShapes(System.Double,System.Double,TallComponents.SvgConvertor.Types.Units)">
            <summary>
            Returns Collection of shapes with represents svg grapthis object with specified 
            View port Width and Height
            </summary>
            <param name="width">View port Width</param>
            <param name="height">View port Height</param>
            <param name="units">Sizes units</param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.SvgGraphics.CreateShapes">
            <summary>
            Returns Collection of shapes with represents svg grapthis object
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.SvgGraphics.getLinks(TallComponents.PDF.Page,System.Double,System.Double)">
            <summary>
            getLinks
            </summary>
            <param name="page"></param>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.ArabicForm">
            <summary>
            ArabicForm
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.AttributeInfo">
            <summary>
            class AttrInfo. Provides information about inheritance of svg attributes
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.Types.AttributeInfo.Name">
            <summary>
            Attribute name
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.Types.AttributeInfo.DefaultValue">
            <summary>
            Default value
            </summary>
        </member>
        <member name="P:TallComponents.SvgConvertor.Types.AttributeInfo.Inherit">
            <summary>
            inherit
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Types.AttributeInfo.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            ctor
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="inherit"></param>
        </member>
        <member name="M:TallComponents.SvgConvertor.Types.AttributeInfo.GetAttrInfo(System.String)">
            <summary>
            GetAttrInfo
            </summary>
            <param name="attrName"></param>
            <returns>AttrInfo</returns>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.ClipPathUnits">
            <summary>
            ClipPathUnits
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.ClipRule">
            <summary>
            ClipRule
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.FontStyle">
            <summary>
            enum FontStyle
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.FontVariant">
            <summary>
            enum FontVariant
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.IMarkeredShape">
            <summary>
            Provide methods for receive marker's properties
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.IPaint">
            <summary>
            IPaint
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.ISwitchValidator">
            <summary>
            Provide methods for validating 'switch' conditions
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Types.ISwitchValidator.ValidateRequiredFeatures(System.String)">
            <summary>
            Validates required features for 'switch' element
            value null indicates that value not presents
            If the attribute is not present, then its implicit return value is "true".
            If a null string or empty string value is given to attribute requiredFeatures, the attribute returns "false".
            </summary>
            <param name="requiredFeatures"></param>
            <returns>boolean</returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Types.ISwitchValidator.ValidateRequiredExtensions(System.String)">
            <summary>
             Validates required extensions for 'switch' element
             value null indicates that value not presents
             If the attribute is not present, then its implicit return value is "true".
             If a null string or empty string value is given to attribute requiredExtensions, the attribute returns "false".
            </summary>
            <param name="requiredExtensions"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Types.ISwitchValidator.ValidateSystemLanguage(System.String)">
            <summary>
            Validates system language for 'switch' element
            value null indicates that value not presents
            If the attribute is not present, then its implicit return value is "true".
            If a null string or empty string value is given to attribute systemLanguage, the attribute returns "false".
            </summary>
            <param name="systemLanguage"></param>
            <returns></returns>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.MarkerPosition">
            <summary>
            MarkerPosition
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.ObjAlign">
            <summary>
            ObjAlign
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.ObjectBoundingBoxUnits">
            <summary>
            ObjectBoundingBoxUnits
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.ObjectBoundingBoxUnits.UserSpaceOnUse">
            <summary>
            userSpaceOnUse 
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.ObjectBoundingBoxUnits.ObjectBoundingBox">
            <summary>
            objectBoundingBox 
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.ObjMeetOrSlice">
            <summary>
            ObjMeetOrSlice
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.Overflow">
            <summary>
            Overflow
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.PreserveAspectRatio">
            <summary>
            PreserveAspectRatio
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.SpreadMethod">
            <summary>
            SpreadMethod
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.SpreadMethod.Pad">
            <summary>
            pad
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.SpreadMethod.Reflect">
            <summary>
            reflect
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.SpreadMethod.Repeat">
            <summary>
            repeat 
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.TextAnchor">
            <summary>
            TextAnchor
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.TextDecoration">
            <summary>
            TextDecoration
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.UnicodeBidi">
            <summary>
            UnicodeBidi
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.Units">
            <summary>
            enum Units 
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.Units.Px">
            <summary>
            px
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.Units.Mm">
            <summary>
            mm
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.Units.Cm">
            <summary>
            cm
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.Units.Inch">
            <summary>
            inch
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.Units.Pc">
            <summary>
            pc
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.Units.Pt">
            <summary>
            pt
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.Units.Percents">
            <summary>
            percents
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.Units.Em">
            <summary>
            em
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.Units.Ex">
            <summary>
            ex
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.ViewBox">
            <summary>
            View box rectangle of current view port
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.ViewBox.MinX">
            <summary>
            MinX
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.ViewBox.MinY">
            <summary>
            MinY
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.ViewBox.Width">
            <summary>
            Width
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.ViewBox.Height">
            <summary>
            Height
            </summary>
        </member>
        <member name="F:TallComponents.SvgConvertor.Types.ViewBox.RelativeContent">
            <summary>
            RelativeContent
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Types.ViewBox.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Types.ViewBox.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Ctor
            </summary>
            <param name="minX"></param>
            <param name="minY"></param>
            <param name="width"></param>
            <param name="heigth"></param>
        </member>
        <member name="M:TallComponents.SvgConvertor.Types.ViewBox.#ctor(System.Double[])">
            <summary>
            Ctor
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:TallComponents.SvgConvertor.Types.ViewBox.#ctor(TallComponents.SvgConvertor.Types.ViewBox)">
            <summary>
            Ctor
            </summary>
            <param name="viewBox"></param>
        </member>
        <member name="P:TallComponents.SvgConvertor.Types.ViewBox.IsEmpty">
            <summary>
            IsEmpty
            </summary>
        </member>
        <member name="M:TallComponents.SvgConvertor.Types.ViewBox.ParseViewBoxValue(System.String)">
            <summary>
            ParseViewBoxValue
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TallComponents.SvgConvertor.Types.ViewBox.Transform(TallComponents.PDF.Transforms.Transform)">
            <summary>
            Transform view box
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:TallComponents.SvgConvertor.Types.ViewBox.Add(TallComponents.SvgConvertor.Types.ViewBox)">
            <summary>
            Add veiw box, result max region
            </summary>
            <param name="vb"></param>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.ViewPort">
            <summary>
            View port bounds
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.WritingDirection">
            <summary>
            WritingDirection
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.WritingMode">
            <summary>
            WritingMode
            </summary>
        </member>
        <member name="T:TallComponents.SvgConvertor.Types.XmlSpace">
            <summary>
            XmlSpace
            </summary>
        </member>
        <member name="T:TallComponents.Utility.EventBasedCredentials">
            <summary>
            Helper class to cast from the previously used GetWebCredentials event, to the ICredentials used in the current UrlLoader version.
            </summary>
        </member>
        <member name="M:TallComponents.Utility.EventBasedCredentials.#ctor(System.Object,TallComponents.PDF.GetWebCredentialsEventHandler)">
            <summary>
            Constrctor.
            </summary>
            <param name="sender">The original requester for the load command, used by the handler.</param>
            <param name="handler">The delegate to call to retrieve the web credentials.</param>
        </member>
        <member name="M:TallComponents.Utility.EventBasedCredentials.GetCredential(System.Uri,System.String)">
            <summary>
             Returns a System.Net.NetworkCredential object that is associated with the
             specified URI, and authentication type.
            </summary>
            <param name="uri">The System.Uri that the client is providing authentication for.</param>
            <param name="authType">The type of authentication, as defined in the System.Net.IAuthenticationModule.AuthenticationType property.</param>
            <returns>
             The System.Net.NetworkCredential that is associated with the specified URI
             and authentication type, or, if no credentials are available, null.
            </returns>
        </member>
        <member name="T:TallComponents.Utility.StringReaderHelper">
            <summary>
            Helps converting a stream into a string.
            </summary>
        </member>
        <member name="M:TallComponents.Utility.StringReaderHelper.ReadAsStringFromStream(System.IO.Stream)">
            <summary>
            Reads the content from the stream into a string.
            </summary>
            <remarks>The string will be determined using the UTF8-encoding.</remarks>
            <param name="inputStream">The stream to read.</param>
            <returns>The string with the content read from the stream.</returns>
        </member>
        <member name="M:TallComponents.Utility.StringReaderHelper.ReadAsStringFromBytes(System.Byte[])">
            <summary>
            Reads the content from the byte[] into a string.
            </summary>
            <remarks>The string will be determined using the UTF8-encoding.</remarks>
            <param name="input">The bytes to read.</param>
            <returns>The string with the content from the bytes.</returns>
        </member>
        <member name="T:TallComponents.IReadOnlyCollection`1">
            <summary>
            This interface is used to make sure all our collection classes share the same interface.
            </summary>
            <typeparam name="T">The type fron the collection</typeparam>
        </member>
        <member name="P:TallComponents.IReadOnlyCollection`1.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="M:TallComponents.IReadOnlyCollection`1.Contains(`0)">
            <summary>
            Contains
            </summary>
        </member>
        <member name="M:TallComponents.IReadOnlyCollection`1.IndexOf(`0)">
            <summary>
            IndexOf
            </summary>
        </member>
        <member name="P:TallComponents.IReadOnlyCollection`1.Item(System.Int32)">
            <summary>
            Index property
            </summary>
        </member>
        <member name="T:TallComponents.MTCollectionFromIList`1">
            <summary>
            A collection implementation that provides thread-safe access.
            </summary>
            <remarks>The enumerators cannot be used while modifying the collection. If you use an enumerator and change the 
            collection at the same time, you will get an exception.</remarks>
        </member>
        <member name="M:TallComponents.MTCollectionFromIList`1.GetEnumerator">
            <summary>
            Implements strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.MTCollectionFromIList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="P:TallComponents.MTCollectionFromIList`1.Item(System.Int32)">
            <summary>
            Retrieve an item by 0-based index. 
            </summary>
        </member>
        <member name="P:TallComponents.MTCollectionFromIList`1.Count">
            <summary>
            The number of messages.
            </summary>
        </member>
        <member name="T:TallComponents.ReadOnlyCollection`1">
            <summary>
            Read-only collection.
            </summary>
        </member>
        <member name="M:TallComponents.ReadOnlyCollection`1.GetEnumerator">
            <summary>
            A strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="M:TallComponents.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerable.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="P:TallComponents.ReadOnlyCollection`1.Item(System.Int32)">
            <summary>
            Retrieve an item by 0-based index. 
            </summary>
        </member>
        <member name="P:TallComponents.ReadOnlyCollection`1.First">
            <summary>
            Retrieve the first element. Returns default(T) if the collection is empty.
            </summary>
        </member>
        <member name="P:TallComponents.ReadOnlyCollection`1.Last">
            <summary>
            Retrieve the last element. Returns default(T) if the collection is empty.
            </summary>
        </member>
        <member name="P:TallComponents.ReadOnlyCollection`1.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="M:TallComponents.ReadOnlyCollection`1.Contains(`0)">
            <summary>
            Determine whether an item is present in the collection.
            </summary>
            <param name="item">The item.</param>
            <returns>True if the item is found in this collection, false otherwise.</returns>
            <remarks>
            The <paramref name="item"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.ReadOnlyCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified item in the collection.
            </summary>
            <param name="item">The item to locate in the collection.</param>
            <returns>The zero-based index at which the item is found, -1 if not found.</returns>
        </member>
        <member name="T:TallComponents.ReadOnlyCollectionImplementation`1">
            <summary>
            Read-only collection.
            </summary>
        </member>
        <member name="M:TallComponents.ReadOnlyCollectionImplementation`1.#ctor(TallComponents.IReadOnlyCollection{`0})">
            <summary>
            Create a read-only collection from another (read-only) collection.
            </summary>
            <param name="collection">The IReadOnlyCollection.</param>
            <remarks>As ICollection also implements IReadOnlyCollection, the argument does not
            realy have to be read-only. The purpose of this (public) class, is to encapsulate (internal) collections
            so that they can only be used in a read-only manner.</remarks>
        </member>
        <member name="M:TallComponents.ReadOnlyCollectionImplementation`1.GetEnumerator">
            <summary>
            Implements a strong typed IEnumerable&lt;T&gt;.GetEnumerator.
            </summary>
            <returns>Enumerator for this collection.</returns>
        </member>
        <member name="P:TallComponents.ReadOnlyCollectionImplementation`1.Item(System.Int32)">
            <summary>
            Retrieve an item by 0-based index. 
            </summary>
        </member>
        <member name="P:TallComponents.ReadOnlyCollectionImplementation`1.Count">
            <summary>
            The number of items in the collection.
            </summary>
        </member>
        <member name="M:TallComponents.ReadOnlyCollectionImplementation`1.Contains(`0)">
            <summary>
            Determine whether an item is present in the collection.
            </summary>
            <param name="item">The item.</param>
            <returns>True if the item is found in this collection, false otherwise.</returns>
            <remarks>
            The <paramref name="item"/> does not accept a <see langword="null"/> as a valid value. 
            </remarks>
            <exception cref="T:System.ArgumentNullException">The given <paramref name="item"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TallComponents.ReadOnlyCollectionImplementation`1.IndexOf(`0)">
            <summary>
            Searches for the specified item in the collection.
            </summary>
            <param name="item">The item to locate in the collection.</param>
            <returns>The zero-based index at which the item is found, -1 if not found.</returns>
        </member>
        <member name="T:TallComponents.ICollection`1">
            <summary>
            Collection interface.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="M:TallComponents.ICollection`1.Add(`0)">
            <summary>
            Add
            </summary>
        </member>
        <member name="M:TallComponents.ICollection`1.Remove(`0)">
            <summary>
            Remove
            </summary>
        </member>
        <member name="M:TallComponents.ICollection`1.AddRange(`0[])">
            <summary>
            AddRange
            </summary>
        </member>
        <member name="M:TallComponents.ICollection`1.Insert(System.Int32,`0)">
            <summary>
            Insert
            </summary>
        </member>
        <member name="M:TallComponents.ICollection`1.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:TallComponents.ICollection`1.RemoveAt(System.Int32)">
            <summary>
            RemoveAt
            </summary>
        </member>
        <member name="T:EMFConverter.Common.BinaryRasterUtil">
            <summary>
            Utility methods for raster operations
            </summary>
        </member>
        <member name="M:EMFConverter.Common.BinaryRasterUtil.ApplyRop2(System.Drawing.Bitmap,EMFConverter.Common.IGraphicManager)">
            <summary>
            Apply ActualRop2 settings in given graphics manager on the given bitmap;
            </summary>
        </member>
        <member name="M:EMFConverter.Common.BinaryRasterUtil.IsPattern(System.Drawing.Bitmap)">
            <summary>
            Is the given bitmap a binary pattern?
            </summary>
        </member>
        <member name="M:EMFConverter.Common.BinaryRasterUtil.IsActualBrushSolid(EMFConverter.Common.IGraphicManager,System.Drawing.Color@)">
            <summary>
            Is the actual brush of the graphics manager a solid brush?
            </summary>
        </member>
        <member name="T:EMFConverter.Common.ColorUtil">
            <summary>
            Color utility methods
            </summary>
        </member>
        <member name="M:EMFConverter.Common.ColorUtil.ToString(TallComponents.PDF.Colors.Color)">
            <summary>
            Convert a TC color to string
            </summary>
        </member>
        <member name="T:EMFConverter.Common.DataReader">
            <summary>
            Memory efficient helper for reading numbers from a (shared) byte array.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Default ctor
            </summary>
            <param name="data">The raw data</param>
            <param name="startOffset">First offset in the raw data</param>
            <param name="length">Number of bytes available</param>
        </member>
        <member name="M:EMFConverter.Common.DataReader.Skip(System.Int32)">
            <summary>
            Move the current offset by the given number of bytes.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.Align(System.Int32)">
            <summary>
            Skip forward until a given alignment from the start offset it reached.
            </summary>
        </member>
        <member name="P:EMFConverter.Common.DataReader.Remaining">
            <summary>
            Gets the remaining number of bytes.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetCurrentPosition">
            <summary>
            Gets the current position.
            Used to restore it later.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetInt32">
            <summary>
            Gets a 32-bit signed int.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetUInt32">
            <summary>
            Gets a 32-bit unsigned int.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetInt16">
            <summary>
            Gets a 16-bit signed int.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetUInt16">
            <summary>
            Gets a 16-bit unsigned int.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetByte">
            <summary>
            Gets a 8-bit signed int.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetBytes(System.Int32)">
            <summary>
            Gets an array of bytes.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetSingle">
            <summary>
            Gets a 32-bit float.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.SubReader(System.Int32)">
            <summary>
            Create a new reader at the given position with the given length
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetPointL">
            <summary>
            Read a PointL.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetPointSR">
            <summary>
            Read a PointS reverse ordered (Y, X)
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetPointS">
            <summary>
            Read a PointS ordered X, Y
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetRectL">
            <summary>
            Read a RectL.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetRectSR">
            <summary>
            Read a RectSR.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetSizeL">
            <summary>
            Read a SizeL.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetSizeSR">
            <summary>
            Read a SizeSR.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetColorRef">
            <summary>
            Read a ColorRef object
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetRGBQuad">
            <summary>
            Read an RGBQuad
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.GetString(System.Text.Encoding,System.Int32)">
            <summary>
            Gets an encoded string of a given number of bytes.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.CheckRemaining(System.Int32)">
            <summary>
            Check if there is sufficient data
            </summary>
        </member>
        <member name="T:EMFConverter.Common.DataReader.Position">
            <summary>
            An index in a data reader's data.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.Position.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.Position.Restore">
            <summary>
            Set the current position of the reader to my position.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DataReader.Position.Diff(EMFConverter.Common.DataReader.Position)">
            <summary>
            Gets the difference between this and other calculated as:
            this.offset - other.offset
            </summary>
        </member>
        <member name="P:EMFConverter.Common.DeviceContext.WindowOrigin">
            <summary>
            Output window origin
            </summary>
        </member>
        <member name="P:EMFConverter.Common.DeviceContext.WindowExtent">
            <summary>
            Size of output window
            </summary>
        </member>
        <member name="P:EMFConverter.Common.DeviceContext.ViewportOrigin">
            <summary>
            View port origin
            </summary>
        </member>
        <member name="P:EMFConverter.Common.DeviceContext.ViewportExtent">
            <summary>
            Size of view port
            </summary>
        </member>
        <member name="T:EMFConverter.Common.DIBPatternBrush">
            <summary>
            Pattern brush based on a DIB
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DIBPatternBrush.#ctor(EMFConverter.Objects.DeviceIndependentBitmap,EMFConverter.Common.IGraphicManager)">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:EMFConverter.Common.DIBPatternBrush.EMFConverter#Common#IShapeModifyingBrush#Modify(TallComponents.PDF.Shapes.ContentShape)">
            <summary>
            Modify the given shape
            </summary>
        </member>
        <member name="T:EMFConverter.Common.GraphicObject">
            <summary>
            Represents graphic object like Brush, Font etc in graphic object array.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObject.#ctor">
            <summary>
            Creates an empty GraphicObject array element.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObject.#ctor(System.Object,EMFConverter.Common.ObjectType)">
            <summary>
            Creates an initialize GraphicObject array element.
            </summary>
        </member>
        <member name="P:EMFConverter.Common.GraphicObject.Object">
            <summary>
            Reference to graphic object. Must be casted to right type depending on ObjectType field value.
            </summary>
        </member>
        <member name="P:EMFConverter.Common.GraphicObject.ObjectType">
            <summary>
            Type of graphic object
            </summary>
        </member>
        <member name="T:EMFConverter.Common.GraphicObjectsTable">
            <summary>
            Fixed length table of GraphicObject instances.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObjectsTable.#ctor(System.Int32)">
            <summary>
            Initialize a new table with a given length.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObjectsTable.GetEntry(System.Int32,System.Object@)">
            <summary>
            Gets the object (type and value) at the given index.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObjectsTable.AddBrush(TallComponents.PDF.Brushes.Brush)">
            <summary>
            Add the given brush to the first free entry.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObjectsTable.AddBrush(TallComponents.PDF.Brushes.Brush,System.Int32)">
            <summary>
            Add the given brush to the given entry.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObjectsTable.AddPen(TallComponents.PDF.Pens.Pen)">
            <summary>
            Add the given pen to the first free entry.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObjectsTable.AddPen(TallComponents.PDF.Pens.Pen,System.Int32)">
            <summary>
            Add the given pen to the given entry.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObjectsTable.AddFont(TallComponents.PDF.Fonts.Font)">
            <summary>
            Add the given font to the first free entry.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObjectsTable.AddFont(TallComponents.PDF.Fonts.Font,System.Int32)">
            <summary>
            Add the given font to the given entry.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObjectsTable.AddFont(EMFConverter.Emf.Functions.EMFFont,System.Int32)">
            <summary>
            Add the given font to the given entry.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObjectsTable.AddPalette(System.Object)">
            <summary>
            Add the given palette to the first free entry.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObjectsTable.AddRegion(System.Object)">
            <summary>
            Add the given region to the first free entry.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObjectsTable.DeleteObject(System.Int32)">
            <summary>
            Remove the given entry.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObjectsTable.Add(System.Object,EMFConverter.Common.ObjectType,System.Int32)">
            <summary>
            Add the given object at a free location
            </summary>
        </member>
        <member name="M:EMFConverter.Common.GraphicObjectsTable.FindPlace">
            <summary>
            Find a free entry in the table.
            </summary>
        </member>
        <member name="T:EMFConverter.Common.IFunction">
            <summary>
            Interface for all methods that represents WMF or EMF records
            </summary>
        </member>
        <member name="M:EMFConverter.Common.IFunction.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Executes WMF or EMF function and returns Shape if function draws anything (some functions like SelectObject don't draw anything)
            </summary>
            <param name="graphicManager">A reference to WMFGraphicManager or EMFGraphicManager object</param>
            <returns>Shape or null (when function doesn't draw anything)</returns>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.ActualPosition">
            <summary>
            Coordinate of actual point
            </summary>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.ActualPen">
            <summary>
            Actual pen object
            </summary>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.ActualBrush">
            <summary>
            Actual brush object
            </summary>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.ActualRop2">
            <summary>
            Raster operation mode
            </summary>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.FontBold">
            <summary>
            True if font is bolded
            </summary>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.FontItalic">
            <summary>
            True if font is italic
            </summary>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.FontUnderline">
            <summary>
            True if font is underlined
            </summary>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.FontStrikeOut">
            <summary>
            True if font is strikedout
            </summary>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.FontRotation">
            <summary>
            Rotation of text in degrees
            </summary>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.FontColor">
            <summary>
            Actual font color
            </summary>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.BackgroundColor">
            <summary>
            Actual background color
            </summary>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.Opacity">
            <summary>
            Actual opacity of shapes (0 is fully transparent)
            </summary>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.TextAlign">
            <summary>
            Current text alignment mode
            </summary>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.MiterLimit">
            <summary>
            MiterLimit 
            </summary>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.ObjectsTable">
            <summary>
            Gets the object table.
            </summary>
        </member>
        <member name="M:EMFConverter.Common.IGraphicManager.SelectObject(System.Int32)">
            <summary>
            Select object from Object Table and set it as actual
            </summary>
            <param name="objectIndex">Index of object to select</param>
        </member>
        <member name="P:EMFConverter.Common.IGraphicManager.ReversedYOrientation">
            <summary>
            ReversedYOrientation
            </summary>
        </member>
        <member name="T:EMFConverter.Common.IReader">
            <summary>
            Interface for WMFReader and EMFReader classes
            </summary>
        </member>
        <member name="T:EMFConverter.Common.IShapeModifyingBrush">
            <summary>
            Implemented by brushes that need to modify shapes
            </summary>
        </member>
        <member name="M:EMFConverter.Common.IShapeModifyingBrush.Modify(TallComponents.PDF.Shapes.ContentShape)">
            <summary>
            Modify the given shape
            </summary>
        </member>
        <member name="T:EMFConverter.Common.MetaFileReader">
            <summary>
            Reads data from stream and converts into IMetaFile object.
            </summary>
        </member>
        <member name="P:EMFConverter.Common.MetaFileReader.Data">
            <summary>
            Raw data structure red directly form MetaFile.
            </summary>
        </member>
        <member name="P:EMFConverter.Common.MetaFileReader.Reader">
            <summary>
            Reader object used to parse MetaFile
            </summary>
        </member>
        <member name="M:EMFConverter.Common.MetaFileReader.#ctor(System.IO.Stream)">
            <summary>
            Initialize MetaFileReader and create WMF or EMF reader instance.
            </summary>
            <param name="metaFileStream"></param>
        </member>
        <member name="M:EMFConverter.Common.MetaFileReader.Read">
            <summary>
            Parse Metafile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EMFConverter.Common.RecordReader.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Default ctor
            </summary>
            <param name="data">The raw data</param>
            <param name="startOffset">First offset in the raw data pointing towards the start of the record.</param>
            <param name="length">Number of bytes available</param>
        </member>
        <member name="P:EMFConverter.Common.RecordReader.Start">
            <summary>
            Gets the start of the record.
            </summary>
        </member>
        <member name="T:EMFConverter.Common.TextUtil">
            <summary>
            Text utility methods
            </summary>
        </member>
        <member name="M:EMFConverter.Common.TextUtil.ApplyTextAlignmentMode(EMFConverter.Common.IGraphicManager,TallComponents.PDF.Shapes.TextShape,TallComponents.PDF.Transforms.TranslateTransform,System.Double,EMFConverter.Enums.GraphicsMode)">
            <summary>
            Perform transformations based on the current text alignent mode
            </summary>
        </member>
        <member name="T:EMFConverter.EMFGraphics">
            <summary>
            Top-level class to convert EMF or WMF file to ShapeCollection object.
            </summary>
        </member>
        <member name="M:EMFConverter.EMFGraphics.#ctor(System.IO.Stream)">
            <summary>
            Creates an EMFGraphics object
            </summary>
            <param name="metaFileStream">Stream with metafile data</param>
        </member>
        <member name="M:EMFConverter.EMFGraphics.Normalize(System.IO.Stream)">
            <summary>
            Convert the given METAFILE input to normalized EMF
            </summary>
        </member>
        <member name="M:EMFConverter.EMFGraphics.CreateShapes">
            <summary>
            Generates shapes from data received in constructor.
            </summary>
            <returns>Collection of Shape object</returns>
        </member>
        <member name="M:EMFConverter.EMFGraphics.ToString">
            <summary>
            Generates information about records in metafile. It must be called AFTER CreateShapes()
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="M:EMFConverter.Emf.EMFFile.#ctor(EMFConverter.Emf.EMFHeader)">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFFile.Header">
            <summary>
            Gets header of file
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFFile.Width">
            <summary>
            Width of the image in device units
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFFile.Height">
            <summary>
            Height of the image in device units
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.EMFFile.CreateShapes">
            <summary>
            Create shapes for this EMF file.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.EMFGraphicManager.#ctor(EMFConverter.Emf.EMFHeader)">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFGraphicManager.FlushActualLayerAfterFunction">
            <summary>
            Should the actual layer be flushed after the current function?
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.EMFGraphicManager.FlushActualLayer">
            <summary>
            Add the actual layer to the master shape collection
            and start a new layer.
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFGraphicManager.MiterLimit">
            <summary>
            MiterLimit
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFGraphicManager.ActPointX">
            <summary>
            X coordinate of actual point
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFGraphicManager.ActPointY">
            <summary>
            Y coordinate of actual point
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFGraphicManager.GraphicWidth">
            <summary>
            Width of all graphic
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFGraphicManager.GraphicHeight">
            <summary>
            Height of all graphic
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFGraphicManager.ShapeSize">
            <summary>
            Size of graphic + frame
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFGraphicManager.Bounds">
            <summary>
            Specifies the rectangular inclusive-inclusive bounds in device units of the smallest rectangle 
            that can be drawn around the image stored in the metafile
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFGraphicManager.ActualRop2">
            <summary>
            Raster operation mode
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.EMFGraphicManager.AddLayerTransform(TallComponents.PDF.Shapes.ContentShape,EMFConverter.Enums.GraphicsMode)">
            <summary>
            Gets a transform to tranform a shape from logical space to PDF space.
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFGraphicManager.PathBracketManager">
            <summary>
            Gets the path bracket manager for direct path operations.
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFGraphicManager.ActualDC">
            <summary>
            Current device content
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.EMFGraphicManager.SaveDC">
            <summary>
            Save the current device context
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.EMFGraphicManager.RestoreDC">
            <summary>
            Restore a device context which was saved before.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.EMFGraphicManager.ModifyWorldTransform(EMFConverter.Enums.ModifyWorldTransformMode,EMFConverter.Objects.WorldTransform)">
            <summary>
            Adjust the current world transform
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFGraphicManager.ObjectsTable">
            <summary>
            Gets the object table.
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFGraphicManager.ReversedYOrientation">
            <summary>
            ReversedYOrientation
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFHeader.DeviceSizePixels">
            <summary>
            The size of the reference device, in pixels.
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFHeader.DeviceSizeMillimeters">
            <summary>
            The resolution of the reference device, in millimeters.
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFHeader.Size">
            <summary>
            Size of header record
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFHeader.Bounds">
            <summary>
            A WMF RectL object ([MS-WMF] section 2.2.2.19) that specifies the rectangular inclusive-inclusive 
            bounds in device units of the smallest rectangle that can be drawn around the image stored in the metafile.
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFHeader.Frame">
            <summary>
            A WMF RectL object that specifies the rectangular inclusive-inclusive dimensions, in .01 millimeter units, 
            of a rectangle that surrounds the image stored in the metafile.
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFHeader.DPI">
            <summary>
            Gets dot per inch
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.EMFHeader.Paper">
            <summary>
            Gets the origin and size of the EMF image 
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.EMFHeader.ToString">
            <summary>
            Get string representation
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.EMFRecord.ReadHeader(System.Byte[],System.Int32,System.Int32@,EMFConverter.Emf.EMFRecordType@)">
            <summary>
            Read an EMF record header and create a reader for its arguments.
            </summary>
        </member>
        <member name="T:EMFConverter.Emf.Functions.AbortPath">
            <summary>
            This record aborts a path bracket or discards the path from a closed path bracket.
            </summary>
        </member>
        <member name="T:EMFConverter.Emf.Functions.Arc">
            <summary>
            The Enhanced Metafile Format EMR_ARC record specifies an elliptical arc.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Arc.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">EMR_ARC Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Arc.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Creates a arc using data from constructor
            </summary>
            <param name="graphicManager">A reference to graphicManager object</param>
            <returns>ArcShape object</returns>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Arc.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.ArcTo">
            <summary>
            The Enhanced Metafile Format EMR_ARCTO record specifies an elliptical arc. It resets the current position to the end point of the arc.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.ArcTo.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">EMR_ARCTO Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.ArcTo.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Creates a arc using data from constructor
            </summary>
            <param name="graphicManager">A reference to graphicManager object</param>
            <returns>ArcShape object</returns>
        </member>
        <member name="M:EMFConverter.Emf.Functions.ArcTo.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.BeginPath">
            <summary>
            This record opens a path bracket in the current playback device context.
            After a path bracket is open, an application can begin processing records to define the points that lie in the path. 
            An application MUST close an open path bracket by processing the EMR_ENDPATH record.
            When an application processes the EMR_BEGINPATH record, all previous paths MUST be discarded from the playback device context.
            </summary>
        </member>
        <member name="T:EMFConverter.Emf.Functions.BitBlt">
            <summary>
            The Enhanced Metafile Format (EMF) EMR_BITBLT record specifies a block transfer of pixels from a source bitmap,
            optionally in combination with a brush pattern, to the playback device context, according to a specified raster operation.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.BitBlt.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_BITBLT Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.BitBlt.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.CloseFigure">
            <summary>
            CLOSEFIGURE
            This record closes an open figure in a path.
            Processing the EMR_CLOSEFIGURE record MUST close the figure by drawing a line from the current position to the 
            first point of the figure, and then it MUST connect the lines by using the line join style. If a figure is closed by 
            processing the EMR_LINETO record instead of the EMR_CLOSEFIGURE record, end caps are used to create the corner instead
            of a join. EMR_LINETO is specified in section 2.3.5.13.
            The EMR_CLOSEFIGURE record SHOULD only be used if there is an open path bracket in the playback device context.
            A figure in a path is open unless it is explicitly closed by processing this record. Note: A figure can be open even if 
            the current point and the starting point of the figure are the same.
            After processing the EMR_CLOSEFIGURE record, adding a line or curve to the path MUST start a new figure.
            </summary>
        </member>
        <member name="T:EMFConverter.Emf.Functions.Comment">
            <summary>
            The comment record types define formats for specifying arbitrary private data, embedding records in 
            other metafile formats, and adding new or special-purpose commands.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Comment.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.CreateBrushIndirect.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.CreateDibPatternBrush">
            <summary>
            The EMR_CREATEDIBPATTERNBRUSHPT record defines a pattern brush for graphics operations. 
            The pattern is specified by a DIB.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.CreateDibPatternBrush.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">EMR_CREATEDIBPATTERNBRUSHPT Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.CreateDibPatternBrush.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Creates a brush pattern DIB using data from constructor
            </summary>
            <param name="graphicManager">A reference to a GraphicManager object</param>
            <returns>null</returns>
        </member>
        <member name="M:EMFConverter.Emf.Functions.CreateDibPatternBrush.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.CreateExtPen">
            <summary>
            The Enhanced Metafile Format (EMF) EMR_EXTCREATEPEN record specifies a logical cosmetic 
            or geometric pen that has the specified style, width, and brush attributes.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.CreateExtPen.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_EXTCREATEPEN Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.CreateExtPen.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.CreateFont">
            <summary>
            The Enhanced Metafile Format (EMF) EMR_EXTCREATEFONTINDIRECTW record creates a logical font object from specified logical font data. 
            The font object can subsequently be selected as the current font in the metafile playback device context.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.CreateFont.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">EMR_EXTCREATEFONTINDIRECTW Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.CreateFont.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.CreateMonoBrush">
            <summary>
            The Enhanced Metafile Format EMR_CREATEMONOBRUSH record specifies a logical brush with the specified bitmap pattern. 
            The bitmap can be a DIB section bitmap or it can be a device-dependent bitmap.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.CreateMonoBrush.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">EMR_CREATEMONOBRUSH arguments.</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.CreateMonoBrush.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.CreatePen">
            <summary>
            The Enhanced Metafile Format EMR_CREATEPEN record specifies a logical pen that has the specified style, width, and color. 
            The pen can subsequently be selected into a playback device context and used to draw lines and curves.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.CreatePen.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">EMR_CREATEPEN Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.CreatePen.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Creates a pen using data from constructor
            </summary>
            <param name="graphicManager">A reference to WMFGraphicManager object</param>
            <returns>null</returns>
        </member>
        <member name="M:EMFConverter.Emf.Functions.CreatePen.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.Ellipse">
            <summary>
            The Enhanced Metafile Format EMR_ELLIPSE record specifies an ellipse. 
            The center of the ellipse is the center of the specified bounding rectangle. 
            The ellipse is outlined by using the current pen and is filled by using the current brush.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Ellipse.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_ELLIPSE Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Ellipse.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.EMFFont">
            <summary>
            Representation of a font.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.EMFFont.#ctor(EMFConverter.Objects.LogFont)">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.EMFFont.#ctor(TallComponents.PDF.Fonts.Font,System.Double)">
            <summary>
            PDF font initializer
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.Functions.EMFFont.Height">
            <summary>
            Gets font height
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.Functions.EMFFont.Font">
            <summary>
            Gets the PDF font
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.Functions.EMFFont.Underline">
            <summary>
            Underline on?
            </summary>
        </member>
        <member name="T:EMFConverter.Emf.Functions.EndPath">
            <summary>
            This record closes a path bracket and selects the path defined by the bracket into the playback device context.
            </summary>
        </member>
        <member name="T:EMFConverter.Emf.Functions.ExText">
            <summary>
            Draws ASCII / Unicode text with the currently selected font, background 
            color, and text color.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.ExText.#ctor(EMFConverter.Common.RecordReader,System.Text.Encoding,System.Int32)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.ExText.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.ExTextA">
            <summary>
            Draws ASCII text with the currently selected font, background 
            color, and text color.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.ExTextA.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_EXTTEXTOUTA Function arguments</param>
        </member>
        <member name="T:EMFConverter.Emf.Functions.ExTextW">
            <summary>
            Draws Unicode text with the currently selected font, background 
            color, and text color.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.ExTextW.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_EXTTEXTOUTW Function arguments</param>
        </member>
        <member name="T:EMFConverter.Emf.Functions.FillPath">
            <summary>
            The EMR_FILLPATH record closes any open figures in the current path and fills the path's interior by using 
            the current brush and polygon-filling mode.
            </summary>
        </member>
        <member name="T:EMFConverter.Emf.Functions.FillRegion">
            <summary>
            The EMR_FILLRGN record fills the specified region by using the specified brush
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.FillRegion.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Read from given data
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.FillRegion.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.FlattenPath">
            <summary>
            This record transforms any curves in the selected path into the playback device context; each curve MUST be turned into a sequence of lines.
            </summary>
        </member>
        <member name="T:EMFConverter.Emf.Functions.IntersectCliprect">
            <summary>
            The EMR_INTERSECTCLIPRECT record specifies a new clipping region from the intersection of the current clipping region and the specified rectangle.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.IntersectCliprect.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.LineTo">
            <summary>
            The EMR_LINETO record specifies a line from the current position up to, but not including, the specified point. 
            It resets the current position to the specified point.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.LineTo.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="M:EMFConverter.Emf.Functions.ModifyWorldTransform.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.MoveToEx">
            <summary>
            The Enhanced Metafile Format EMR_MOVETOEX record specifies coordinates of the new current position in logical units.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.MoveToEx.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_MOVETOEX Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.MoveToEx.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.Pie">
            <summary>
            The EMR_PIE record specifies a pie-shaped wedge bounded by the intersection of an ellipse and two radials. 
            The pie is outlined by using the current pen and filled by using the current brush.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Pie.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">EMR_PIE Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Pie.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Creates a arc using data from constructor
            </summary>
            <param name="graphicManager">A reference to graphicManager object</param>
            <returns>ArcShape object</returns>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Pie.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.PolyBezier">
            <summary>
            The Enhanced Metafile Format (EMF) EMR_POLYBEZIER record specifies one or more Bezier curves.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.PolyBezier.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_POLYBEZIER Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.PolyBezier.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.Polybezier16">
            <summary>
            The Enhanced Metafile Format EMR_POLYBEZIER16 record specifies one or more Bezier curves.
            The curves are drawn using the current pen.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Polybezier16.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_POLYBEZIER16 Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Polybezier16.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.PolyBezierTo">
            <summary>
            The Enhanced Metafile Format (EMF) EMR_POLYBEZIERTO record specifies one or more Bezier curves based upon the current position.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.PolyBezierTo.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_POLYBEZIER Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.PolyBezierTo.CreateShape(EMFConverter.Common.IGraphicManager,EMFConverter.Objects.Point[])">
            <summary>
            Create a shape for the given parameters
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.PolyBezierTo.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.PolybezierTo16">
            <summary>
            The Enhanced Metafile Format (EMF) EMR_POLYBEZIERTO16 record 
            specifies one or more Bezier curves based on the current position.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.PolybezierTo16.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_POLYBEZIER16 Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.PolybezierTo16.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.Polygon">
            <summary>
            The Enhanced Metafile Format (EMF) EMR_POLYGON record specifies a polygon consisting of two or more vertices connected by straight lines.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Polygon.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">EMR_POLYGON Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Polygon.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Polygon16.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.PolyLine">
            <summary>
            The Enhanced Metafile Format (EMF) EMR_POLYLINE record specifies a series of line segments by connecting the points in the specified array.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.PolyLine.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_POLYLINE Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.PolyLine.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.Polyline16">
            <summary>
            The Enhanced Metafile Format EMR_POLYLINE16 record specifies a series of line 
            segments by connecting the points in the specified array.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Polyline16.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_POLYLINE16 Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Polyline16.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.PolyLineTo">
            <summary>
            The Enhanced Metafile Format (EMF) EMR_POLYLINETO record specifies one or more straight lines based upon the current position.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.PolyLineTo.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_POLYLINETO Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.PolyLineTo.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.PolylineTo16">
            <summary>
            The Enhanced Metafile Format EMR_POLYLINETO16 record specifies one or more straight lines based 
            upon the current position. A line is drawn from the current position to the first point specified 
            by the aPoints field by using the current pen. For each additional line, drawing is performed 
            from the ending point of the previous line to the next point specified by aPoints.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.PolylineTo16.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_POLYLINETO16 Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.PolylineTo16.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.PolyPolygon">
             <summary>
            The Enhanced Metafile Format (EMF) EMR_POLYPOLYGON record specifies a series of closed polygons.
             </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.PolyPolygon.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">EMR_POLYPOLYGON Function arguments</param>
        </member>
        <member name="T:EMFConverter.Emf.Functions.PolyPolygon16">
             <summary>
            The Enhanced Metafile Format (EMF) EMR_POLYPOLYGON16 record specifies a series of closed polygons. 
             Each polygon is outlined using the current pen, and filled using the current brush and polygon fill mode.
             The polygons drawn by this record can overlap.
             </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.PolyPolygon16.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">EMR_POLYPOLYGON16 Function arguments</param>
        </member>
        <member name="T:EMFConverter.Emf.Functions.Rectangle">
            <summary>
            The Enhanced Metafile Format EMR_RECTANGLE record draws a rectangle. 
            The rectangle is outlined by using the current pen and filled by using the current brush.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Rectangle.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_RECTANGLE Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.Rectangle.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.RoundRectangle">
            <summary>
            The Enhanced Metafile Format EMR_ROUNDRECT record draws a rectangle. 
            The rectangle is outlined by using the current pen and filled by using the current brush.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.RoundRectangle.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_ROUNDRECT Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.RoundRectangle.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="M:EMFConverter.Emf.Functions.ScaleViewportEx.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_SCALEVIEWPORTEXT Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.ScaleWindowExtEx.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_SCALEVIEWPORTEXT Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.SetBkColor.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">EMR_SETBKCOLOR Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.SetBkColor.ToString">
            <summary>
            Returns information about SetBkColor.
            </summary>
        </member>
        <member name="T:EMFConverter.Emf.Functions.SetBrushOrgEx">
            <summary>
            The Enhanced Metafile Format EMR_SETBRUSHORGEX record specifies the origin of the current brush.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.SetBrushOrgEx.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">EMR_SETBRUSHORGEX Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.SetBrushOrgEx.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.SetPolyfillMode">
            <summary>
            The Enhanced Metafile Format EMR_SETPOLYFILLMODE record defines polygon fill mode.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.SetPolyfillMode.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">EMR_SETPOLYFILLMODE Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.SetPolyfillMode.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.SetRop2">
            <summary>
            he EMR_SETROP2 record defines a binary raster operation mode.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.SetStretchBltMode.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.SetTextAlign">
            <summary>
            The Enhanced Metafile Format EMR_SETTEXTALIGN record specifies text alignment. 
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.SetTextAlign.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">EMR_SETTEXTALIGN Function arguments.</param>
        </member>
        <member name="T:EMFConverter.Emf.Functions.SetTextColor">
            <summary>
            The Enhanced Metafile Format MR_SETTEXTCOLOR record defines the current text color.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.SetTextColor.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">MR_SETTEXTCOLOR Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.SetTextColor.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Set FontColor.
            </summary>
            <param name="graphicManager"></param>
            <returns></returns>
        </member>
        <member name="M:EMFConverter.Emf.Functions.SetTextColor.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.SetWindowOrgEx">
            <summary>
            Defines the window origin.
            </summary>
        </member>
        <member name="T:EMFConverter.Emf.Functions.SetWorldTransform">
            <summary>
            Set the current transform.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.SetWorldTransform.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.SmallText">
            <summary>
            The Enhanced Metafile Format (EMF) EMR_SMALLTEXTOUT record outputs a string.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.SmallText.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">EMR_SMALLTEXTOUT Function arguments</param>
        </member>
        <member name="M:EMFConverter.Emf.Functions.SmallText.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="M:EMFConverter.Emf.Functions.StretchDibBits.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.StretchDibBits.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Emf.Functions.StrokeAndFillPath">
            <summary>
            The EMR_STROKEPATH record renders the specified path by using the current pen.
            </summary>
        </member>
        <member name="T:EMFConverter.Emf.Functions.StrokePath">
            <summary>
            The EMR_STROKEPATH record renders the specified path by using the current pen.
            </summary>
        </member>
        <member name="T:EMFConverter.Emf.Functions.UnknownFunction">
            <summary>
            Placeholder for unimplemented functions
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.UnknownFunction.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.Functions.UnknownFunction.ToString">
            <summary>
            Gets string representation
            </summary>
        </member>
        <member name="T:EMFConverter.Emf.Functions.WidenPath">
            <summary>
            This record redefines the current path as the area that would be painted if the path were drawn using the pen currently 
            selected into the playback device context.
            </summary>
        </member>
        <member name="T:EMFConverter.Emf.PathBracketManager">
            <summary>
            Helper used to manage the state of the current path bracket.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.PathBracketManager.#ctor(EMFConverter.Emf.EMFGraphicManager)">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.PathBracketManager.PathBracketExists">
            <summary>
            Are we in the middle of a BeginPath - EndPath sequence?
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.PathBracketManager.BeginPath">
            <summary>
            Open a path bracket, discarding any previous brackets
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.PathBracketManager.AbortPath">
            <summary>
            Aborts a path bracket or discards the path from a closed path bracket.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.PathBracketManager.EndPath">
            <summary>
            Close the current path bracket.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.PathBracketManager.Render(TallComponents.PDF.Pens.Pen,TallComponents.PDF.Brushes.Brush)">
            <summary>
            Renders the current path by using the given pen for the outline and
            the given brush for the interior.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.PathBracketManager.CreateClipPath">
            <summary>
            Create a clip path from the current path bracket.
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.PathBracketManager.CloseFigure">
            <summary>
            Close the open figure and start a new one.
            </summary>
        </member>
        <member name="P:EMFConverter.Emf.PathBracketManager.CurrentPath_">
            <summary>
            Gets the current path (if any)
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.PathBracketManager.BeginFigure">
            <summary>
            Start a new figure
            </summary>
        </member>
        <member name="M:EMFConverter.Emf.PathBracketManager.AddSegments(System.Boolean,TallComponents.PDF.Shapes.FreeHandSegment[])">
            <summary>
            Add the given segments to the current path bracket.
            If there is no current path bracket a new one is temporarily created, ended and returned.
            </summary>
            <returns>A temporary bracket if there is no current bracket, null otherwise.</returns>
        </member>
        <member name="M:EMFConverter.Emf.PathBracketManager.CheckSegments(TallComponents.PDF.Shapes.FreeHandPath,TallComponents.PDF.Shapes.FreeHandSegment[])">
            <summary>
            Verify the validity of the segments in the context of the given path.
            </summary>
        </member>
        <member name="T:EMFConverter.Emf.StockObject">
            <summary>
            Enumeration of pre-definied graphic objects
            </summary>
        </member>
        <member name="F:EMFConverter.Emf.StockObject.WHITE_BRUSH">
            <summary>
            Pre-definied white brush
            </summary>
        </member>
        <member name="F:EMFConverter.Emf.StockObject.LTGRAY_BRUSH">
            <summary>
            Pre-definied light gray brush
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.BitCount.BI_BITCOUNT_0">
            <summary>
            The number of bits per pixel is undefined.
            The image SHOULD be in either JPEG or PNG format. 
            Neither of these formats includes a color table, so this value specifies that no color table is present. 
            See [JFIF] and [RFC2083] for more information concerning JPEG and PNG compression formats.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.BitCount.BI_BITCOUNT_1">
            <summary>
            The image is specified with two colors.
            Each pixel in the bitmap is represented by a single bit. 
            If the bit is clear, the pixel is displayed with the color of the first entry in the color table; 
            if the bit is set, the pixel has the color of the second entry in the table.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.BitCount.BI_BITCOUNT_2">
            <summary>
            The image is specified with a maximum of 16 colors.
            Each pixel in the bitmap is represented by a 4-bit index into the color table, 
            and each byte contains 2 pixels.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.BitCount.BI_BITCOUNT_3">
            <summary>
            The image is specified with a maximum of 256 colors.
            Each pixel in the bitmap is represented by an 8-bit index into the color table, 
            and each byte contains 1 pixel.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.BitCount.BI_BITCOUNT_4">
            <summary>
            The image is specified with a maximum of 2^16 colors.
            Each pixel in the bitmap is represented by a 16-bit value.
            If the Compression field of the BitmapInfoHeader Object is BI_RGB, the Colors field of DIB is NULL. 
            Each WORD in the bitmap array represents a single pixel. The relative intensities of red, green, 
            and blue are represented with 5 bits for each color component. 
            The value for blue is in the least significant 5 bits, followed by 5 bits each for green and red. 
            The most significant bit is not used. The color table is used for optimizing colors on 
            palette-based devices, and contains the number of entries specified by the ColorUsed field 
            of the BitmapInfoHeader Object.
            If the Compression field of the BitmapInfoHeader Object is BI_BITFIELDS, the Colors 
            field contains three DWORD color masks that specify the red, green, and blue components, 
            respectively, of each pixel. Each WORD in the bitmap array represents a single pixel.
            When the Compression field is set to BI_BITFIELDS, bits set in each DWORD mask MUST be 
            contiguous and SHOULD NOT overlap the bits of another mask.
            BI_RGB and BI_BITFIELDS are defined in Compression Enumeration, section 2.1.1.7.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.BitCount.BI_BITCOUNT_5">
            <summary>
            The bitmap has a maximum of 2^24 colors, and the Colors field of DIB is NULL. 
            Each 3-byte triplet in the bitmap array represents the relative intensities of blue, green, 
            and red, respectively, for a pixel. 
            The Colors color table is used for optimizing colors used on palette-based devices, 
            and MUST contain the number of entries specified by the ColorUsed field of the BitmapInfoHeader Object.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.BitCount.BI_BITCOUNT_6">
            <summary>
            The bitmap has a maximum of 2^24 colors.
            If the Compression field of the BitmapInfoHeader Object is set to BI_RGB, the Colors field 
            of DIB is set to NULL. Each DWORD in the bitmap array represents the relative intensities 
            of blue, green, and red, respectively, for a pixel. The high byte in each DWORD is not used. 
            The Colors color table is used for optimizing colors used on palette-based devices, 
            and MUST contain the number of entries specified by the ColorUsed field of the BitmapInfoHeader Object.
            If the Compression field of the BitmapInfoHeader Object is set to BI_BITFIELDS, the Colors 
            field contains three DWORD color masks that specify the red, green, and blue components, 
            respectively, of each pixel. Each DWORD in the bitmap array represents a single pixel.
            When the Compression field is set to BI_BITFIELDS, bits set in each DWORD mask must be 
            contiguous and should not overlap the bits of another mask. 
            All the bits in the pixel do not need to be used.
            BI_RGB and BI_BITFIELDS are specified in Compression Enumeration, section 2.1.1.7.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.Compression.BI_RGB">
            <summary>
            The bitmap is in uncompressed red green blue (RGB) format that is not compressed and does not use color masks.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.Compression.BI_RLE8">
            <summary>
            An RGB format that uses run-length encoding (RLE) compression for bitmaps with 8 bits per pixel. 
            The compression uses a 2-byte format consisting of a count byte followed by a byte containing a color index.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.Compression.BI_RLE4">
            <summary>
            An RGB format that uses RLE compression for bitmaps with 4 bits per pixel. 
            The compression uses a 2-byte format consisting of a count byte followed by two word-length color indexes.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.Compression.BI_BITFIELDS">
            <summary>
            The bitmap is not compressed and the color table consists of three DWORD color masks that specify the red, 
            green, and blue components, respectively, of each pixel. This is valid when used with 16 and 32-bits per pixel bitmaps.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.Compression.BI_JPEG">
            <summary>
            The image is a Joint Photographic Experts Group (JPEG) image, as specified in [JFIF]. 
            This value SHOULD only be used in certain bitmap operations, such as JPEG pass-through. 
            The application MUST query for the pass-through support, since not all devices support JPEG pass-through. 
            Using non-RGB bitmaps MAY limit the portability of the metafile to other devices. For instance, display device contexts generally do not support this pass-through.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.Compression.BI_PNG">
            <summary>
            The image is a Portable Network Graphics (PNG) image, as specified in [RFC2083]. 
            This value SHOULD only be used certain bitmap operations, such as JPEG/PNG pass-through. 
            The application MUST query for the pass-through support, because not all devices support 
            JPEG/PNG pass-through. Using non-RGB bitmaps MAY limit the portability of the metafile to other devices. 
            For instance, display device contexts generally do not support this pass-through.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.Compression.BI_CMYK">
            <summary>
            The image is an uncompressed CMYK format.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.Compression.BI_CMYKRLE8">
            <summary>
            A CMYK format that uses RLE compression for bitmaps with 8 bits per pixel. The compression uses a 2-byte format consisting of a count byte followed by a byte containing a color index.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.Compression.BI_CMYKRLE4">
            <summary>
            A CMYK format that uses RLE compression for bitmaps with 4 bits per pixel. The compression uses a 2-byte format consisting of a count byte followed by two word-length color indexes.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.DIBColors.DIB_RGB_COLORS">
            <summary>
            The color table contains literal RGB values.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.DIBColors.DIB_PAL_COLORS">
            <summary>
            The color table consists of an array of 16-bit indexes into the LogPalette object (section 2.2.17) that is currently defined in the playback device context.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.DIBColors.DIB_PAL_INDICES">
            <summary>
            No color table exists. The pixels in the DIB are indices into the current logical palette in the playback device context.
            </summary>
        </member>
        <member name="T:EMFConverter.Enums.GraphicsMode">
            <summary>
            The GraphicsMode enumeration is used to specify how to interpret shape data such as rectangle coordinates.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.GraphicsMode.GM_COMPATIBLE">
            <summary>
            TrueType text MUST be written from left to right and right side up, even if the rest of the graphics 
            are flipped on the x-axis or y-axis because of the current world-to-device transformation in the 
            playback device context. Only the height of the text SHOULD be scaled.
            
            Arcs MUST be drawn using the current arc direction in the playback device context, but they MUST NOT 
            respect the current world-to-device transformation that may require a flip along the x-axis or y-axis.
            
            The world-to-device transformation SHOULD only be modified by changing the window and viewport 
            extents and origins, using the EMR_SETWINDOWEXTEX (section 2.3.11.30) and EMR_SETVIEWPORTEXTEX (section 2.3.11.28) 
            records, and the EMR_SETWINDOWORGEX (section 2.3.11.31) and EMR_SETVIEWPORTORGEX (section 2.3.11.30) 
            records, respectively.
            
            Changing the transformation directly by using the EMR_MODIFYWORLDTRANSFORM (section 2.3.12.1) 
            or EMR_SETWORLDTRANSFORM (section 2.3.12.2) records MAY NOT be supported. 
            In GM_COMPATIBLE graphics mode, bottom and rightmost edges MUST be excluded when rectangles are drawn.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.GraphicsMode.GM_ADVANCED">
            <summary>
            TrueType text output MUST fully conform to the current world-to-device transformation in the 
            playback device context.
            
            Arcs MUST be drawn in the counterclockwise direction in world space; however, both arc control 
            points and the arcs themselves MUST fully respect the current world-to-device transformation 
            in the playback device context.
            
            The world-to-device transform MAY be modified directly by using the EMR_MODIFYWORLDTRANSFORM 
            or EMR_SETWORLDTRANSFORM records, or indirectly by changing the window and viewport extents and origins, 
            using the EMR_SETWINDOWEXTEX (section 2.3.11.30) and EMR_SETVIEWPORTEXTEX (section 2.3.11.28) 
            records, and the EMR_SETWINDOWORGEX (section 2.3.11.31) and EMR_SETVIEWPORTORGEX (section 2.3.11.30) 
            records, respectively.
            
            In GM_ADVANCED graphics mode, bottom and rightmost edges MUST be included when rectangles are drawn.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.GraphicsMode.WmfDefault">
            <summary>
            
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.GraphicsMode.EmfDefault">
            <summary>
            
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.MapMode.MM_TEXT">
            <summary>
            Each logical unit is mapped to one device pixel. Positive x is to the right; positive y is down.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.MapMode.MM_LOMETRIC">
            <summary>
            Each logical unit is mapped to 0.1 millimeter. Positive x is to the right; positive y is up.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.MapMode.MM_HIMETRIC">
            <summary>
            Each logical unit is mapped to 0.01 millimeter. Positive x is to the right; positive y is up.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.MapMode.MM_LOENGLISH">
            <summary>
            Each logical unit is mapped to 0.01 inch. Positive x is to the right; positive y is up.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.MapMode.MM_HIENGLISH">
            <summary>
            Each logical unit is mapped to 0.001 inch. Positive x is to the right; positive y is up.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.MapMode.MM_TWIPS">
            <summary>
            Each logical unit is mapped to one-twentieth of a printer's point (1/1440 inch, also called a twip). 
            Positive x is to the right; positive y is up.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.MapMode.MM_ISOTROPIC">
            <summary>
            Logical units are mapped to arbitrary units with equally scaled axes; that is, 
            one unit along the x-axis is equal to one unit along the y-axis. The EMR_SETWINDOWEXTEX and 
            EMR_SETVIEWPORTEXTEX records SHOULD be used to specify the units and the orientation of the axes.
            Adjustments MUST be made as necessary to ensure that the x and y units remain the same size. 
            For example, when the window extent is set, the viewport MUST be adjusted to keep the units isotropic.
            </summary>
        </member>
        <member name="F:EMFConverter.Enums.MapMode.MM_ANISOTROPIC">
            <summary>
            Logical units are mapped to arbitrary units with arbitrarily scaled axes. 
            The EMR_SETWINDOWEXTEX and EMR_SETVIEWPORTEXTEX records SHOULD be used to 
            specify the units, orientation, and scaling.
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.AbstractPen">
            <summary>
            Base class for Pen objects
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.AbstractPen.CreatePen(EMFConverter.Common.IGraphicManager)">
            <summary>
            Create a pen according to specifications in this object.
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.AbstractPen.Style(TallComponents.PDF.Pens.Pen,EMFConverter.Enums.PenStyle)">
            <summary>
            Initialize the pen according to the given style.
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.BitmapCoreHeader">
            <summary>
            The BitmapCoreHeader Object contains information about the dimensions and color format of 
            a device-independent bitmap (DIB).
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.BitmapCoreHeader.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Initialize from the given arguments
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapCoreHeader.HeaderSize">
            <summary>
            Size of the object in bytes
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapCoreHeader.Size">
            <summary>
            Size of bitmap in pixels
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapCoreHeader.IsTopDown">
            <summary>
            If true, the DIB is a top-down bitmap, and its origin is the upper-left corner. 
            If false, the DIB is a bottom-up bitmap, and its origin is the lower-left corner.
            Top-down bitmaps do not support compression.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapCoreHeader.Compression">
            <summary>
            Compression mode of the DIB
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapCoreHeader.Planes">
            <summary>
            The number of planes for the target device. This value MUST be 0x0001
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapCoreHeader.BitCount">
            <summary>
            The format of each pixel, and the maximum number of colors in the DIB.
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.BitmapInfoHeader">
            <summary>
            The BitmapCoreHeader Object contains information about the dimensions and color format of 
            a device-independent bitmap (DIB).
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.BitmapInfoHeader.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Initialize from the given arguments
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapInfoHeader.HeaderSize">
            <summary>
            Size of the object in bytes
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapInfoHeader.Size">
            <summary>
            Size of bitmap in pixels
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapInfoHeader.IsTopDown">
            <summary>
            If true, the DIB is a top-down bitmap, and its origin is the upper-left corner. 
            If false, the DIB is a bottom-up bitmap, and its origin is the lower-left corner.
            Top-down bitmaps do not support compression.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapInfoHeader.Planes">
            <summary>
            The number of planes for the target device. This value MUST be 0x0001
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapInfoHeader.BitCount">
            <summary>
            The format of each pixel, and the maximum number of colors in the DIB.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapInfoHeader.Compression">
            <summary>
            Compression mode of the DIB
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapInfoHeader.ImageSize">
            <summary>
            Size of the image in bytes
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapInfoHeader.XPelsPerMeter">
            <summary>
            Horizontal resolution, in pixels-per-meter, of the target device for the DIB.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapInfoHeader.YPelsPerMeter">
            <summary>
            Vertical resolution, in pixels-per-meter, of the target device for the DIB.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapInfoHeader.ColorUsed">
            <summary>
            the number of indexes in the color table used by the DIB, as follows:
            - If this value is zero, the DIB uses the maximum number of colors that correspond to the BitCount value.
            - If this value is nonzero and the BitCount value is less than 16, this value specifies the number of colors used by the DIB.
            - If this value is nonzero and the BitCount value is 16 or greater, this value specifies the size of the color table used to optimize performance of the system palette.
            Note If this value is nonzero and greater than the maximum possible size of the color table based on the BitCount value, the maximum color table size SHOULD be assumed.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapInfoHeader.ColorImportant">
            <summary>
            Number of color indexes that are required for displaying the DIB. 
            If this value is zero, all color indexes are required
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.BitmapInfoHeader.DataSize">
            <summary>
            Size in bytes of aData (the image) 
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.DeviceIndependentBitmap">
            <summary>
            Bitmap (DIB)
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.DeviceIndependentBitmap.#ctor(EMFConverter.Common.RecordReader,System.Int32,System.Int32,System.Int32,System.Int32,EMFConverter.Enums.DIBColors)">
            <summary>
            Read a header at the current position of the given arguments
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.DeviceIndependentBitmap.Header">
            <summary>
            Gets the bitmap header
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.DeviceIndependentBitmap.ColorTable">
            <summary>
            Color table of this bitmap.
            This can be null.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.DeviceIndependentBitmap.Data">
            <summary>
            Gets the bitmap data
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.DeviceIndependentBitmap.CreateBitmap">
            <summary>
            Create a .NET bitmap from this data.
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.DeviceIndependentBitmap.ToString">
            <summary>
            Gets a string representation
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.DIBColorTable">
            <summary>
            Color table in Device Indepdendent Bitmap
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.DIBColorTable.Read(EMFConverter.Enums.DIBColors,EMFConverter.Common.DataReader,System.Int32,System.Int32)">
            <summary>
            Read the table
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.DIBColorTable.SetupColorPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Setup the color palette based on this color table.
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.DIBHeader">
            <summary>
            Base class for bitmap headers
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.DIBHeader.HeaderSize">
            <summary>
            Size of bitmap header in bytes
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.DIBHeader.Size">
            <summary>
            Size of bitmap in pixels
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.DIBHeader.IsTopDown">
            <summary>
            If true, the DIB is a top-down bitmap, and its origin is the upper-left corner. 
            If false, the DIB is a bottom-up bitmap, and its origin is the lower-left corner.
            Top-down bitmaps do not support compression.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.DIBHeader.Compression">
            <summary>
            Compression mode of the DIB
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.DIBHeader.Planes">
            <summary>
            The number of planes for the target device. 
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.DIBHeader.BitCount">
            <summary>
            The format of each pixel, and the maximum number of colors in the DIB.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.DIBHeader.DataSize">
            <summary>
            Size in bytes of aData (the image) 
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.DIBHeader.ColorUsed">
            <summary>
            the number of indexes in the color table used by the DIB, as follows:
            - If this value is zero, the DIB uses the maximum number of colors that correspond to the BitCount value.
            - If this value is nonzero and the BitCount value is less than 16, this value specifies the number of colors used by the DIB.
            - If this value is nonzero and the BitCount value is 16 or greater, this value specifies the size of the color table used to optimize performance of the system palette.
            Note If this value is nonzero and greater than the maximum possible size of the color table based on the BitCount value, the maximum color table size SHOULD be assumed.
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.DIBHeader.Read(EMFConverter.Common.RecordReader)">
            <summary>
            Read a header at the current position of the given arguments
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.DIBIndexedColorTable">
            <summary>
            No color table exists.
            The pixels in the DIB are indices into the current logical palette in the playback device context.
            DIBColors.DIB_PAL_INDICES
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.DIBIndexedColorTable.SetupColorPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Setup the color palette based on this color table.
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.DIBIndexedColorTable.ToString">
            <summary>
            Get a human readable presentation
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.DIBPaletteColorTable">
            <summary>
            The color table consists of an array of 16-bit indexes into the LogPalette object (section 2.2.17)
            that is currently defined in the playback device context.
            DIBColors.DIB_PAL_COLORS
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.DIBPaletteColorTable.SetupColorPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Setup the color palette based on this color table.
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.DIBPaletteColorTable.ToString">
            <summary>
            Get a human readable presentation
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.DIBRgbColorTable">
            <summary>
            Color table in Device Indepdendent Bitmap
            DIBColors.DIB_RGB_COLORS
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.DIBRgbColorTable.SetupColorPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Setup the color palette based on this color table.
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.DIBRgbColorTable.ToString">
            <summary>
            Get a human readable presentation
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.EmrText">
            <summary>
            EmrText object
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.EmrText.#ctor(EMFConverter.Common.RecordReader,System.Text.Encoding,System.Int32)">
            <summary>
            Initialize from the given arguments
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.LogBrushEx">
            <summary>
            LogBrushEx object
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.LogBrushEx.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Initialize from the given arguments
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.LogFont">
            <summary>
            LogFont object
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.LogFont.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Initialize from the given arguments
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.LogFont.Height">
            <summary>
            Height: A 32-bit signed integer that specifies the height,
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.LogFont.Width">
            <summary>
            Width: A 32-bit signed integer that specifies the average width, in logical units, of characters in the font. 
            If Width is zero, an appropriate value MAY be calculated from other LogFont values, 
            in order to find a font that has the typographer's intended aspect ratio. 
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.LogFont.Escapement">
            <summary>
            Escapement: A 32-bit signed integer that specifies the angle, in tenths of degrees, 
            between the escapement vector and the x-axis of the device. The escapement vector is parallel to the base line of a row of text.
            When the graphics mode is set to GM_ADVANCED, 
            the escapement angle of the string can be specified independently of the orientation angle of the string's characters. 
            Graphics modes are specified in section 2.1.16
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.LogFont.Orientation">
            <summary>
            Orientation: A 32-bit signed integer that specifies the angle, in tenths of degrees, 
            between each character's base line and the x-axis of the device.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.LogFont.Weight">
            <summary>
            Weight: A 32-bit signed integer that specifies the weight of the font in the range 0 through 1000. 
            For example, 400 is normal and 700 is bold. If this value is 0x00000000, a default weight MAY be used.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.LogFont.Italic">
            <summary>
            Italic: An 8-bit unsigned integer that specifies an italic font if set to 0x01; otherwise, it must be 0x00.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.LogFont.Underline">
            <summary>
            Underline: An 8-bit unsigned integer that specifies an underlined font if set to 0x01; otherwise, it must be 0x00.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.LogFont.StrikeOut">
            <summary>
            StrikeOut: An 8-bit unsigned integer that specifies a strikeout font if set to 0x01; otherwise, it must be 0x00.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.LogFont.CharSet">
            <summary>
            CharSet: An 8-bit unsigned integer that specifies the character set. 
            It MAY be set to a value in the Windows Metafile Format CharacterSet enumeration table, specified in [MS-WMF] section 2.1.5.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.LogFont.OutPrecision">
            <summary>
            OutPrecision: A 8-bit unsigned integer that specifies the output precision.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.LogFont.ClipPrecision">
            <summary>
            ClipPrecision: A 8-bit unsigned integer that specifies the clipping precision.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.LogFont.Quality">
            <summary>
            Quality: A 8-bit unsigned integer that specifies the output quality.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.LogFont.Pitch">
            <summary>
            Pitch of the font.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.LogFont.Family">
            <summary>
            Family of the font.
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.LogFont.FaceName">
            <summary>
            FaceName: A string of no more than 32 Unicode characters that specifies the typeface name of the font.
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.LogFont.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Objects.LogFontEx">
            <summary>
            LogFontEx object
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.LogFontEx.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Initialize from the given arguments
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.LogFontExDv">
            <summary>
            LogFontExDv object
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.LogFontExDv.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Initialize from the given arguments
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.LogPen">
            <summary>
            LogPen object
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.LogPen.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Initialize from the given arguments
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.LogPen.CreatePen(EMFConverter.Common.IGraphicManager)">
            <summary>
            Create a pen according to specifications in this object.
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.LogPenEx">
            <summary>
            LogPenEx object
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.LogPenEx.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Initialize from the given arguments
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.LogPenEx.CreatePen(EMFConverter.Common.IGraphicManager)">
            <summary>
            Create a pen according to specifications in this object.
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.Point">
            <summary>
            Point
            This is a non-modifiable object.
            </summary>
        </member>
        <member name="F:EMFConverter.Objects.Point.Empty">
            <summary>
            0, 0
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Values ctor
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.Point.X">
            <summary>
            X coordinate of actual point
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.Point.Y">
            <summary>
            Y coordinate of actual point
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.Point.ToString">
            <summary>
            Convert to human readable representation
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.Rect">
            <summary>
            Rectangle of 32-bit integegers
            This is a non-modifiable object.
            </summary>
        </member>
        <member name="F:EMFConverter.Objects.Rect.Empty">
            <summary>
            0, 0, 0, 0
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.Rect.#ctor(EMFConverter.Objects.Rect)">
            <summary>
            Copy ctor
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Values ctor
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.Rect.#ctor(EMFConverter.Objects.Point,EMFConverter.Objects.Point)">
            <summary>
            Values ctor
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.Rect.#ctor(EMFConverter.Objects.Point,EMFConverter.Objects.Size)">
            <summary>
            Values ctor
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.Rect.Left">
            <summary>
            X-coordinate of upper left corner
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.Rect.Top">
            <summary>
            Y-coordinate of upper left corner
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.Rect.Right">
            <summary>
            X-coordinate of lower right corner
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.Rect.Bottom">
            <summary>
            Y-coordinate of lower right corner
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.Rect.Width">
            <summary>
            Get horizontal size
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.Rect.Height">
            <summary>
            Get vertical size
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.Rect.TopLeft">
            <summary>
            Gets the upper left corner
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.Rect.BottomRight">
            <summary>
            Gets the lower right corner
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.Rect.ToString">
            <summary>
            Create human readable representation
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.RegionData">
            <summary>
            RegionData object
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.RegionData.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Initialize from the given arguments
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.RegionData.Bounds">
            <summary>
            Bounds of the region
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.RegionData.Data">
            <summary>
            Gets all rectangles
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Values ctor
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.Size.Width">
            <summary>
            X-dimension
            </summary>
        </member>
        <member name="P:EMFConverter.Objects.Size.Height">
            <summary>
            Y-dimension
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.Size.ToString">
            <summary>
            Gets human readable representation
            </summary>
        </member>
        <member name="T:EMFConverter.Objects.WorldTransform">
            <summary>
            XForm object.
            This is a non-modifiable object.
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.WorldTransform.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.WorldTransform.#ctor(EMFConverter.Objects.WorldTransform)">
            <summary>
            Copy ctor
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.WorldTransform.#ctor(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Matrix ctor
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.WorldTransform.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Initialize XForm from arguments
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.WorldTransform.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Values ctor
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.WorldTransform.ToMatrix">
            <summary>
            Convert to a .NET Matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:EMFConverter.Objects.WorldTransform.Multiply(EMFConverter.Objects.WorldTransform)">
            <summary>
            Multiple the this transform with the given transform and return the result as new instance.
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.WorldTransform.SetScale(System.Single,System.Single)">
            <summary>
            Create a clone with scale elements (m11, m22) set to sx, sy.
            </summary>
        </member>
        <member name="M:EMFConverter.Objects.WorldTransform.ToString">
            <summary>
            Convert to a human readable string
            </summary>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.Arc">
            <summary>
            The Windows Metafile Format META_ARC record draws an elliptical arc.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Arc.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_ARC Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Arc.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Creates a arc using data from constructor
            </summary>
            <param name="graphicManager">A reference to WMFGraphicManager object</param>
            <returns>ArcShape object</returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Arc.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.CreateBrush">
            <summary>
            The Windows Metafile Format (WMF) META_CREATEBRUSHINDIRECT record creates a Brush Object.
            </summary>
        </member>
        <member name="F:EMFConverter.Wmf.Functions.CreateBrush.styleValue">
            <summary>
            variable used to determine enum PenStyle
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreateBrush.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_CREATEBRUSHINDIRECT Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreateBrush.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Creates a brush using data from constructor
            </summary>
            <param name="graphicManager">A reference to WMFGraphicManager object</param>
            <returns>null</returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreateBrush.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.CreateFont">
            <summary>
            The Windows Metafile Format (WMF) META_CREATEFONTINDIRECT record creates a Font Object. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreateFont.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_CREATEFONTINDIRECT Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreateFont.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Creates a font using data from constructor
            </summary>
            <param name="graphicManager">A reference to WMFGraphicManager object</param>
            <returns>null</returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreateFont.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.CreatePalette">
            <summary>
            The Windows Metafile Format (WMF) META_CREATEPALETTE record creates a Palette Object.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreatePalette.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_CREATEPALETTE Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreatePalette.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Creates a palette using data from constructor
            </summary>
            <param name="graphicManager">A reference to WMFGraphicManager object</param>
            <returns>null</returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreatePalette.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.CreatePatternBrush">
            <summary>
            The Windows Metafile Format (WMF) META_CREATEPATTERNBRUSH record creates a pattern Brush Object with a pattern specified by a Bitmap16 Object.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreatePatternBrush.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_CREATEPATTERNBRUSH Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreatePatternBrush.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Creates a brush pattern using data from constructor
            </summary>
            <param name="graphicManager">A reference to WMFGraphicManager object</param>
            <returns>null</returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreatePatternBrush.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.CreatePatternBrushDIB">
            <summary>
            The Windows Metafile Format (WMF) META_DIBCREATEPATTERNBRUSH record creates a Brush 
            Object with a pattern specified by a DeviceIndependentBitmap (DIB) Object. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreatePatternBrushDIB.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_DIBCREATEPATTERNBRUSH Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreatePatternBrushDIB.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Creates a brush pattern DIB using data from constructor
            </summary>
            <param name="graphicManager">A reference to WMFGraphicManager object</param>
            <returns>null</returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreatePatternBrushDIB.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.CreatePen">
            <summary>
            The Windows Metafile Format (WMF) META_CREATEPENINDIRECT record creates a Pen Object.
            </summary>
        </member>
        <member name="F:EMFConverter.Wmf.Functions.CreatePen.styleValue">
            <summary>
            variable used to determine enum PenStyle
            </summary>
        </member>
        <member name="F:EMFConverter.Wmf.Functions.CreatePen.x">
            <summary>
            x and y defined width of the pen. Default one pixel if x : 0x0000 y : 0x0000(isn't used)
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreatePen.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_CREATEPENINDIRECT Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreatePen.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Creates a pen using data from constructor
            </summary>
            <param name="graphicManager">A reference to WMFGraphicManager object</param>
            <returns>null</returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreatePen.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.CreateRegion.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.Ellipse">
            <summary>
            Draws an ellipse. The center of the ellipse is the center of the specified bounding rectangle.
            The ellipse is outlined by using the current pen and is filled by using the current brush.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Ellipse.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert arguments of function from byte to short
            </summary>
            <param name="arguments">META_ELLIPSE Function arguments</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Ellipse.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Escape.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.ExText">
            <summary>
            The Windows Metafile Format (WMF) META_EXTTEXTOUT record outputs text by using the currently selected font, background color, and text color.
            Optionally, dimensions can be provided for clipping, opaquing, or both.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.ExText.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_EXTTEXTOUT Function arguments</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.ExText.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            
            </summary>
            <param name="graphicManager"></param>
            <returns></returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.ExText.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.IntersectClipRect.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_INTERSECTCLIPRECT Function arguments</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.IntersectClipRect.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.LineTo">
            <summary>
            The Windows Metafile Format META_LINETO record draws a line from the current position up to, but 
            not including, the specified point. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.LineTo.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_LINETO Function arguments</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.LineTo.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.MoveTo">
            <summary>
            The Windows Metafile Format META_MOVETO record redefines the current position to the specified point. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.MoveTo.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_MOVETO Function arguments</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.MoveTo.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.Pie">
            <summary>
            The Windows Metafile Format META_PIE record draws a pie-shaped wedge bounded by the intersection of an ellipse and two radials.
            The pie is outlined by using the current pen and filled by using the current brush.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Pie.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_PIE Function arguments</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Pie.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            
            </summary>
            <param name="graphicManager"></param>
            <returns></returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Pie.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.Polygon">
            <summary>
            The Windows Metafile Format META_POLYGON record paints a polygon consisting of two or more 
            vertices connected by straight lines. The polygon is outlined by using the current pen and filled by 
            using the current brush and polygon fill mode. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Polygon.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_POLYGON Function arguments</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Polygon.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.Polyline">
            <summary>
            The Windows Metafile Format META_POLYLINE record draws a series of line segments by connecting 
            the points in the specified array. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Polyline.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_POLYLINE Function arguments</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Polyline.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.PolyPolygon">
            <summary>
            The Windows Metafile Format META_POLYPOLYGON record paints a series of closed polygons. Each 
            polygon is outlined by using the current pen and filled by using the current brush and polygon fill 
            mode. The polygons drawn by this function can overlap. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.PolyPolygon.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_POLYPOLYGON Function arguments</param>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.RealizePalette">
            <summary>
            The Windows Metafile Format META_REALIZEPALETTE record maps entries from the current logical palette to the system palette.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.RealizePalette.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_REALIZEPALETTE Function arguments</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.RealizePalette.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.Rectangle">
            <summary>
            The Windows Metafile Format META_RECTANGLE record paints a rectangle. The rectangle is outlined 
            by using the current pen and filled by using the current brush. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Rectangle.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_POLYPOLYGON Function arguments</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Rectangle.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Creates a rectangle using data from constructor
            </summary>
            <param name="graphicManager">A reference to WMFGraphicManager object</param>
            <returns>RectangleShape object</returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Rectangle.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.RestoreDC">
            <summary>
            The Windows Metafile Format META_RESTOREDC record defines a record that the current device 
            context should be set from a previously saved device context. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.RestoreDC.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_RESTOREDC Function arguments</param>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.RoundRect">
            <summary>
            The Windows Metafile Format META_ROUNDRECT record paints a rectangle with rounded corners. 
            The rectangle is outlined by using the current pen and filled by using the current brush.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.RoundRect.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_ROUNDRECT Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.RoundRect.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.SaveDC">
            <summary>
            The Windows Metafile Format META_SAVEDC record defines a record that the current device context 
            should be saved for later retrieval. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SaveDC.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_SAVEDC Function arguments</param>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.ScaleViewportExt">
            <summary>
            The Windows Metafile Format META_SCALEVIEWPORTEXT record defines the viewport for a device 
            context by using the ratios formed by the specified multiplicands and divisors. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.ScaleViewportExt.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_SCALEVIEWPORTEXT Function arguments</param>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.SelectObject">
            <summary>
            The Windows Metafile Format META_SELECTOBJECT record specifies a graphics object for the 
            playback device context. The new object replaces the previous object of the same type. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SelectObject.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_SELECTOBJECT Function arguments</param>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.SelectPalette">
            <summary>
            The Windows Metafile Format META_SELECTPALETTE record defines the current logical palette with a specified Palette Object.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SelectPalette.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_SELECTPALETTE Function arguments</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SelectPalette.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.SetBkColor">
            <summary>
            The Windows Metafile Format META_SETBKCOLOR record defines current background color to the specified color value,
            or to the nearest physical color if the device cannot represent the specified color value.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetBkColor.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_SETBKCOLOR Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetBkColor.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Set BackgroundColor properties in WMFGraphicManager.
            </summary>
            <param name="wmfGraphicManager"></param>
            <returns>null</returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetBkColor.ToString">
            <summary>
            Returns information about SetBkColor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetMapMode.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.SetMapperFlags">
            <summary>
            The Windows Metafile Format META_SETMAPPERFLAGS record redefines the 
            algorithm that the font mapper uses when it maps logical fonts to physical fonts.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetMapperFlags.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.SetPolyfillMode">
            <summary>
            The Windows Metafile Format META_SETPOLYFILLMODE record defines the polygon fill mode for 
            functions that fill polygons. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetPolyfillMode.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_SETPOLYFILLMODE Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetPolyfillMode.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.SetRelabs">
            <summary>
            The Windows Metafile Format META_SETRELABS record is reserved and not supported. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetRelabs.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_SETRELABS Function arguments</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetRelabs.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.SetRop2">
            <summary>
            The Windows Metafile Format META_SETROP2 record defines the current foreground binary raster operation mixing mode.
            Metafile processing uses the foreground mix mode to combine pens and interiors of filled objects with the colors already on the screen. 
            The foreground mix mode defines how the colors from the brush or pen and the colors in the existing image are to be combined.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetRop2.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_CREATEBRUSHINDIRECT Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetRop2.ToString">
            <summary>
            Returns information about SetRop2
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetStretchBltMode.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.SetTextAlign">
            <summary>
            The Windows Metafile Format META_SETTEXTALIGN record defines the text-alignment values for the 
            specified device context. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetTextAlign.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_SETTEXTALIGN Function arguments.</param>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.SetTextCharExtra">
            <summary>
            The Windows Metafile Format (WMF) META_SETTEXTCHAREXTRA record defines intercharacter spacing. 
            Intercharacter spacing is added to each character, including break characters, when the system writes a line of text.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetTextCharExtra.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_SETTEXTCHAREXTRA Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetTextCharExtra.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.SetTextColor">
            <summary>
            The Windows Metafile Format META_SETTEXTCOLOR record defines the text color for the specified device context to the specified color.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetTextColor.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_SETTEXTCOLOR Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetTextColor.CreateShape(EMFConverter.Common.IGraphicManager)">
            <summary>
            Set FontColor.
            </summary>
            <param name="wmfGraphicManager"></param>
            <returns></returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetTextColor.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.SetTextJustification">
            <summary>
            The Windows Metafile Format (WMF) META_SETTEXTJUSTIFICATION record defines the amount of space to add to the break characters in a string of text.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetTextJustification.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_SETTEXTJUSTIFICATION Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetTextJustification.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.SetWindowExt">
            <summary>
            The Windows Metafile Format META_SETWINDOWEXT record defines the horizontal and vertical 
            extents of the window for a device context by using the specified values. 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetWindowExt.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_SETWINDOWEXT Function arguments.</param>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.SetWindowOrg">
            <summary>
            The Windows Metafile Format META_SETWINDOWORG record defines which window point maps to 
            the window origin (0,0). 
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.SetWindowOrg.#ctor(EMFConverter.Common.DataReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_SETWINDOWORG Function arguments.</param>
        </member>
        <member name="T:EMFConverter.Wmf.Functions.Text">
            <summary>
            The Windows Metafile Format (WMF) META_TEXTOUT record outputs a character string at the specified location,
            by using the currently selected font, background color, and text color.
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Text.#ctor(EMFConverter.Common.RecordReader)">
            <summary>
            Convert function arguments.
            </summary>
            <param name="arguments">META_TEXTOUT Function arguments.</param>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.Text.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="M:EMFConverter.Wmf.Functions.UnknownFunction.ToString">
            <summary>
            Produces string with information about arguments of the method and method call.
            </summary>
            <returns>Information string</returns>
        </member>
        <member name="T:EMFConverter.Wmf.WMFFile">
            <summary>
            Contains Metafile objects and functions that are stored in it.
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFGraphicManager.NumOfObjects">
            <summary>
            Number of graphic objects (pens, brushes etc) used by file. This value can be readed from WMF header.
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFGraphicManager.MiterLimit">
            <summary>
            MiterLimit
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFGraphicManager.Width">
            <summary>
            Width of all graphic
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFGraphicManager.Height">
            <summary>
            Height of all graphic
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.WMFGraphicManager.AddLogicalToPdfTransform(TallComponents.PDF.Shapes.ContentShape,EMFConverter.Enums.GraphicsMode)">
            <summary>
            Gets a transform to tranform a shape from logical space to PDF space.
            </summary>
            <summary>
            Add the transforms to the given shape to tranform a shape from logical space to PDF space.
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFGraphicManager.M11">
            <summary>
            M11 element of worldtransform
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFGraphicManager.M22">
            <summary>
            M22 element of worldtransform
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFGraphicManager.ActualRop2">
            <summary>
            Raster operation mode
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFGraphicManager.ObjectsTable">
            <summary>
            Gets the object table.
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFGraphicManager.ReversedYOrientation">
            <summary>
            ReversedYOrientation
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFHeader.HeaderSize">
            <summary>
            Size of header in bytes (always 18)
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFHeader.WinVersion">
            <summary>
            Version of Windows used
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFHeader.FileSize">
            <summary>
            Size of metafile in bytes
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFHeader.NumOfObjects">
            <summary>
            Number of objects in metafile
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFHeader.MaxRecordSize">
            <summary>
            Size of the largest record in bytes
            </summary>
        </member>
        <member name="M:EMFConverter.Wmf.WMFRecord.ReadHeader(System.Byte[],System.Int32,System.Int32@,EMFConverter.Wmf.RecordType@)">
            <summary>
            Read a WMF record header and create a reader for its arguments.
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFSpecialHeader.Key">
            <summary>
            Magic number (always 9AC6CDD7h)
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFSpecialHeader.Left">
            <summary>
            Left coordinate in metafile units
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFSpecialHeader.Top">
            <summary>
            Top coordinate in metafile units
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFSpecialHeader.Right">
            <summary>
            Right coordinate in metafile units
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFSpecialHeader.Bottom">
            <summary>
            Top coordinate in metafile units
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFSpecialHeader.Inch">
            <summary>
            Number of metafile units per inch
            </summary>
        </member>
        <member name="P:EMFConverter.Wmf.WMFSpecialHeader.Checksum">
            <summary>
            Checksum value for first 10 words of special header
            </summary>
        </member>
    </members>
</doc>
