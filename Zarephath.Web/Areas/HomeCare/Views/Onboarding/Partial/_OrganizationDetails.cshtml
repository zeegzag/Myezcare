@model AddOrganizationSettingModel
@Html.Hidden("SettingHiddenModel", Common.SerializeObject(Model))
<div data-ng-controller="SystemSettingController">
    <form id="frmsettings">
        @*<div class="row">
            <div class="col-md-12">
                <input type="submit" data-ng-click="Save()" class="btn btn-sm green-jungle pull-right" value="@Resource.Save" />
                <a href="@Constants.HCDashboardURL" class="wzd-cancel">
                    <input type="button" class="btn btn-sm red-mint pull-right margin-right-10" value="@Resource.Cancel" />
                </a>
            </div>
        </div>*@


        <div class="row">
            <div class="col-sm-12">
                <div class="form-group row">
                    <div class="col-sm-12">
                        <div class="fscontainer">
                            <div class="legend">
                                @Resource.OrganizationInformation
                            </div>
                            <div class="row">
                                <div class="form-group col-lg-4 col-md-2 col-sm-2 col-xs-12">
                                    <label class="control-label required">
                                        @Resource.OrganizationName
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.SiteName,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.SiteName",
         placeholder = @Resource.SiteName,
         maxlength = 100
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.SiteName)
                                    </div>
                                </div>
                                <div class="form-group col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                    <label class="control-label required">
                                        @Resource.SupportEmail
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.SupportEmail,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.SupportEmail",
         placeholder = @Resource.SupportEmail,
         maxlength = 200
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.SupportEmail)
                                    </div>
                                </div>
                                <div class="form-group col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                    <label class="control-label">
                                        @Resource.Address
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.OrganizationAddress,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.OrganizationAddress",
         placeholder = @Resource.Address,
         maxlength = 200
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.OrganizationAddress)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                    <label class="control-label">
                                        @Resource.City
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.OrganizationCity,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.OrganizationCity",
         placeholder = @Resource.City,
         maxlength = 200
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.OrganizationCity)
                                    </div>
                                </div>
                                <div class="form-group col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                    <label class="control-label">
                                        @Resource.State
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.OrganizationState,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.OrganizationState",
         placeholder = @Resource.State,
         maxlength = 200
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.OrganizationState)
                                    </div>
                                </div>
                                <div class="form-group col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                    <label class="control-label">
                                        @Resource.ZipCode
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.OrganizationZipcode,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.OrganizationZipcode",
         placeholder = @Resource.ZipCode,
         maxlength = 5,
         dir_valid_number = ""
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.OrganizationZipcode)
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-lg-4 col-md-2 col-sm-2 col-xs-12">
                                    <label class="control-label required">
                                        @Resource.TimeZone
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.DropDownListFor(m => m.OrganizationSetting.TimeZone, Common.SetTimeZoneList().ToSelectList(Convert.ToString(Model.OrganizationSetting.TimeZone), "Name", "Value", Resource.Select, ""), new
                    {
                        data_ng_model = "SettingModel.TimeZone",
                        @class = "form-control input-sm",
                        data_ng_init = "SettingModel.TimeZone=SettingModel.TimeZone==''?null:SettingModel.TimeZone",
                        //convert_to_number = "",
                    })
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.TimeZone)
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="fscontainer">
                            <div class="legend">
                                @Resource.SiteMiscellaneousSettings
                            </div>
                            <div class="row">
                                <div class="form-group col-lg-4 col-md-2 col-sm-2 col-xs-12">
                                    <label class="control-label required">
                                        @Resource.PageSize
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.PageSize,
                           new
                           {
                               @class = "form-control input-sm",
                               data_ng_model = "SettingModel.PageSize",
                               placeholder = @Resource.PageSize,
                               maxlength = 2,
                               dir_valid_number = ""
                           })
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.PageSize)
                                    </div>
                                </div>
                                <div class="form-group col-lg-4 col-md-4 col-sm-4 col-xs-12" style="display:none">
                                    <label class="control-label required">
                                        @Resource.GoogleReCaptcha
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.GoogleRecaptchaKey,
                           new
                           {
                               @class = "form-control input-sm",
                               data_ng_model = "SettingModel.GoogleRecaptchaKey",
                               placeholder = @Resource.GoogleReCaptcha,
                               maxlength = 100
                           })
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.GoogleRecaptchaKey)
                                    </div>
                                </div>
                                <div class="form-group col-lg-4 col-md-4 col-sm-4">
                                    <label class="control-label">
                                        Patient Resignature Needed
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.DropDownListFor(m => m.OrganizationSetting.PatientResignatureNeeded, Common.SetYesNoListForBoolean().ToSelectList(Convert.ToString(Model.OrganizationSetting.PatientResignatureNeeded), "Name", "Value"), new
                    {
                        id = "EnableSSL",
                        data_ng_model = "SettingModel.PatientResignatureNeeded",
                        data_ng_init = "SettingModel.PatientResignatureNeeded=SettingModel.PatientResignatureNeeded==''?null:SettingModel.PatientResignatureNeeded",
                        @class = "form-control input-sm",
                        convert_to_boolean = ""
                    })
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.PatientResignatureNeeded)
                                    </div>
                                </div>
                            </div>

                            <div class="fscontainer">
                                <div class="legend">
                                    MIF Settings
                                </div>
                                <div class="row">
                                    <div class="form-group col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                        <label class="control-label">
                                            Appendix
                                        </label>
                                        <div class="input-group-sm">
                                            @Html.TextBoxFor(q => q.OrganizationSetting.MIF_Appendix,
                           new
                           {
                               @class = "form-control input-sm",
                               data_ng_model = "SettingModel.MIF_Appendix",
                               placeholder = "Appendix",
                               maxlength = 100
                           })
                                            @Html.ValidationMessageFor(q => q.OrganizationSetting.MIF_Appendix)
                                        </div>
                                    </div>
                                    <div class="form-group col-lg-4 col-md-4 col-sm-4 col-xs-12">
                                        <label class="control-label">
                                            Description
                                        </label>
                                        <div class="input-group-sm">
                                            @Html.TextBoxFor(q => q.OrganizationSetting.MIF_Description,
                           new
                           {
                               @class = "form-control input-sm",
                               data_ng_model = "SettingModel.MIF_Description",
                               placeholder = "Description",
                               maxlength = 500
                           })
                                            @Html.ValidationMessageFor(q => q.OrganizationSetting.GoogleRecaptchaKey)
                                        </div>
                                    </div>
                                    <div class="form-group col-lg-4 col-md-4 col-sm-4">
                                        <label class="control-label">
                                            Revision
                                        </label>
                                        <div class="input-group-sm">
                                            @Html.TextBoxFor(q => q.OrganizationSetting.MIF_Revision,
                           new
                           {
                               @class = "form-control input-sm",
                               data_ng_model = "SettingModel.MIF_Revision",
                               placeholder = "Revision",
                               maxlength = 100
                           })
                                            @Html.ValidationMessageFor(q => q.OrganizationSetting.MIF_Revision)
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="fscontainer">
                            <div class="legend">
                                @Resource.Site Logo Settings
                            </div>
                            <div class="row">
                                <div class="col-lg-12 no-padding">
                                    <div class="form-group col-lg-2 col-md-5 col-sm-3 col-xs-12 ">
                                        <label class="control-label required"><strong>@Resource.LoginScreenLogo</strong></label>

                                        @Html.TextBoxFor(q => q.OrganizationSetting.LoginScreenLogo,
new
{
data_ng_model = "SettingModel.TempLoginScreenLogoPath",
@class = "form-control hideErrorContent replaceErrorSource",
@readonly = "readonly"
})
                                        @Html.ValidationMessageFor(m => m.OrganizationSetting.LoginScreenLogo)

                                        <div class="replaceErrorDest">
                                            @*<div class="btn-group btn-block text-center">*@
                                            <div data-ng-if="!IsFileUploading" class="fileUpload btn btn-xs btn-primary margin-right-0">
                                                <span><i class="icon-plus"></i>&nbsp; @Resource.UploadImage</span>
                                                <div>
                                                    <div>
                                                        <input id="imgLoginLogo" type="file" name="files[]" class="upload" value="Browse"
                                                               fileupload
                                                               file-uploadurl="{{UploadFile}}"
                                                               beforesend="LoginLogoBeforeSend"
                                                               aftersend="LoginLogoAfterSend"
                                                               progress="LoginLogoProgress"
                                                               filelist="UploadingLoginScreenLogoFileList"
                                                               onchange="loadFile(event,'imgLoginLogo')"
                                                               limitmultifileuploads="1" />
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="font-sm margin-top-10">
                                                <b class="font-red-thunderbird">@Resource.NoteLabel</b>&nbsp;<i>@Html.Raw(string.Format(Resource.LoginScreenLogoNote))</i>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group col-lg-2 col-md-3 col-sm-3 col-xs-12 ">
                                        <div class="col-sm-12 no-padding thumb_loginscreen">
                                            <div data-ng-if="SettingModel.TempLoginScreenLogoPath != null">
                                                <img class="img-responsive image" id="imgDisplay" src="" data-ng-show="!IsFileUploading && SettingModel.TempLoginScreenLogoPath" data-ng-src="{{SettingModel.TempLoginScreenLogoPath}}" />
                                                <img class="img-responsive image" id="imgLoginLogo" src="" data-ng-show="IsFileUploading" />

                                            </div>
                                            <div data-ng-if="SettingModel.TempLoginScreenLogoPath == null">
                                                <img class="img-responsive image" id="defaultImage" src="~/Assets/images/loginscreen-default-logo.png" />
                                            </div>
                                        </div>
                                        <div class="col-sm-12 no-padding" data-ng-repeat="filedata in UploadingLoginScreenLogoFileList">
                                            <div class="progress-bar" data-ng-class="{'progress-bar-success': !filedata.IsError,'progress-bar-danger': filedata.IsError}" data-ng-style="{ 'width': filedata.FileProgress+'%' }"><span data-ng-bind="filedata.IsError?filedata.ErrorMessage:filedata.FileProgress+'%'"></span></div>
                                        </div>
                                    </div>

                                    <div class="form-group col-lg-2 col-md-5 col-sm-3 col-xs-12">
                                        <label class="control-label required"><strong>@Resource.SidebarLogo</strong></label>

                                        @Html.TextBoxFor(q => q.OrganizationSetting.SiteLogo,
new
{
data_ng_model = "SettingModel.TempLogoImagePath",
@class = "form-control hideErrorContent replaceErrorSource",
@readonly = "readonly"
})
                                        @Html.ValidationMessageFor(m => m.OrganizationSetting.SiteLogo)

                                        <div class="replaceErrorDest">
                                            @*<div class="btn-group btn-block text-center">*@
                                            <div data-ng-if="!IsFileUploading" class="fileUpload btn btn-xs btn-primary margin-right-0">
                                                <span><i class="icon-plus"></i>&nbsp; @Resource.UploadImage</span>
                                                <div>
                                                    <div>
                                                        <input id="imgSiteLogo" type="file" name="files[]" class="upload" value="Browse"
                                                               fileupload
                                                               file-uploadurl="{{UploadFile}}"
                                                               beforesend="BeforeSend"
                                                               aftersend="AfterSend"
                                                               progress="Progress"
                                                               filelist="UploadingSiteLogoFileList"
                                                               onchange="loadFile(event,'imgSiteLogo')"
                                                               limitmultifileuploads="1" />
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="font-sm margin-top-10">
                                                <b class="font-red-thunderbird">@Resource.NoteLabel</b>&nbsp;<i>@Html.Raw(string.Format(Resource.SidebarLogoNote))</i>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group col-lg-2 col-md-3 col-sm-3 col-xs-12">
                                        <div class="col-sm-12 no-padding thumb_sidebar">
                                            <div data-ng-if="SettingModel.TempLogoImagePath != null">
                                                <img class="img-responsive image" id="imgDisplay" src="" data-ng-show="!IsFileUploading && SettingModel.TempLogoImagePath" data-ng-src="{{SettingModel.TempLogoImagePath}}" />
                                                <img class="img-responsive image" id="imgSiteLogo" src="" data-ng-if="IsFileUploading" />

                                            </div>
                                            <div data-ng-if="SettingModel.TempLogoImagePath == null">
                                                <img class="img-responsive image" style="height: 20px !important" id="defaultImage" src="~/Assets/images/sidebar-defaultlogo.png" />
                                            </div>
                                        </div>
                                        <div class="col-sm-12 no-padding" data-ng-repeat="filedata in UploadingSiteLogoFileList">
                                            <div class="progress-bar" data-ng-class="{'progress-bar-success': !filedata.IsError,'progress-bar-danger': filedata.IsError}" data-ng-style="{ 'width': filedata.FileProgress+'%' }"><span data-ng-bind="filedata.IsError?filedata.ErrorMessage:filedata.FileProgress+'%'"></span></div>
                                        </div>
                                    </div>

                                    <div class="form-group col-lg-2 col-md-5 col-sm-3 col-xs-12">
                                        <label class="control-label required"><strong>@Resource.FavIcon</strong></label>

                                        @Html.TextBoxFor(q => q.OrganizationSetting.FavIcon,
new
{
data_ng_model = "SettingModel.TempFavIconPath",
@class = "form-control hideErrorContent replaceErrorSource",
@readonly = "readonly"
})
                                        @Html.ValidationMessageFor(m => m.OrganizationSetting.FavIcon)

                                        <div class="replaceErrorDest">
                                            @*<div class="btn-group btn-block text-center">*@
                                            <div data-ng-if="!IsFileUploading" class="fileUpload btn btn-xs btn-primary margin-right-0">
                                                <span><i class="icon-plus"></i>&nbsp; @Resource.UploadImage</span>
                                                <div>
                                                    <div>
                                                        <input id="imgFavIcon" type="file" name="files[]" class="upload" value="Browse"
                                                               fileupload
                                                               file-uploadurl="{{UploadFile}}"
                                                               beforesend="FavIconBeforeSend"
                                                               aftersend="FavIconAfterSend"
                                                               progress="FavIconProgress"
                                                               filelist="UploadingFavIconFileList"
                                                               onchange="loadFile(event,'imgFavIcon')"
                                                               limitmultifileuploads="1" />
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="font-sm margin-top-10">
                                                <b class="font-red-thunderbird">@Resource.NoteLabel</b>&nbsp;<i>@Html.Raw(string.Format(Resource.FavIconNote))</i>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group col-lg-2 col-md-3 col-sm-3 col-xs-12 ">
                                        <div class="col-sm-12 no-padding thumb_favicon">
                                            <div data-ng-if="SettingModel.TempFavIconPath != null">
                                                <img class="img-responsive image" id="imgDisplay" src="" data-ng-show="!IsFileUploading && SettingModel.TempFavIconPath" data-ng-src="{{SettingModel.TempFavIconPath}}" />
                                                <img class="img-responsive image" id="imgFavIcon" src="" data-ng-show="IsFileUploading" />

                                            </div>
                                            <div data-ng-if="SettingModel.TempFavIconPath == null">
                                                <img class="img-responsive image" id="defaultImage" src="~/Assets/images/favicon-default.png" />
                                            </div>
                                        </div>
                                        <div class="col-sm-12 no-padding" data-ng-repeat="filedata in UploadingFavIconFileList">
                                            <div class="progress-bar" data-ng-class="{'progress-bar-success': !filedata.IsError,'progress-bar-danger': filedata.IsError}" data-ng-style="{ 'width': filedata.FileProgress+'%' }"><span data-ng-bind="filedata.IsError?filedata.ErrorMessage:filedata.FileProgress+'%'"></span></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-12 no-padding">
                                    <div class="form-group col-lg-2 col-md-5 col-sm-3 col-xs-12">
                                        <label class="control-label required"><strong>@Resource.TemplateLogo</strong></label>

                                        @Html.TextBoxFor(q => q.OrganizationSetting.TemplateLogo,
new
{
data_ng_model = "SettingModel.TempTemplateLogoPath",
@class = "form-control hideErrorContent replaceErrorSource",
@readonly = "readonly"
})
                                        @Html.ValidationMessageFor(m => m.OrganizationSetting.TemplateLogo)

                                        <div class="replaceErrorDest">
                                            @*<div class="btn-group btn-block text-center">*@
                                            <div data-ng-if="!IsFileUploading" class="fileUpload btn btn-xs btn-primary margin-right-0">
                                                <span><i class="icon-plus"></i>&nbsp; @Resource.UploadImage</span>
                                                <div>
                                                    <div>
                                                        <input id="imgTemplateLogo" type="file" name="files[]" class="upload" value="Browse"
                                                               fileupload
                                                               file-uploadurl="{{UploadFile}}"
                                                               beforesend="TemplateLogoBeforeSend"
                                                               aftersend="TemplateLogoAfterSend"
                                                               progress="TemplateLogoProgress"
                                                               filelist="UploadingTemplateLogoFileList"
                                                               onchange="loadFile(event,'imgTemplateLogo')"
                                                               limitmultifileuploads="1" />
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="font-sm margin-top-10">
                                                <b class="font-red-thunderbird">@Resource.NoteLabel</b>&nbsp;<i>@Html.Raw(string.Format(Resource.TemplateLogoNote))</i>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group col-lg-2 col-md-3 col-sm-3 col-xs-12">
                                        <div class="col-sm-12 no-padding thumb_TemplateLogo">
                                            <div data-ng-if="SettingModel.TempTemplateLogoPath != null">
                                                <img class="img-responsive image" id="imgDisplay" src="" data-ng-show="!IsFileUploading && SettingModel.TempTemplateLogoPath" data-ng-src="{{SettingModel.TempTemplateLogoPath}}" />
                                                <img class="img-responsive image" id="imgTemplateLogo" src="" data-ng-show="IsFileUploading" />
                                            </div>
                                            <div data-ng-if="SettingModel.TempTemplateLogoPath == null">
                                                <img class="img-responsive image" id="defaultImage" src="~/Assets/images/TemplateLogo-default-logo.png" />
                                            </div>
                                        </div>
                                        <div class="col-sm-12 no-padding" data-ng-repeat="filedata in UploadingTemplateLogoFileList">
                                            <div class="progress-bar" data-ng-class="{'progress-bar-success': !filedata.IsError,'progress-bar-danger': filedata.IsError}" data-ng-style="{ 'width': filedata.FileProgress+'%' }"><span data-ng-bind="filedata.IsError?filedata.ErrorMessage:filedata.FileProgress+'%'"></span></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="fscontainer">
                            <div class="legend">
                                @Resource.InvoiceSettings
                            </div>
                            <div class="row">
                                <div class="form-group col-lg-4 col-md-4 col-sm-4">
                                    <label class="control-label">
                                        @Resource.InvoiceGenerationFrequency
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.DropDownListFor(m => m.OrganizationSetting.InvoiceGenerationFrequency, Common.SetInvoiceGenerationFrequencyList().ToSelectList(Convert.ToString(Model.OrganizationSetting.InvoiceGenerationFrequency), "Name", "Value"),
new
{
         id = "EnableSSL",
         data_ng_model = "SettingModel.InvoiceGenerationFrequency",
         data_ng_init = "SettingModel.InvoiceGenerationFrequency=SettingModel.InvoiceGenerationFrequency==null?'1':SettingModel.InvoiceGenerationFrequency",
         @class = "form-control input-sm",
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.InvoiceGenerationFrequency)
                                    </div>
                                </div>
                                <div class="form-group col-lg-4 col-md-4 col-sm-4">
                                    <label class="control-label">
                                        @Resource.InvoiceTaxRate
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.InvoiceTaxRate,
new
{
         @type = "number",
         @min = "0",
         @max = "100",
         @step = "0.01",
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.InvoiceTaxRate",
         placeholder = @Resource.InvoiceTaxRate
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.InvoiceTaxRate)
                                    </div>
                                </div>
                                <div class="form-group col-lg-4 col-md-4 col-sm-4">
                                    <label class="control-label">
                                        @Resource.InvoiceDueDays
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.InvoiceDueDays,
new
{
         @type = "number",
         @min = "0",
         @max = "100",
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.InvoiceDueDays",
         placeholder = @Resource.InvoiceDueDays
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.InvoiceDueDays)
                                    </div>
                                </div>



                            </div>
                            <div class="row">
                                <div class="form-group col-lg-6 col-md-3 col-sm-4">
                                    <label class="control-label">
                                        @Resource.InvoiceNotes
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextAreaFor(q => q.OrganizationSetting.InvoiceNote,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.InvoiceNote",
         placeholder = @Resource.InvoiceNotes,
         rows = 3
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.InvoiceNote)
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="fscontainer">
                            <div class="legend">
                                @Resource.SMTPSettings
                            </div>
                            <div class="row">
                                <div class="form-group col-lg-2 col-md-3 col-sm-4">
                                    <label class="control-label">
                                        @Resource.NetworkHost
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.NetworkHost,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.NetworkHost",
         placeholder = @Resource.NetworkHost,
         maxlength = 200
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.NetworkHost)
                                    </div>
                                </div>
                                <div class="form-group col-lg-2 col-md-3 col-sm-4">
                                    <label class="control-label">
                                        @Resource.NetworkPort
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.NetworkPort,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.NetworkPort",
         placeholder = @Resource.NetworkPort,
         maxlength = 50
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.NetworkPort)
                                    </div>
                                </div>
                                <div class="form-group col-lg-2 col-md-3 col-sm-4">
                                    <label class="control-label">
                                        @Resource.FromTitle
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.FromTitle,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.FromTitle",
         placeholder = @Resource.FromTitle,
         maxlength = 100
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.FromTitle)
                                    </div>
                                </div>
                                <div class="form-group col-lg-2 col-md-3 col-sm-4">
                                    <label class="control-label">
                                        @Resource.FromEmail
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.FromEmail,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.FromEmail",
         placeholder = @Resource.FromEmail,
         maxlength = 200
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.FromEmail)
                                    </div>
                                </div>
                                <div class="form-group col-lg-2 col-md-3 col-sm-4">
                                    <label class="control-label">
                                        @Resource.Password
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.FromEmailPassword,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.FromEmailPassword",
         placeholder = @Resource.Password,
         maxlength = 200
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.FromEmailPassword)
                                    </div>
                                </div>
                                <div class="form-group col-lg-2 col-md-3 col-sm-4">
                                    <label class="control-label">
                                        @Resource.EnableSSL
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.DropDownListFor(m => m.OrganizationSetting.EnableSSL, Common.SetTrueFalseListForBoolean().ToSelectList(Convert.ToString(Model.OrganizationSetting.EnableSSL), "Name", "Value"), new
                    {
                        id = "EnableSSL",
                        data_ng_model = "SettingModel.EnableSSL",
                        data_ng_init = "SettingModel.EnableSSL=SettingModel.EnableSSL==''?null:SettingModel.EnableSSL",
                        @class = "form-control input-sm",
                        convert_to_boolean = ""
                    })
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.EnableSSL)
                                    </div>
                                </div>
                            </div>

                        </div>


                        <div class="fscontainer">
                            <div class="legend">
                                @Resource.IVRDetails
                            </div>
                            <div class="row">
                                <div class="form-group col-lg-4 col-md-3 col-sm-4" style="display:none">
                                    <label class="control-label ">
                                        @Resource.TwilioAccountSID
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.TwilioAccountSID,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.TwilioAccountSID",
         placeholder = @Resource.TwilioAccountSID,
         maxlength = 200
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.TwilioAccountSID)
                                    </div>
                                </div>
                                <div class="form-group col-lg-4 col-md-3 col-sm-4" style="display:none">
                                    <label class="control-label ">
                                        @Resource.TwilioAuthToken
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.TwilioAuthToken,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.TwilioAuthToken",
         placeholder = @Resource.TwilioAuthToken,
         maxlength = 50
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.TwilioAuthToken)
                                    </div>
                                </div>
                                <div class="form-group col-lg-4 col-md-3 col-sm-4" style="display:none">
                                    <label class="control-label ">
                                        @Resource.TwilioServiceSID
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.TwilioServiceSID,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.TwilioServiceSID",
         placeholder = @Resource.TwilioServiceSID,
         maxlength = 200
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.TwilioServiceSID)
                                    </div>
                                </div>

                                <div class="form-group col-lg-2 col-md-3 col-sm-4">
                                    <label class="control-label ">
                                        @Resource.CountryCode
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.TwilioDefaultCountryCode,
new
{
         @class = "form-control input-sm countrycode",
         data_ng_model = "SettingModel.TwilioDefaultCountryCode",
         placeholder = @Resource.TwilioCountryCode,
         maxlength = 10,

})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.TwilioDefaultCountryCode)
                                    </div>
                                </div>
                                <div class="form-group col-lg-2 col-md-3 col-sm-4">
                                    <label class="control-label ">
                                        @Resource.IVRPhoneNo
                                    </label>
                                    <div class="input-group-sm">
                                        @Html.TextBoxFor(q => q.OrganizationSetting.TwilioFromNos,
new
{
         @class = "form-control input-sm",
         data_ng_model = "SettingModel.TwilioFromNos",
         placeholder = @Resource.IVRPhoneNo,
         maxlength = 15
})
                                        @Html.ValidationMessageFor(q => q.OrganizationSetting.TwilioFromNo)
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </form>
</div>

<script type="text/javascript">
        var loadFile = function (event, imageId) {
            var output = document.getElementById(imageId);
            output.src = URL.createObjectURL(event.target.files[0]);
        };

        var InvalidImageUploadMessage = '@Html.Raw(HttpUtility.JavaScriptStringEncode(@Resource.InvalidImageUploadMessage))';
        var EnableDisableConfirmationMessage = '@string.Format(Resource.EnableDisableConfirmationMessage, Resource.GeneralMaster)';
        var MaximumUploadImageSizeMessage = '@Html.Raw(HttpUtility.JavaScriptStringEncode(@Resource.MaximumUploadFileSizeMessage5MB))';
        var MaxImageUploadSizeInBytes = '@Resource.MaxImageUploadSizeInBytes';
</script>